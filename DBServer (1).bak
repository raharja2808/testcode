USE [master]
GO
/****** Object:  Database [PacmanMainDB]    Script Date: 3/9/2023 1:32:30 PM ******/
CREATE DATABASE [PacmanMainDB]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'PacmanMainDB', FILENAME = N'D:\data\PacmanMainDB.mdf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [INDEX] 
( NAME = N'pacman_index', FILENAME = N'D:\data\pacman_index.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [MASTER] 
( NAME = N'pacman_master', FILENAME = N'D:\data\pacman_master.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDINIDR] 
( NAME = N'pacman_fundin_idr', FILENAME = N'D:\data\pacman_fundin_idr.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDINJPY] 
( NAME = N'pacman_fundin_jpy', FILENAME = N'D:\data\pacman_fundin_jpy.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDINKRW] 
( NAME = N'pacman_fundin_krw', FILENAME = N'D:\data\pacman_fundin_krw.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDINMYR] 
( NAME = N'pacman_fundin_myr', FILENAME = N'D:\data\pacman_fundin_myr.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDINSGD] 
( NAME = N'pacman_fundin_sgd', FILENAME = N'D:\data\pacman_fundin_sgd.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDINTHB] 
( NAME = N'pacman_fundin_thb', FILENAME = N'D:\data\pacman_fundin_thb.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDINVND] 
( NAME = N'pacman_fundin_vnd', FILENAME = N'D:\data\pacman_fundin_vnd.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDOUTIDR] 
( NAME = N'pacman_fundout_idr', FILENAME = N'D:\data\pacman_fundout_idr.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDOUTJPY] 
( NAME = N'pacman_fundout_jpy', FILENAME = N'D:\data\pacman_fundout_jpy.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDOUTKRW] 
( NAME = N'pacman_fundout_krw', FILENAME = N'D:\data\pacman_fundout_krw.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDOUTMYR] 
( NAME = N'pacman_fundout_myr', FILENAME = N'D:\data\pacman_fundout_myr.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDOUTSGD] 
( NAME = N'pacman_fundout_sgd', FILENAME = N'D:\data\pacman_fundout_sgd.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDOUTTHB] 
( NAME = N'pacman_fundout_thb', FILENAME = N'D:\data\pacman_fundout_thb.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANFUNDOUTVND] 
( NAME = N'pacman_fundout_vnd', FILENAME = N'D:\data\pacman_fundout_vnd.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [PACMANLOG] 
( NAME = N'pacman_log', FILENAME = N'D:\data\pacman_log.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [SETTLEMENT] 
( NAME = N'pacman_settlement', FILENAME = N'D:\data\pacman_settlement.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [STATEMENTIDR] 
( NAME = N'pacman_statement_idr', FILENAME = N'D:\data\pacman_statement_idr.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [STATEMENTJPY] 
( NAME = N'pacman_statement_jpy', FILENAME = N'D:\data\pacman_statement_jpy.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [STATEMENTKRW] 
( NAME = N'pacman_statement_krw', FILENAME = N'D:\data\pacman_statement_krw.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [STATEMENTMYR] 
( NAME = N'pacman_statement_myr', FILENAME = N'D:\data\pacman_statement_myr.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [STATEMENTSGD] 
( NAME = N'pacman_statement_sgd', FILENAME = N'D:\data\pacman_statement_sgd.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [STATEMENTTHB] 
( NAME = N'pacman_statement_thb', FILENAME = N'D:\data\pacman_statement_thb.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [STATEMENTVND] 
( NAME = N'pacman_statement_vnd', FILENAME = N'D:\data\pacman_statement_vnd.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [TRANSACTION] 
( NAME = N'pacman_transaction', FILENAME = N'D:\data\pacman_transaction.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB ), 
 FILEGROUP [TRANSLOG] 
( NAME = N'pacman_transaction_log', FILENAME = N'D:\data\pacman_transaction_log.ndf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'PacmanMainDB_log', FILENAME = N'D:\data\PacmanMainDB_log.ldf' , SIZE = 73728KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
GO
ALTER DATABASE [PacmanMainDB] SET COMPATIBILITY_LEVEL = 130
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [PacmanMainDB].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [PacmanMainDB] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [PacmanMainDB] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [PacmanMainDB] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [PacmanMainDB] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [PacmanMainDB] SET ARITHABORT OFF 
GO
ALTER DATABASE [PacmanMainDB] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [PacmanMainDB] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [PacmanMainDB] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [PacmanMainDB] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [PacmanMainDB] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [PacmanMainDB] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [PacmanMainDB] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [PacmanMainDB] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [PacmanMainDB] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [PacmanMainDB] SET  DISABLE_BROKER 
GO
ALTER DATABASE [PacmanMainDB] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [PacmanMainDB] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [PacmanMainDB] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [PacmanMainDB] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [PacmanMainDB] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [PacmanMainDB] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [PacmanMainDB] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [PacmanMainDB] SET RECOVERY FULL 
GO
ALTER DATABASE [PacmanMainDB] SET  MULTI_USER 
GO
ALTER DATABASE [PacmanMainDB] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [PacmanMainDB] SET DB_CHAINING OFF 
GO
ALTER DATABASE [PacmanMainDB] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [PacmanMainDB] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [PacmanMainDB] SET DELAYED_DURABILITY = DISABLED 
GO
EXEC sys.sp_db_vardecimal_storage_format N'PacmanMainDB', N'ON'
GO
ALTER DATABASE [PacmanMainDB] SET QUERY_STORE = OFF
GO
USE [PacmanMainDB]
GO
ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
GO
ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
GO
USE [PacmanMainDB]
GO
/****** Object:  User [user.66]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [user.66] FOR LOGIN [user.66] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [user.39]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [user.39] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [user.38]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [user.38] FOR LOGIN [user.38] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [user.35]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [user.35] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [user.15]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [user.15] FOR LOGIN [user.15] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [user.14]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [user.14] FOR LOGIN [user.14] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [rudy]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [rudy] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [renaldy]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [renaldy] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [pacman.membersite.api]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [pacman.membersite.api] FOR LOGIN [pacman.membersite.api] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [pacman.api]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [pacman.api] FOR LOGIN [pacman.api] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [nining]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [nining] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [lauren]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [lauren] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [hartono]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [hartono] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [gunawan]    Script Date: 3/9/2023 1:33:08 PM ******/
CREATE USER [gunawan] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_owner] ADD MEMBER [user.66]
GO
ALTER ROLE [db_owner] ADD MEMBER [user.39]
GO
ALTER ROLE [db_owner] ADD MEMBER [user.38]
GO
ALTER ROLE [db_owner] ADD MEMBER [user.15]
GO
ALTER ROLE [db_owner] ADD MEMBER [user.14]
GO
ALTER ROLE [db_owner] ADD MEMBER [rudy]
GO
ALTER ROLE [db_owner] ADD MEMBER [renaldy]
GO
ALTER ROLE [db_owner] ADD MEMBER [nining]
GO
ALTER ROLE [db_owner] ADD MEMBER [lauren]
GO
ALTER ROLE [db_owner] ADD MEMBER [hartono]
GO
ALTER ROLE [db_owner] ADD MEMBER [gunawan]
GO
/****** Object:  UserDefinedFunction [dbo].[fnCheckDateInterval]    Script Date: 3/9/2023 1:33:11 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   FUNCTION [dbo].[fnCheckDateInterval]
(
	@date datetime
)
RETURNS varchar(1)
AS
BEGIN
	DECLARE @retVal varchar(1), @result int

	SELECT @retVal = 'N', @result = DATEDIFF(MINUTE, dbo.fnGetDateGMT7(), @date)

	IF @result >= -5 AND @result <= 0
		SELECT @retVal = 'Y'
	
	RETURN @retVal
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnCheckLanguageSupported]    Script Date: 3/9/2023 1:33:11 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   FUNCTION [dbo].[fnCheckLanguageSupported] 
(
	@lang varchar(5)
)
RETURNS varchar(1)
AS
BEGIN
	DECLARE @retVal varchar(1)

	SELECT @retVal = 'N'

	SELECT @retVal = status_active
	FROM dbo.master_language WITH(NOLOCK)
	WHERE language_code = @lang

	RETURN @retVal
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnCheckPaymentChannelSupported]    Script Date: 3/9/2023 1:33:11 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   FUNCTION [dbo].[fnCheckPaymentChannelSupported] 
(
	@channel_id varchar(20)
)
RETURNS varchar(1)
AS
BEGIN
	DECLARE @retVal varchar(1)

	SELECT @retVal = 'N'

	SELECT @retVal = status_active
	FROM dbo.master_payment_channel WITH(NOLOCK)
	WHERE channel_id = @channel_id

	RETURN @retVal
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnGetDateGMT7]    Script Date: 3/9/2023 1:33:11 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   FUNCTION [dbo].[fnGetDateGMT7]
()
RETURNS datetime
AS
BEGIN
	RETURN DATEADD(HOUR, 7, GETUTCDATE())
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnGetPaymentGatewayMerchantFundIn]    Script Date: 3/9/2023 1:33:11 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   FUNCTION [dbo].[fnGetPaymentGatewayMerchantFundIn]
(
	@pg_pool_id varchar(50),
	@payment_channel_id varchar(20),
	@bank_code varchar(10),
	@amount decimal(18,4)
)
RETURNS 
@tblpg TABLE 
(
	pg_id varchar(50), 
	pg_name nvarchar(200),
	pg_merchant_id varchar(50),
	pg_status varchar(1),
	pg_payment_channel_id varchar(20),
	pg_payment_channel_id_vendor varchar(20),
	pg_pool_weight decimal(18,4),
	pg_pool_score_current decimal(18,4),
	pg_error_message varchar(500)
)
AS
BEGIN
	DECLARE @table_pg TABLE(pg_id varchar(50), pg_name nvarchar(200), pg_currency varchar(10)
		, pg_merchant_id varchar(50), pg_status varchar(1)
		, pg_payment_channel_id varchar(20), pg_payment_channel_id_vendor varchar(20)
		, pg_pool_weight decimal(18,4), pg_pool_score_current decimal(18,4), pg_pool_score decimal(18,4)
		, fundin_min decimal(18,4), fundin_max decimal(18,4), fundin_day decimal(18,4));
	DECLARE @date_int int, @pg_error_message varchar(500)
	------------------------------------------------------------------------------------
	SELECT @date_int = FORMAT(dbo.fnGetDateGMT7(), 'yyyyMMdd'), @pg_error_message = ''
	------------------------------------------------------------------------------------
	-- 1) Get List PG_ID by PG_POOL_ID
	------------------------------------------------------------------------------------
	INSERT INTO @table_pg(pg_id, pg_merchant_id, pg_name, pg_currency, pg_status
		, pg_payment_channel_id, pg_payment_channel_id_vendor
		, pg_pool_weight, pg_pool_score_current, pg_pool_score
		, fundin_min, fundin_max, fundin_day)
	SELECT pg_id, pg_merchant_id, pg_name, pg_merchant_currency, 'N'
		, pg_merchant_payment_channel, pg_merchant_payment_channel_vendor
		, pg_pool_weight, ((100 - pg_pool_weight) * @amount), 0
		, fundin_min, fundin_max, fundin_total_day
	FROM dbo.payment_gateway_merchant_list WITH(NOLOCK)
	WHERE pg_pool_id = @pg_pool_id AND pg_merchant_status = 'Y'
	ORDER BY pg_pool_weight DESC
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available with status Y'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	------------------------------------------------------------------------------------
	DELETE FROM @table_pg WHERE fundin_min > @amount
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available. Below min amount'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	------------------------------------------------------------------------------------
	DELETE FROM @table_pg WHERE fundin_max < @amount
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available. Above max amount'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	------------------------------------------------------------------------------------
	-- 2) Remove All _PG_ID_ not support with current _PAYMENT_CHANNEL_ID_
	------------------------------------------------------------------------------------
	DELETE FROM @table_pg WHERE pg_payment_channel_id != @payment_channel_id
	DELETE FROM @table_pg WHERE pg_payment_channel_id_vendor IN ('Payout')
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available. Payment Channel id Not Found'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	------------------------------------------------------------------------------------
	UPDATE @table_pg SET pg_status = 'N'
	------------------------------------------------------------------------------------
	-- 3) Check status_active for each _PG_ID_
	------------------------------------------------------------------------------------
	UPDATE p
	SET p.pg_status = g.status_active
	FROM @table_pg p INNER JOIN dbo.master_payment_gateway g WITH(NOLOCK)
		ON p.pg_id = g.pg_id AND p.pg_currency = g.currency
	------------------------------------------------------------------------------------
	-- 4) Remove All _PG_ID_ with status_active = 'N'
	------------------------------------------------------------------------------------
	DELETE FROM @table_pg WHERE pg_status = 'N'
	UPDATE @table_pg SET pg_status = 'N'
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available. Master payment gateway Not Found'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	------------------------------------------------------------------------------------
	-- 5) Check status_active for each _PG_ID _for each Mode FUND_IN
	------------------------------------------------------------------------------------
	UPDATE p
	SET p.pg_status = g.status_active
	FROM @table_pg p INNER JOIN dbo.master_payment_gateway_fundin g WITH(NOLOCK)
		ON p.pg_id = g.pg_id AND p.pg_currency = g.currency
	------------------------------------------------------------------------------------
	-- 6) Remove All _PG_ID_ with status_active = 'N'
	------------------------------------------------------------------------------------
	DELETE FROM @table_pg WHERE pg_status = 'N'
	UPDATE @table_pg SET pg_status = 'N'
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available. Master payment gateway fund in Not Found'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	------------------------------------------------------------------------------------
	-- 7) Check status_active for each _PG_ID_ for current _BANK_CODE_
	------------------------------------------------------------------------------------
	UPDATE p
	SET p.pg_status = g.status_active
	FROM @table_pg p INNER JOIN dbo.master_payment_gateway_fundin_bank g WITH(NOLOCK)
		ON p.pg_id = g.pg_id AND p.pg_currency = g.currency AND p.pg_payment_channel_id = g.payment_channel_id
		AND p.pg_payment_channel_id_vendor = g.payment_channel_id_vendor
	WHERE g.bank_code = @bank_code
	------------------------------------------------------------------------------------
	-- 8) Remove All _PG_ID_ with status_active = 'N'
	--------------------------------------------------------------------------------------
	DELETE FROM @table_pg WHERE pg_status = 'N'
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available. Master payment gateway fund in bank Not Found'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	----------------------------------------------------------------------------------
	-- 9) Calculate _PG_POOL_SCORE_ current date
	--    pg_pool_weight value between 0 - 100
	--    pg_pool_weight calc must use this (100 - pg_pool_weight)
	----------------------------------------------------------------------------------
	UPDATE p
	SET p.pg_pool_score = p.pg_pool_score + g.pg_pool_score
	FROM @table_pg p INNER JOIN dbo.payment_gateway_pool_fundin_statistic g WITH(NOLOCK)
		ON p.pg_id = g.pg_id
	WHERE g.date_int = @date_int
	------------------------------------------------------------------------------------
	-- 10) Return 1 _PG_ID_ with the highest pool score
	------------------------------------------------------------------------------------
	INSERT INTO @tblpg(pg_id, pg_merchant_id, pg_name, pg_status
		, pg_payment_channel_id, pg_payment_channel_id_vendor
		, pg_pool_weight, pg_pool_score_current, pg_error_message)
	SELECT TOP 1 pg_id, pg_merchant_id, pg_name, pg_status
		, pg_payment_channel_id, pg_payment_channel_id_vendor
		, pg_pool_weight, pg_pool_score_current, @pg_error_message
	FROM @table_pg
	ORDER BY pg_pool_score_current 

	RETURN
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnGetPaymentGatewayMerchantFundOut]    Script Date: 3/9/2023 1:33:11 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   FUNCTION [dbo].[fnGetPaymentGatewayMerchantFundOut]
(
	@pg_pool_id varchar(50),
	@payment_channel_id varchar(20),
	@bank_code varchar(10),
	@amount decimal(18,4)
)
RETURNS 
@tblpg TABLE 
(
	pg_id varchar(50) PRIMARY KEY, 
	pg_name nvarchar(200),
	pg_merchant_id varchar(50),
	pg_status varchar(1),
	pg_payment_channel_id varchar(20),
	pg_payment_channel_id_vendor varchar(20),
	pg_pool_weight decimal(18,4),
	pg_pool_score_current decimal(18,4),
	pg_error_message varchar(500)
)
AS
BEGIN
	DECLARE @table_pg TABLE(pg_id varchar(50), pg_name nvarchar(200), pg_currency varchar(10)
		, pg_merchant_id varchar(50), pg_status varchar(1)
		, pg_payment_channel_id varchar(20), pg_payment_channel_id_vendor varchar(20)
		, pg_pool_weight decimal(18,4), pg_pool_score_current decimal(18,4), pg_pool_score decimal(18,4)
		, fundout_min decimal(18,4), fundout_max decimal(18,4), fundout_day decimal(18,4));
	DECLARE @date_int int, @pg_error_message varchar(500)
	------------------------------------------------------------------------------------
	SELECT @date_int = FORMAT(dbo.fnGetDateGMT7(), 'yyyyMMdd'), @pg_error_message = ''
	------------------------------------------------------------------------------------
	-- 1) Get List PG_ID by PG_POOL_ID
	------------------------------------------------------------------------------------
	INSERT INTO @table_pg(pg_id, pg_merchant_id, pg_name, pg_currency, pg_status
		, pg_payment_channel_id, pg_payment_channel_id_vendor
		, pg_pool_weight, pg_pool_score_current, pg_pool_score
		, fundout_min, fundout_max, fundout_day)
	SELECT pg_id, pg_merchant_id, pg_name, pg_merchant_currency, 'N'
		, pg_merchant_payment_channel, pg_merchant_payment_channel_vendor
		, pg_pool_weight, ((100 - pg_pool_weight) * @amount), 0
		, fundout_min, fundout_max, fundout_total_day
	FROM dbo.payment_gateway_merchant_list WITH(NOLOCK)
	WHERE pg_pool_id = @pg_pool_id AND pg_merchant_status = 'Y'
	ORDER BY pg_pool_weight DESC
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available with status Y'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	------------------------------------------------------------------------------------
	DELETE FROM @table_pg WHERE fundout_min > @amount
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available. Below min amount'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	------------------------------------------------------------------------------------
	DELETE FROM @table_pg WHERE fundout_max < @amount
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available. Above max amount'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	------------------------------------------------------------------------------------
	-- 2) Remove All _PG_ID_ not support with current _PAYMENT_CHANNEL_ID_
	------------------------------------------------------------------------------------
	DELETE FROM @table_pg WHERE pg_payment_channel_id != @payment_channel_id
	DELETE FROM @table_pg WHERE pg_payment_channel_id_vendor NOT IN ('','Payout')
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available. Payment Channel id Not Found'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	------------------------------------------------------------------------------------
	UPDATE @table_pg SET pg_status = 'N'
	------------------------------------------------------------------------------------
	-- 3) Check status_active for each _PG_ID_
	------------------------------------------------------------------------------------
	UPDATE p
	SET p.pg_status = g.status_active
	FROM @table_pg p INNER JOIN dbo.master_payment_gateway g WITH(NOLOCK)
		ON p.pg_id = g.pg_id AND p.pg_currency = g.currency
	--------------------------------------------------------------------------------------
	-- 4) Remove All _PG_ID_ with status_active = 'N'
	------------------------------------------------------------------------------------
	DELETE FROM @table_pg WHERE pg_status = 'N'
	UPDATE @table_pg SET pg_status = 'N'
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available. Master payment gateway Not Found'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	------------------------------------------------------------------------------------
	-- 5) Check status_active for each _PG_ID _for each Mode FUND_IN
	------------------------------------------------------------------------------------
	UPDATE p
	SET p.pg_status = g.status_active
	FROM @table_pg p INNER JOIN dbo.master_payment_gateway_fundout g WITH(NOLOCK)
		ON p.pg_id = g.pg_id AND p.pg_currency = g.currency
	--------------------------------------------------------------------------------------
	-- 6) Remove All _PG_ID_ with status_active = 'N'
	------------------------------------------------------------------------------------
	DELETE FROM @table_pg WHERE pg_status = 'N'
	UPDATE @table_pg SET pg_status = 'N'
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available. Master payment gateway fund out Not Found'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	------------------------------------------------------------------------------------
	-- 7) Check status_active for each _PG_ID_ for current _BANK_CODE_
	------------------------------------------------------------------------------------
	UPDATE p
	SET p.pg_status = g.status_active
	FROM @table_pg p INNER JOIN dbo.master_payment_gateway_fundout_bank g WITH(NOLOCK)
		ON p.pg_id = g.pg_id AND p.pg_currency = g.currency AND p.pg_payment_channel_id = g.payment_channel_id
	WHERE g.bank_code = @bank_code
	------------------------------------------------------------------------------------
	-- 8) Remove All _PG_ID_ with status_active = 'N'
	------------------------------------------------------------------------------------
	DELETE FROM @table_pg WHERE pg_status = 'N'
	------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM @table_pg) = 0
	BEGIN
		SELECT @pg_error_message = 'No PG Merchant available. Master payment gateway fund out bank Not Found'

		INSERT INTO @tblpg(pg_error_message)VALUES(@pg_error_message)
		RETURN
	END
	----------------------------------------------------------------------------------
	-- 9) Calculate _PG_POOL_SCORE_ current date
	--    pg_pool_weight value between 0 - 100
	--    pg_pool_weight calc must use this (100 - pg_pool_weight)
	------------------------------------------------------------------------------------
	UPDATE p
	SET p.pg_pool_score = p.pg_pool_score + g.pg_pool_score
	FROM @table_pg p INNER JOIN dbo.payment_gateway_pool_fundout_statistic g WITH(NOLOCK)
		ON p.pg_id = g.pg_id
	WHERE g.date_int = @date_int
	------------------------------------------------------------------------------------
	-- 10) Return 1 _PG_ID_ with the highest pool score
	------------------------------------------------------------------------------------
	INSERT INTO @tblpg(pg_id, pg_merchant_id, pg_name, pg_status
		, pg_payment_channel_id, pg_payment_channel_id_vendor
		, pg_pool_weight, pg_pool_score_current, pg_error_message)
	SELECT TOP 1 pg_id, pg_merchant_id, pg_name, pg_status
		, pg_payment_channel_id, pg_payment_channel_id_vendor
		, pg_pool_weight, pg_pool_score_current, @pg_error_message
	FROM @table_pg
	ORDER BY pg_pool_score_current

	RETURN
END
GO
/****** Object:  UserDefinedFunction [dbo].[fnUserMerchant]    Script Date: 3/9/2023 1:33:11 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   FUNCTION [dbo].[fnUserMerchant]
(
	@stamp_user varchar(20),
	@company_id varchar(3) = '', 
	@operator_id varchar(2) = '', 
	@merchant_group_id varchar(20) = '', 
	@currency varchar(10) = '',
	@payment_channel_id varchar(20) = '',
	@merchant_code varchar(20) = ''
)
RETURNS @tbl TABLE (
	merchant_code varchar(20), 
	currency varchar(10), 
	payment_channel_id varchar(20), 
	merchant_id varchar(10)
)
AS
BEGIN
/*

	SELECT merchant_code, currency, payment_channel_id, merchant_id FROM dbo.fnUserMerchant('developer13', '', '', '', '', '', '')
	
*/
	DECLARE @level_id varchar(1), @company_id_user varchar(3), @operator_id_user varchar(2), @merchant_group_id_user varchar(20), @status_manager varchar(1), @status_supervisor varchar(1)

	SELECT	@company_id = CASE WHEN @company_id = '' THEN '%' ELSE @company_id END, 
			@operator_id = CASE WHEN @operator_id = '' THEN '%' ELSE @operator_id END, 
			@merchant_group_id = CASE WHEN @merchant_group_id = '' THEN '%' ELSE @merchant_group_id END, 
			@currency = CASE WHEN @currency = '' THEN '%' ELSE @currency END, 
			@payment_channel_id = CASE WHEN @payment_channel_id = '' THEN '%' ELSE @payment_channel_id END, 
			@merchant_code = CASE WHEN @merchant_code = '' THEN '%' ELSE @merchant_code END

	SELECT	@level_id = level_id, 
			@company_id_user = company_id, 
			@operator_id_user = operator_id, 
			@merchant_group_id_user = merchant_group_id, 
			@status_manager = status_manager, 
			@status_supervisor = status_supervisor
	FROM dbo.master_user WITH (NOLOCK) 
	WHERE user_login = @stamp_user


	IF @level_id = 'D' --Developer
	BEGIN
		INSERT INTO @tbl(merchant_code, currency, payment_channel_id, merchant_id)
		SELECT merchant_code, currency, payment_channel_id, merchant_id
		FROM dbo.merchant_list WITH (NOLOCK) 
		WHERE company_id LIKE @company_id
		AND operator_id LIKE @operator_id
		AND merchant_group_id LIKE @merchant_group_id
		AND currency LIKE @currency
		AND payment_channel_id LIKE @payment_channel_id
		AND merchant_code LIKE @merchant_code
	END
	ELSE IF @level_id = 'C' AND (@status_manager = 'Y' OR @status_supervisor = 'Y') --Company 
	BEGIN
		INSERT INTO @tbl(merchant_code, currency, payment_channel_id, merchant_id)
		SELECT merchant_code, currency, payment_channel_id, merchant_id
		FROM dbo.merchant_list WITH (NOLOCK) 
		WHERE company_id = @company_id_user
		AND operator_id LIKE @operator_id
		AND merchant_group_id LIKE @merchant_group_id
		AND currency LIKE @currency
		AND payment_channel_id LIKE @payment_channel_id
		AND merchant_code LIKE @merchant_code
	END
	ELSE IF @level_id = 'O' AND (@status_manager = 'Y' OR @status_supervisor = 'Y') --Operator
	BEGIN
		INSERT INTO @tbl(merchant_code, currency, payment_channel_id, merchant_id)
		SELECT merchant_code, currency, payment_channel_id, merchant_id
		FROM dbo.merchant_list WITH (NOLOCK) 
		WHERE company_id = @company_id_user
		AND operator_id = @operator_id_user
		AND merchant_group_id LIKE @merchant_group_id
		AND currency LIKE @currency
		AND payment_channel_id LIKE @payment_channel_id
		AND merchant_code LIKE @merchant_code
	END
	ELSE IF @level_id = 'M' AND (@status_manager = 'Y' OR @status_supervisor = 'Y') --Merchant
	BEGIN
		INSERT INTO @tbl(merchant_code, currency, payment_channel_id, merchant_id)
		SELECT merchant_code, currency, payment_channel_id, merchant_id
		FROM dbo.merchant_list WITH (NOLOCK) 
		WHERE company_id = @company_id_user
		AND operator_id = @operator_id_user
		AND merchant_group_id = @merchant_group_id_user
		AND currency LIKE @currency
		AND payment_channel_id LIKE @payment_channel_id
		AND merchant_code LIKE @merchant_code
	END
	ELSE
	BEGIN
		INSERT INTO @tbl(merchant_code, currency, payment_channel_id, merchant_id)
		SELECT mn.merchant_code, mn.currency, mn.payment_channel_id, mn.merchant_id
		FROM dbo.user_merchant_group_user us WITH (NOLOCK) 
		INNER JOIN dbo.user_merchant_group_merchant mn WITH (NOLOCK) ON us.user_merchant_group_id = mn.user_merchant_group_id
		WHERE us.user_Login = @stamp_user
		AND mn.company_id = @company_id_user
		AND mn.operator_id = @operator_id_user
		AND mn.merchant_group_id = @merchant_group_id_user
		AND mn.currency LIKE @currency
		AND mn.payment_channel_id LIKE @payment_channel_id
		AND mn.merchant_code LIKE @merchant_code
		GROUP BY merchant_code, currency, payment_channel_id, merchant_id
	END

	RETURN;
END
GO
/****** Object:  Table [dbo].[master_api_map]    Script Date: 3/9/2023 1:33:11 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_api_map](
	[currency] [varchar](10) NOT NULL,
	[api_method] [varchar](10) NOT NULL,
	[api_seq] [int] NOT NULL,
	[status_active] [varchar](1) NULL,
	[api_url] [varchar](500) NOT NULL,
 CONSTRAINT [PK_master_api_map] PRIMARY KEY CLUSTERED 
(
	[currency] ASC,
	[api_method] ASC,
	[api_seq] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_authorization]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_authorization](
	[authorization_id] [varchar](10) NOT NULL,
	[authorization_name] [varchar](50) NOT NULL,
	[menu_id] [varchar](10) NOT NULL,
	[show_prod] [varchar](1) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_master_authorization] PRIMARY KEY CLUSTERED 
(
	[authorization_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_bank]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_bank](
	[bank_code] [varchar](10) NOT NULL,
	[bank_name] [nvarchar](50) NOT NULL,
	[bank_display_name] [nvarchar](50) NULL,
	[currency] [varchar](10) NULL,
	[status_active] [varchar](1) NOT NULL,
	[date_created] [datetime] NULL,
	[date_updated] [datetime] NULL,
	[legend_color] [varchar](10) NULL,
 CONSTRAINT [PK_master_bank] PRIMARY KEY CLUSTERED 
(
	[bank_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_bank_currency]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_bank_currency](
	[bank_code] [varchar](10) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[date_created] [datetime] NULL,
	[date_updated] [datetime] NULL,
 CONSTRAINT [PK_master_bank_currency] PRIMARY KEY CLUSTERED 
(
	[bank_code] ASC,
	[currency] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_company]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_company](
	[company_id] [varchar](3) NOT NULL,
	[company_name] [nvarchar](50) NOT NULL,
	[company_status] [varchar](1) NULL,
	[date_created] [datetime] NULL,
	[date_updated] [datetime] NULL,
	[status_active] [varchar](1) NOT NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_master_company] PRIMARY KEY CLUSTERED 
(
	[company_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_currency]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_currency](
	[currency] [varchar](10) NOT NULL,
	[currency_name] [varchar](50) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[date_created] [datetime] NOT NULL,
	[date_updated] [datetime] NULL,
 CONSTRAINT [PK_master_currency] PRIMARY KEY CLUSTERED 
(
	[currency] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_generator_id]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_generator_id](
	[generator_id] [varchar](20) NOT NULL,
	[currency] [varchar](3) NOT NULL,
	[generator_code] [varchar](10) NOT NULL,
	[generator_no] [bigint] NOT NULL,
 CONSTRAINT [PK_master_generator_id] PRIMARY KEY CLUSTERED 
(
	[generator_id] ASC,
	[currency] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_language]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_language](
	[language_code] [varchar](5) NOT NULL,
	[language_name] [varchar](50) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[date_created] [datetime] NOT NULL,
	[date_updated] [datetime] NULL,
 CONSTRAINT [PK_master_language] PRIMARY KEY CLUSTERED 
(
	[language_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_menu]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_menu](
	[menu_id] [varchar](10) NOT NULL,
	[menu_name] [varchar](50) NOT NULL,
	[page_source] [nvarchar](100) NOT NULL,
	[menu_name_id] [nvarchar](50) NULL,
	[menu_name_en] [nvarchar](50) NULL,
	[menu_name_th] [nvarchar](50) NULL,
	[menu_name_ch] [nvarchar](50) NULL,
	[menu_name_tw] [nvarchar](50) NULL,
	[menu_name_vn] [nvarchar](50) NULL,
	[menu_name_km] [nvarchar](50) NULL,
	[menu_order] [int] NULL,
	[show_prod] [varchar](1) NULL,
	[status_active] [varchar](1) NOT NULL,
	[create_date] [datetime] NOT NULL,
	[section_id] [varchar](10) NULL,
	[menu_note] [varchar](200) NULL,
	[module_list] [varchar](500) NULL,
 CONSTRAINT [PK_master_menu] PRIMARY KEY CLUSTERED 
(
	[menu_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_merchant_group]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_merchant_group](
	[merchant_group_code] [varchar](25) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[company_name] [nvarchar](50) NOT NULL,
	[operator_id] [nvarchar](50) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_group_name] [nvarchar](50) NOT NULL,
	[module_id] [varchar](10) NULL,
	[status_active] [varchar](1) NOT NULL,
	[date_created] [datetime] NULL,
	[date_updated] [datetime] NULL,
 CONSTRAINT [PK_master_merchant_group] PRIMARY KEY CLUSTERED 
(
	[company_id] ASC,
	[operator_id] ASC,
	[merchant_group_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_module]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_module](
	[module_id] [varchar](10) NOT NULL,
	[module_name] [varchar](50) NOT NULL,
	[status_active] [varchar](1) NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_master_module] PRIMARY KEY CLUSTERED 
(
	[module_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_module_authorization]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_module_authorization](
	[module_authorization_id] [int] IDENTITY(1,1) NOT NULL,
	[module_id] [varchar](10) NOT NULL,
	[menu_id] [varchar](10) NOT NULL,
	[authorization_id] [varchar](10) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_master_module_authorization] PRIMARY KEY CLUSTERED 
(
	[module_authorization_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_module_menu]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_module_menu](
	[module_menu_id] [int] IDENTITY(1,1) NOT NULL,
	[module_id] [varchar](10) NOT NULL,
	[menu_id] [varchar](10) NOT NULL,
	[menu_order] [int] NOT NULL,
	[section_id] [varchar](10) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_master_module_menu] PRIMARY KEY CLUSTERED 
(
	[module_menu_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_module_section]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_module_section](
	[module_section_id] [int] IDENTITY(1,1) NOT NULL,
	[module_id] [varchar](10) NOT NULL,
	[section_id] [varchar](10) NOT NULL,
	[section_name] [varchar](50) NOT NULL,
	[section_order] [int] NOT NULL,
	[create_date] [datetime] NOT NULL,
	[section_icon] [varchar](50) NULL,
	[status_active] [varchar](1) NOT NULL,
 CONSTRAINT [PK_master_module_section] PRIMARY KEY CLUSTERED 
(
	[module_section_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_operator]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_operator](
	[company_id] [varchar](3) NOT NULL,
	[company_name] [nvarchar](50) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[operator_name] [nvarchar](50) NOT NULL,
	[date_created] [datetime] NULL,
	[date_updated] [datetime] NULL,
	[google_auth_status] [varchar](1) NOT NULL,
	[module_id] [varchar](10) NULL,
	[status_active] [varchar](1) NOT NULL,
	[company_operator_id] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_master_operator] PRIMARY KEY CLUSTERED 
(
	[company_id] ASC,
	[operator_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_parameter]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_parameter](
	[parameter_key] [varchar](20) NOT NULL,
	[parameter_value] [varchar](100) NOT NULL,
	[parameter_desc] [varchar](1000) NOT NULL,
 CONSTRAINT [PK_master_parameter] PRIMARY KEY CLUSTERED 
(
	[parameter_key] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_payment_gateway]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_payment_gateway](
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[status_active] [varchar](1) NULL,
	[date_created] [datetime] NULL,
	[date_updated] [datetime] NULL,
 CONSTRAINT [PK_master_payment_gateway] PRIMARY KEY CLUSTERED 
(
	[pg_id] ASC,
	[pg_name] ASC,
	[currency] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_payment_gateway_fundin]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_payment_gateway_fundin](
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[date_created] [datetime] NOT NULL,
	[date_updated] [datetime] NULL,
 CONSTRAINT [PK_master_payment_gateway_fundin] PRIMARY KEY CLUSTERED 
(
	[pg_id] ASC,
	[currency] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_payment_gateway_fundin_bank]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_payment_gateway_fundin_bank](
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[date_created] [datetime] NOT NULL,
	[date_updated] [datetime] NULL,
	[bank_min] [decimal](18, 4) NULL,
	[bank_max] [decimal](18, 4) NULL,
 CONSTRAINT [PK_master_payment_gateway_fundin_bank] PRIMARY KEY CLUSTERED 
(
	[pg_id] ASC,
	[currency] ASC,
	[payment_channel_id] ASC,
	[payment_channel_id_vendor] ASC,
	[bank_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_payment_gateway_fundout]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_payment_gateway_fundout](
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[date_created] [datetime] NOT NULL,
	[date_updated] [datetime] NULL,
 CONSTRAINT [PK_master_payment_gateway_fundout] PRIMARY KEY CLUSTERED 
(
	[pg_id] ASC,
	[currency] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_payment_gateway_fundout_bank]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_payment_gateway_fundout_bank](
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[date_created] [datetime] NOT NULL,
	[date_updated] [datetime] NULL,
	[bank_min] [decimal](18, 4) NULL,
	[bank_max] [decimal](18, 4) NULL,
 CONSTRAINT [PK_master_payment_gateway_fundout_bank] PRIMARY KEY CLUSTERED 
(
	[pg_id] ASC,
	[currency] ASC,
	[payment_channel_id] ASC,
	[bank_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_payment_gateway_language]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_payment_gateway_language](
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[language_code] [varchar](5) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[date_created] [datetime] NOT NULL,
	[date_updated] [datetime] NULL,
 CONSTRAINT [PK_master_payment_gateway_language] PRIMARY KEY CLUSTERED 
(
	[pg_id] ASC,
	[language_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_payment_gateway_pool]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_payment_gateway_pool](
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_name] [varchar](200) NOT NULL,
	[pg_pool_status] [varchar](1) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
 CONSTRAINT [PK_master_payment_gateway_pool] PRIMARY KEY CLUSTERED 
(
	[pg_pool_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_section]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_section](
	[section_id] [varchar](10) NOT NULL,
	[section_name] [varchar](50) NOT NULL,
	[section_icon] [varchar](50) NOT NULL,
	[create_date] [datetime] NULL,
 CONSTRAINT [PK_master_section] PRIMARY KEY CLUSTERED 
(
	[section_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_user]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_user](
	[user_id] [int] IDENTITY(1,1) NOT NULL,
	[user_guid] [varchar](20) NOT NULL,
	[level_id] [varchar](1) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_group_name] [nvarchar](50) NOT NULL,
	[merchant_group_code] [varchar](25) NOT NULL,
	[user_login] [varchar](20) NOT NULL,
	[password] [varchar](255) NOT NULL,
	[user_name] [nvarchar](100) NOT NULL,
	[email] [varchar](100) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[status_suspend] [varchar](1) NOT NULL,
	[status_manager] [varchar](1) NOT NULL,
	[status_supervisor] [varchar](1) NOT NULL,
	[status_hidden] [varchar](1) NOT NULL,
	[login_fail] [int] NOT NULL,
	[login_retry_date] [datetime] NOT NULL,
	[status_first_login] [varchar](1) NOT NULL,
	[last_login] [datetime] NULL,
	[first_set_authenticator] [varchar](1) NOT NULL,
	[status_authenticator] [varchar](1) NOT NULL,
	[key_authenticator] [varchar](64) NOT NULL,
	[finger_print] [varchar](500) NOT NULL,
	[canvas_id] [varchar](500) NOT NULL,
	[create_date] [datetime] NOT NULL,
	[last_update] [datetime] NULL,
 CONSTRAINT [PK_master_user] PRIMARY KEY CLUSTERED 
(
	[user_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[master_web_page]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[master_web_page](
	[web_id] [varchar](10) NOT NULL,
	[web_name] [varchar](50) NOT NULL,
	[web_url] [varchar](500) NOT NULL,
 CONSTRAINT [PK_master_web_page] PRIMARY KEY CLUSTERED 
(
	[web_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[merchant_adjustment_list]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_adjustment_list](
	[row_no] [bigint] IDENTITY(1,1) NOT NULL,
	[adjustment_id] [varchar](50) NOT NULL,
	[adjustment_date] [datetime] NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[adjustment_type] [varchar](20) NOT NULL,
	[adjustment_action] [varchar](20) NOT NULL,
	[adjustment_amount] [decimal](18, 4) NOT NULL,
	[adjustment_debit] [decimal](18, 4) NOT NULL,
	[adjustment_credit] [decimal](18, 4) NOT NULL,
	[process_date] [datetime] NULL,
	[process_status] [varchar](20) NOT NULL,
	[adjustment_note] [nvarchar](500) NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_merchant_adjustment_list] PRIMARY KEY CLUSTERED 
(
	[row_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [SETTLEMENT]
) ON [SETTLEMENT]
GO
/****** Object:  Table [dbo].[merchant_balance]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_balance](
	[merchant_id] [varchar](10) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_balance] [decimal](18, 4) NOT NULL,
	[merchant_balance_fundin] [decimal](18, 4) NOT NULL,
	[merchant_balance_fundout] [decimal](18, 4) NOT NULL,
	[merchant_outstanding_fundin] [decimal](18, 4) NOT NULL,
	[merchant_outstanding_fundout] [decimal](18, 4) NOT NULL,
	[merchant_total_fundin] [decimal](25, 4) NOT NULL,
	[merchant_total_fundout] [decimal](25, 4) NOT NULL,
	[date_updated] [datetime] NULL,
	[merchant_statement_fundin] [decimal](18, 4) NOT NULL,
	[merchant_statement_fundout] [decimal](18, 4) NOT NULL,
 CONSTRAINT [PK_merchant_balance] PRIMARY KEY CLUSTERED 
(
	[merchant_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [TRANSACTION]
) ON [TRANSACTION]
GO
/****** Object:  Table [dbo].[merchant_fundin_failed_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_fundin_failed_log](
	[log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[merchant_id] [varchar](50) NULL,
	[merchant_pass_key] [varchar](50) NULL,
	[merchant_transaction_id] [varchar](50) NULL,
	[amount] [decimal](18, 4) NULL,
	[request_date] [datetime] NULL,
	[request_url] [varchar](2000) NULL,
	[return_url] [varchar](2000) NULL,
	[currency] [varchar](10) NULL,
	[merchant_language] [varchar](10) NULL,
	[bank_code] [varchar](10) NULL,
	[ip_address] [varchar](15) NULL,
	[merchant_signature] [varchar](500) NULL,
	[param_optional] [varchar](2000) NULL,
	[method] [varchar](50) NULL,
	[failed_reason] [varchar](500) NOT NULL,
 CONSTRAINT [PK_merchant_fundin_failed_log] PRIMARY KEY CLUSTERED 
(
	[log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANLOG]
) ON [PACMANLOG]
GO
/****** Object:  Table [dbo].[merchant_fundout_failed_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_fundout_failed_log](
	[log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[merchant_id] [varchar](50) NULL,
	[merchant_pass_key] [varchar](50) NULL,
	[merchant_transaction_id] [varchar](50) NULL,
	[amount] [decimal](18, 4) NULL,
	[request_date] [datetime] NULL,
	[request_url] [varchar](2000) NULL,
	[return_url] [varchar](2000) NULL,
	[currency] [varchar](10) NULL,
	[merchant_language] [varchar](10) NULL,
	[bank_code] [varchar](10) NULL,
	[ip_address] [varchar](15) NULL,
	[merchant_signature] [varchar](500) NULL,
	[param_optional] [varchar](2000) NULL,
	[bank_name] [varchar](50) NULL,
	[bank_account_no] [varchar](50) NULL,
	[bank_account_name] [nvarchar](100) NULL,
	[bank_branch] [varchar](50) NULL,
	[bank_city] [varchar](50) NULL,
	[bank_province] [varchar](50) NULL,
	[method] [varchar](50) NULL,
	[failed_reason] [varchar](500) NOT NULL,
 CONSTRAINT [PK_merchant_fundout_failed_log] PRIMARY KEY CLUSTERED 
(
	[log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANLOG]
) ON [PACMANLOG]
GO
/****** Object:  Table [dbo].[merchant_list]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_list](
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_id] [varchar](10) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[merchant_pass_key] [varchar](10) NOT NULL,
	[merchant_status] [varchar](1) NOT NULL,
	[date_created] [datetime] NOT NULL,
	[date_updated] [datetime] NULL,
	[settlement_password] [varchar](255) NULL,
 CONSTRAINT [PK_merchant_list] PRIMARY KEY CLUSTERED 
(
	[merchant_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[merchant_master]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_master](
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_merchant_master] PRIMARY KEY CLUSTERED 
(
	[merchant_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[merchant_master_balance]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_master_balance](
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_balance_fundin] [decimal](18, 4) NOT NULL,
	[merchant_balance_fundout] [decimal](18, 4) NOT NULL,
	[merchant_outstanding_fundin] [decimal](18, 4) NOT NULL,
	[merchant_outstanding_fundout] [decimal](18, 4) NOT NULL,
	[merchant_daily_fundin] [decimal](25, 4) NOT NULL,
	[merchant_daily_fundout] [decimal](25, 4) NOT NULL,
	[date_updated] [datetime] NULL,
 CONSTRAINT [PK_merchant_master_balance] PRIMARY KEY CLUSTERED 
(
	[merchant_code] ASC,
	[currency] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [TRANSACTION]
) ON [TRANSACTION]
GO
/****** Object:  Table [dbo].[merchant_master_currency]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_master_currency](
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[status_active] [varchar](1) NOT NULL,
	[settlement_min] [decimal](18, 4) NOT NULL,
	[settlement_max] [decimal](18, 4) NOT NULL,
	[settlement_fee_percent] [decimal](18, 4) NOT NULL,
	[settlement_fix_rate] [decimal](18, 4) NOT NULL,
	[topup_fee_percent] [decimal](18, 4) NOT NULL,
	[topup_fix_rate] [decimal](18, 4) NOT NULL,
	[settlement_password] [varchar](255) NOT NULL,
	[create_date] [datetime] NOT NULL,
	[last_update] [datetime] NULL,
 CONSTRAINT [PK_merchant_master_currency] PRIMARY KEY CLUSTERED 
(
	[merchant_code] ASC,
	[currency] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[merchant_request_fundin_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_request_fundin_log](
	[req_log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[merchant_id] [varchar](50) NULL,
	[merchant_pass_key] [varchar](50) NULL,
	[merchant_transaction_id] [varchar](50) NULL,
	[amount] [decimal](18, 4) NULL,
	[request_date] [datetime] NULL,
	[request_url] [varchar](2000) NULL,
	[return_url] [varchar](2000) NULL,
	[currency] [varchar](10) NULL,
	[merchant_language] [varchar](10) NULL,
	[bank_code] [varchar](10) NULL,
	[ip_address] [varchar](15) NULL,
	[merchant_signature] [varchar](500) NULL,
	[param_optional] [varchar](2000) NULL,
	[method] [varchar](50) NULL,
 CONSTRAINT [PK_merchant_request_log] PRIMARY KEY CLUSTERED 
(
	[req_log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANLOG]
) ON [PACMANLOG]
GO
/****** Object:  Table [dbo].[merchant_request_fundout_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_request_fundout_log](
	[req_log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[merchant_id] [varchar](50) NULL,
	[merchant_pass_key] [varchar](50) NULL,
	[merchant_transaction_id] [varchar](50) NULL,
	[amount] [decimal](18, 4) NULL,
	[request_date] [datetime] NULL,
	[request_url] [varchar](2000) NULL,
	[return_url] [varchar](2000) NULL,
	[currency] [varchar](10) NULL,
	[merchant_language] [varchar](10) NULL,
	[bank_code] [varchar](10) NULL,
	[ip_address] [varchar](15) NULL,
	[merchant_signature] [varchar](500) NULL,
	[param_optional] [varchar](2000) NULL,
	[bank_name] [varchar](50) NULL,
	[bank_account_no] [varchar](50) NULL,
	[bank_account_name] [nvarchar](100) NULL,
	[bank_branch] [varchar](50) NULL,
	[bank_city] [varchar](50) NULL,
	[bank_province] [varchar](50) NULL,
	[method] [varchar](50) NULL,
 CONSTRAINT [PK_merchant_request_fundout_log] PRIMARY KEY CLUSTERED 
(
	[req_log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANLOG]
) ON [PACMANLOG]
GO
/****** Object:  Table [dbo].[merchant_setting]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_setting](
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_id] [varchar](10) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[settlement_min] [decimal](18, 4) NOT NULL,
	[settlement_max] [decimal](18, 4) NOT NULL,
	[settlement_fee_percent] [decimal](18, 4) NOT NULL,
	[settlement_fix_rate] [decimal](18, 4) NOT NULL,
	[topup_fee_percent] [decimal](18, 4) NOT NULL,
	[topup_fix_rate] [decimal](18, 4) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[date_created] [datetime] NOT NULL,
	[date_updated] [datetime] NULL,
	[fundin_status] [varchar](1) NULL,
	[fundin_amount_min] [decimal](18, 4) NULL,
	[fundin_amount_max] [decimal](18, 4) NULL,
	[fundin_fee_percent] [decimal](18, 4) NULL,
	[fundin_fix_rate] [decimal](18, 4) NULL,
	[fundin_referral_fee_percent] [decimal](18, 4) NULL,
	[fundout_status] [varchar](1) NULL,
	[fundout_amount_min] [decimal](18, 4) NULL,
	[fundout_amount_max] [decimal](18, 4) NULL,
	[fundout_fee_percent] [decimal](18, 4) NULL,
	[fundout_fix_rate] [decimal](18, 4) NULL,
	[fundout_referral_fee_percent] [decimal](18, 4) NULL,
 CONSTRAINT [PK_merchant_setting] PRIMARY KEY CLUSTERED 
(
	[merchant_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[merchant_settlement_list]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_settlement_list](
	[row_no] [bigint] IDENTITY(1,1) NOT NULL,
	[settlement_id] [varchar](50) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[settlement_amount] [decimal](18, 4) NOT NULL,
	[settlement_fee_amount] [decimal](18, 4) NULL,
	[settlement_net_amount] [decimal](18, 4) NULL,
	[settlement_request_date] [datetime] NOT NULL,
	[settlement_request_user] [varchar](20) NULL,
	[settlement_request_remark] [nvarchar](200) NULL,
	[settlement_payment_amount] [decimal](18, 4) NOT NULL,
	[settlement_process_date] [datetime] NULL,
	[settlement_process_user] [varchar](20) NOT NULL,
	[settlement_process_remark] [nvarchar](200) NULL,
	[settlement_status] [varchar](20) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_province] [nvarchar](100) NOT NULL,
	[bank_city] [nvarchar](100) NOT NULL,
	[bank_branch] [nvarchar](100) NOT NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_merchant_settlement_list] PRIMARY KEY CLUSTERED 
(
	[settlement_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [SETTLEMENT]
) ON [SETTLEMENT]
GO
/****** Object:  Table [dbo].[merchant_settlement_payment]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_settlement_payment](
	[payment_id] [bigint] IDENTITY(1,1) NOT NULL,
	[settlement_id] [varchar](50) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[pg_id] [varchar](10) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_remark] [nvarchar](200) NOT NULL,
	[payment_amount] [decimal](18, 4) NOT NULL,
	[payment_process_date] [datetime] NOT NULL,
	[payment_process_user] [varchar](20) NOT NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_merchant_settlement_payment] PRIMARY KEY CLUSTERED 
(
	[payment_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [SETTLEMENT]
) ON [SETTLEMENT]
GO
/****** Object:  Table [dbo].[merchant_settlement_pending]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_settlement_pending](
	[row_no] [bigint] IDENTITY(1,1) NOT NULL,
	[settlement_id] [varchar](50) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[settlement_amount] [decimal](18, 4) NOT NULL,
	[settlement_fee_amount] [decimal](18, 4) NULL,
	[settlement_net_amount] [decimal](18, 4) NULL,
	[settlement_request_date] [datetime] NOT NULL,
	[settlement_request_user] [varchar](20) NULL,
	[settlement_request_remark] [nvarchar](200) NULL,
	[settlement_status] [varchar](20) NOT NULL,
	[settlement_payment_amount] [decimal](18, 4) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_province] [nvarchar](100) NOT NULL,
	[bank_city] [nvarchar](100) NOT NULL,
	[bank_branch] [nvarchar](100) NOT NULL,
	[create_date] [datetime] NULL,
 CONSTRAINT [PK_merchant_settlement_pending] PRIMARY KEY CLUSTERED 
(
	[settlement_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [SETTLEMENT]
) ON [SETTLEMENT]
GO
/****** Object:  Table [dbo].[merchant_settlement_temp]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_settlement_temp](
	[row_no] [bigint] IDENTITY(1,1) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[settlement_amount] [decimal](18, 4) NOT NULL,
	[settlement_fee_amount] [decimal](18, 4) NULL,
	[settlement_net_amount] [decimal](18, 4) NULL,
	[settlement_request_date] [datetime] NOT NULL,
	[settlement_request_user] [varchar](20) NULL,
	[settlement_request_remark] [varchar](200) NULL,
	[bank_code] [varchar](10) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_province] [nvarchar](100) NULL,
	[bank_city] [nvarchar](100) NULL,
	[bank_branch] [nvarchar](100) NULL,
	[create_date] [datetime] NOT NULL,
	[stamp_user] [varchar](20) NOT NULL,
 CONSTRAINT [PK_merchant_settlement_temp] PRIMARY KEY CLUSTERED 
(
	[row_no] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [SETTLEMENT]
) ON [SETTLEMENT]
GO
/****** Object:  Table [dbo].[merchant_statement_idr]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_statement_idr](
	[statement_id] [bigint] IDENTITY(1,1) NOT NULL,
	[statement_type] [varchar](20) NOT NULL,
	[statement_group] [varchar](20) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_id] [varchar](10) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[statement_amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](5) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [nvarchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[merchant_balance_before] [decimal](18, 4) NOT NULL,
	[merchant_amount_debit] [decimal](18, 4) NOT NULL,
	[merchant_amount_credit] [decimal](18, 4) NOT NULL,
	[merchant_balance_after] [decimal](18, 4) NOT NULL,
	[bank_fee] [decimal](18, 4) NULL,
 CONSTRAINT [PK_merchant_statement_idr] PRIMARY KEY CLUSTERED 
(
	[statement_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [STATEMENTIDR]
) ON [STATEMENTIDR]
GO
/****** Object:  Table [dbo].[merchant_statement_idr_request]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_statement_idr_request](
	[req_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](10) NOT NULL,
	[statement_type] [varchar](20) NOT NULL,
 CONSTRAINT [PK_merchant_statement_idr_request] PRIMARY KEY CLUSTERED 
(
	[req_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [STATEMENTIDR]
) ON [STATEMENTIDR]
GO
/****** Object:  Table [dbo].[merchant_statement_myr]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_statement_myr](
	[statement_id] [bigint] IDENTITY(1,1) NOT NULL,
	[statement_type] [varchar](20) NOT NULL,
	[statement_group] [varchar](20) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_id] [varchar](10) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[statement_amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](5) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [nvarchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[merchant_balance_before] [decimal](18, 4) NOT NULL,
	[merchant_amount_debit] [decimal](18, 4) NOT NULL,
	[merchant_amount_credit] [decimal](18, 4) NOT NULL,
	[merchant_balance_after] [decimal](18, 4) NOT NULL,
	[bank_fee] [decimal](18, 4) NULL,
 CONSTRAINT [PK_merchant_statement_myr] PRIMARY KEY CLUSTERED 
(
	[statement_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [STATEMENTMYR]
) ON [STATEMENTMYR]
GO
/****** Object:  Table [dbo].[merchant_statement_myr_request]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_statement_myr_request](
	[req_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](10) NOT NULL,
	[statement_type] [varchar](20) NOT NULL,
 CONSTRAINT [PK_merchant_statement_myr_request] PRIMARY KEY CLUSTERED 
(
	[req_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [STATEMENTMYR]
) ON [STATEMENTMYR]
GO
/****** Object:  Table [dbo].[merchant_statement_thb]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_statement_thb](
	[statement_id] [bigint] IDENTITY(1,1) NOT NULL,
	[statement_type] [varchar](20) NOT NULL,
	[statement_group] [varchar](20) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_id] [varchar](10) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[statement_amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](5) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [nvarchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[merchant_balance_before] [decimal](18, 4) NOT NULL,
	[merchant_amount_debit] [decimal](18, 4) NOT NULL,
	[merchant_amount_credit] [decimal](18, 4) NOT NULL,
	[merchant_balance_after] [decimal](18, 4) NOT NULL,
	[bank_fee] [decimal](18, 4) NULL,
 CONSTRAINT [PK_merchant_statement_thb] PRIMARY KEY CLUSTERED 
(
	[statement_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [STATEMENTTHB]
) ON [STATEMENTTHB]
GO
/****** Object:  Table [dbo].[merchant_statement_thb_request]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_statement_thb_request](
	[req_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](10) NOT NULL,
	[statement_type] [varchar](20) NOT NULL,
 CONSTRAINT [PK_merchant_statement_thb_request] PRIMARY KEY CLUSTERED 
(
	[req_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [STATEMENTTHB]
) ON [STATEMENTTHB]
GO
/****** Object:  Table [dbo].[merchant_statement_vnd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_statement_vnd](
	[statement_id] [bigint] IDENTITY(1,1) NOT NULL,
	[statement_type] [varchar](20) NOT NULL,
	[statement_group] [varchar](20) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_id] [varchar](10) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[statement_amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](5) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [nvarchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[merchant_balance_before] [decimal](18, 4) NOT NULL,
	[merchant_amount_debit] [decimal](18, 4) NOT NULL,
	[merchant_amount_credit] [decimal](18, 4) NOT NULL,
	[merchant_balance_after] [decimal](18, 4) NOT NULL,
	[bank_fee] [decimal](18, 4) NULL,
 CONSTRAINT [PK_merchant_statement_vnd] PRIMARY KEY CLUSTERED 
(
	[statement_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [STATEMENTVND]
) ON [STATEMENTVND]
GO
/****** Object:  Table [dbo].[merchant_statement_vnd_request]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_statement_vnd_request](
	[req_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](10) NOT NULL,
	[statement_type] [varchar](20) NOT NULL,
 CONSTRAINT [PK_merchant_statement_vnd_request] PRIMARY KEY CLUSTERED 
(
	[req_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [STATEMENTVND]
) ON [STATEMENTVND]
GO
/****** Object:  Table [dbo].[merchant_topup_bank]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_topup_bank](
	[row_no] [bigint] IDENTITY(1,1) NOT NULL,
	[topup_id] [varchar](50) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[merchant_code_from] [varchar](20) NOT NULL,
	[merchant_name_from] [nvarchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[topup_amount] [decimal](18, 4) NOT NULL,
	[topup_fee_amount] [decimal](18, 4) NOT NULL,
	[topup_net_amount] [decimal](18, 4) NOT NULL,
	[topup_fix_rate] [decimal](18, 4) NOT NULL,
	[topup_fee_percent] [decimal](18, 4) NOT NULL,
	[topup_request_date] [datetime] NOT NULL,
	[topup_request_user] [varchar](20) NOT NULL,
	[topup_process_date] [datetime] NULL,
	[topup_process_user] [varchar](20) NOT NULL,
	[topup_type] [varchar](20) NOT NULL,
	[topup_status] [varchar](20) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[create_date] [datetime] NOT NULL,
	[failed_reason] [nvarchar](200) NULL,
	[stamp_user] [varchar](20) NOT NULL,
	[transaction_id_fundin] [varchar](50) NULL,
 CONSTRAINT [PK_merchant_topup_bank] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [SETTLEMENT]
) ON [SETTLEMENT]
GO
/****** Object:  Table [dbo].[merchant_topup_list]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_topup_list](
	[row_no] [bigint] IDENTITY(1,1) NOT NULL,
	[topup_id] [varchar](50) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[merchant_code_from] [varchar](20) NOT NULL,
	[merchant_name_from] [nvarchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[topup_amount_total] [decimal](18, 4) NOT NULL,
	[topup_fee_amount_total] [decimal](18, 4) NOT NULL,
	[topup_net_amount_total] [decimal](18, 4) NOT NULL,
	[topup_approved_amount] [decimal](18, 4) NOT NULL,
	[topup_request_date] [datetime] NOT NULL,
	[topup_request_user] [varchar](20) NOT NULL,
	[topup_type] [varchar](20) NOT NULL,
	[topup_status] [varchar](20) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[create_date] [datetime] NOT NULL,
	[stamp_user] [varchar](20) NOT NULL,
 CONSTRAINT [PK_merchant_topup_list] PRIMARY KEY CLUSTERED 
(
	[topup_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [SETTLEMENT]
) ON [SETTLEMENT]
GO
/****** Object:  Table [dbo].[merchant_transaction_fundin_idr_check]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_fundin_idr_check](
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_fundin_idr_check] PRIMARY KEY CLUSTERED 
(
	[merchant_transaction_id] ASC,
	[merchant_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINIDR]
) ON [PACMANFUNDINIDR]
GO
/****** Object:  Table [dbo].[merchant_transaction_fundin_myr_check]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_fundin_myr_check](
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_fundin_myr_check] PRIMARY KEY CLUSTERED 
(
	[merchant_transaction_id] ASC,
	[merchant_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINMYR]
) ON [PACMANFUNDINMYR]
GO
/****** Object:  Table [dbo].[merchant_transaction_fundin_thb_check]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_fundin_thb_check](
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_fundin_thb_check] PRIMARY KEY CLUSTERED 
(
	[merchant_transaction_id] ASC,
	[merchant_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINTHB]
) ON [PACMANFUNDINTHB]
GO
/****** Object:  Table [dbo].[merchant_transaction_fundin_vnd_check]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_fundin_vnd_check](
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_fundin_vnd_check] PRIMARY KEY CLUSTERED 
(
	[merchant_transaction_id] ASC,
	[merchant_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINVND]
) ON [PACMANFUNDINVND]
GO
/****** Object:  Table [dbo].[merchant_transaction_fundout_idr_check]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_fundout_idr_check](
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_fundout_idr_check] PRIMARY KEY CLUSTERED 
(
	[merchant_transaction_id] ASC,
	[merchant_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTIDR]
) ON [PACMANFUNDOUTIDR]
GO
/****** Object:  Table [dbo].[merchant_transaction_fundout_myr_check]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_fundout_myr_check](
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_fundout_myr_check] PRIMARY KEY CLUSTERED 
(
	[merchant_transaction_id] ASC,
	[merchant_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTMYR]
) ON [PACMANFUNDOUTMYR]
GO
/****** Object:  Table [dbo].[merchant_transaction_fundout_thb_check]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_fundout_thb_check](
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_fundout_thb_check] PRIMARY KEY CLUSTERED 
(
	[merchant_transaction_id] ASC,
	[merchant_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTTHB]
) ON [PACMANFUNDOUTTHB]
GO
/****** Object:  Table [dbo].[merchant_transaction_fundout_vnd_check]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_fundout_vnd_check](
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_fundout_vnd_check] PRIMARY KEY CLUSTERED 
(
	[merchant_transaction_id] ASC,
	[merchant_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTVND]
) ON [PACMANFUNDOUTVND]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundin_idr]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundin_idr](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[return_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundin_idr] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINIDR]
) ON [PACMANFUNDINIDR]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundin_idr_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundin_idr_log](
	[log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[return_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[req_log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundin_idr_log] PRIMARY KEY CLUSTERED 
(
	[log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINIDR]
) ON [PACMANFUNDINIDR]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundin_myr]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundin_myr](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[return_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundin_myr] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINMYR]
) ON [PACMANFUNDINMYR]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundin_myr_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundin_myr_log](
	[log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[return_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[req_log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundin_myr_log] PRIMARY KEY CLUSTERED 
(
	[log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINMYR]
) ON [PACMANFUNDINMYR]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundin_thb]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundin_thb](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[return_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundin_thb] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINTHB]
) ON [PACMANFUNDINTHB]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundin_thb_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundin_thb_log](
	[log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[return_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[req_log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundin_thb_log] PRIMARY KEY CLUSTERED 
(
	[log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINTHB]
) ON [PACMANFUNDINTHB]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundin_vnd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundin_vnd](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[return_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundin_vnd] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINVND]
) ON [PACMANFUNDINVND]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundin_vnd_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundin_vnd_log](
	[log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[return_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[req_log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundin_vnd_log] PRIMARY KEY CLUSTERED 
(
	[log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINVND]
) ON [PACMANFUNDINVND]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundout_idr]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundout_idr](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [varchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[bank_fee] [decimal](18, 4) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundout_idr] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTIDR]
) ON [PACMANFUNDOUTIDR]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundout_idr_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundout_idr_log](
	[log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [varchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[bank_fee] [decimal](18, 4) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[req_log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundout_idr_log] PRIMARY KEY CLUSTERED 
(
	[log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTIDR]
) ON [PACMANFUNDOUTIDR]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundout_myr]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundout_myr](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [varchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[bank_fee] [decimal](18, 4) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundout_myr] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTMYR]
) ON [PACMANFUNDOUTMYR]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundout_myr_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundout_myr_log](
	[log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [varchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[bank_fee] [decimal](18, 4) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[req_log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundout_myr_log] PRIMARY KEY CLUSTERED 
(
	[log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTMYR]
) ON [PACMANFUNDOUTMYR]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundout_thb]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundout_thb](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [varchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[bank_fee] [decimal](18, 4) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundout_thb] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTTHB]
) ON [PACMANFUNDOUTTHB]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundout_thb_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundout_thb_log](
	[log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [varchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[bank_fee] [decimal](18, 4) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[req_log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundout_thb_log] PRIMARY KEY CLUSTERED 
(
	[log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTTHB]
) ON [PACMANFUNDOUTTHB]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundout_vnd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundout_vnd](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [varchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[bank_fee] [decimal](18, 4) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundout_vnd] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTVND]
) ON [PACMANFUNDOUTVND]
GO
/****** Object:  Table [dbo].[merchant_transaction_history_fundout_vnd_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_history_fundout_vnd_log](
	[log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [varchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp_req] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[transaction_note] [varchar](500) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[gateway_transaction_status] [varchar](20) NULL,
	[bank_fee] [decimal](18, 4) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
	[req_log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_history_fundout_vnd_log] PRIMARY KEY CLUSTERED 
(
	[log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTVND]
) ON [PACMANFUNDOUTVND]
GO
/****** Object:  Table [dbo].[merchant_transaction_notify_fundin_idr]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_notify_fundin_idr](
	[req_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_notify_fundin_idr] PRIMARY KEY CLUSTERED 
(
	[req_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINIDR]
) ON [PACMANFUNDINIDR]
GO
/****** Object:  Table [dbo].[merchant_transaction_notify_fundin_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_notify_fundin_log](
	[log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[notify_fundin_note] [varchar](2000) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_notify_fundin_log] PRIMARY KEY CLUSTERED 
(
	[log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANLOG]
) ON [PACMANLOG]
GO
/****** Object:  Table [dbo].[merchant_transaction_notify_fundin_myr]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_notify_fundin_myr](
	[req_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_notify_fundin_myr] PRIMARY KEY CLUSTERED 
(
	[req_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINMYR]
) ON [PACMANFUNDINMYR]
GO
/****** Object:  Table [dbo].[merchant_transaction_notify_fundin_thb]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_notify_fundin_thb](
	[req_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_notify_fundin_thb] PRIMARY KEY CLUSTERED 
(
	[req_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINTHB]
) ON [PACMANFUNDINTHB]
GO
/****** Object:  Table [dbo].[merchant_transaction_notify_fundin_vnd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_notify_fundin_vnd](
	[req_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_notify_fundin_vnd] PRIMARY KEY CLUSTERED 
(
	[req_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINVND]
) ON [PACMANFUNDINVND]
GO
/****** Object:  Table [dbo].[merchant_transaction_notify_fundout_idr]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_notify_fundout_idr](
	[req_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_notify_fundout_idr] PRIMARY KEY CLUSTERED 
(
	[req_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTIDR]
) ON [PACMANFUNDOUTIDR]
GO
/****** Object:  Table [dbo].[merchant_transaction_notify_fundout_log]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_notify_fundout_log](
	[log_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_tx_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[notify_fundout_note] [varchar](2000) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_notify_fundout_log] PRIMARY KEY CLUSTERED 
(
	[log_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANLOG]
) ON [PACMANLOG]
GO
/****** Object:  Table [dbo].[merchant_transaction_notify_fundout_vnd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_notify_fundout_vnd](
	[req_id] [bigint] IDENTITY(1,1) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[trigger_by] [varchar](20) NOT NULL,
	[transaction_hash] [varchar](50) NOT NULL,
 CONSTRAINT [PK_merchant_transaction_notify_fundout_vnd] PRIMARY KEY CLUSTERED 
(
	[req_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTVND]
) ON [PACMANFUNDOUTVND]
GO
/****** Object:  Table [dbo].[merchant_transaction_payment_html_thb]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_payment_html_thb](
	[session_token] [varchar](50) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[html_string] [nvarchar](max) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_payment_html_thb] PRIMARY KEY CLUSTERED 
(
	[session_token] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINTHB]
) ON [PACMANFUNDINTHB] TEXTIMAGE_ON [PACMANFUNDINTHB]
GO
/****** Object:  Table [dbo].[merchant_transaction_pending_fundin_idr]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_pending_fundin_idr](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[return_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_pending_fundin_idr] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINIDR]
) ON [PACMANFUNDINIDR]
GO
/****** Object:  Table [dbo].[merchant_transaction_pending_fundin_myr]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_pending_fundin_myr](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[return_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_pending_fundin_myr] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINMYR]
) ON [PACMANFUNDINMYR]
GO
/****** Object:  Table [dbo].[merchant_transaction_pending_fundin_thb]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_pending_fundin_thb](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[return_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_pending_fundin_thb] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINTHB]
) ON [PACMANFUNDINTHB]
GO
/****** Object:  Table [dbo].[merchant_transaction_pending_fundout_myr]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_pending_fundout_myr](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [varchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_pending_fundout_myr] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTMYR]
) ON [PACMANFUNDOUTMYR]
GO
/****** Object:  Table [dbo].[merchant_transaction_pending_fundout_thb]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_pending_fundout_thb](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [varchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_pending_fundout_thb] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTTHB]
) ON [PACMANFUNDOUTTHB]
GO
/****** Object:  Table [dbo].[merchant_transaction_pending_fundout_vnd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_pending_fundout_vnd](
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_code] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[request_date] [datetime] NOT NULL,
	[request_url] [varchar](2000) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[merchant_language] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[ip_address] [varchar](50) NOT NULL,
	[bank_name] [varchar](50) NOT NULL,
	[bank_account_no] [varchar](50) NOT NULL,
	[bank_account_name] [nvarchar](100) NOT NULL,
	[bank_branch] [varchar](50) NOT NULL,
	[bank_city] [varchar](50) NOT NULL,
	[bank_province] [varchar](50) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[payment_channel_name] [nvarchar](200) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[payment_channel_id_vendor] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[log_id] [bigint] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_pending_fundout_vnd] PRIMARY KEY CLUSTERED 
(
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDOUTVND]
) ON [PACMANFUNDOUTVND]
GO
/****** Object:  Table [dbo].[merchant_transaction_virtual_account_idr]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[merchant_transaction_virtual_account_idr](
	[session_token] [varchar](50) NOT NULL,
	[transaction_id] [varchar](50) NOT NULL,
	[merchant_transaction_id] [varchar](50) NOT NULL,
	[merchant_id] [varchar](50) NOT NULL,
	[merchant_name] [nvarchar](200) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[amount_total] [decimal](18, 4) NOT NULL,
	[amount] [decimal](18, 4) NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[gateway_percent] [decimal](18, 4) NOT NULL,
	[gateway_fee_type] [varchar](50) NOT NULL,
	[virtual_account_number] [varchar](50) NOT NULL,
	[virtual_account_expire] [datetime] NOT NULL,
	[date_stamp] [datetime] NOT NULL,
 CONSTRAINT [PK_merchant_transaction_virtual_account_idr] PRIMARY KEY CLUSTERED 
(
	[session_token] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PACMANFUNDINIDR]
) ON [PACMANFUNDINIDR]
GO
/****** Object:  Table [dbo].[payment_gateway_balance]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[payment_gateway_balance](
	[pg_balance_id] [varchar](50) NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[pg_id] [varchar](10) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[pg_balance_fundin] [decimal](18, 4) NOT NULL,
	[pg_balance_fundout] [decimal](18, 4) NOT NULL,
	[date_created] [datetime] NULL,
	[date_updated] [datetime] NULL,
 CONSTRAINT [PK_payment_gateway_balance] PRIMARY KEY CLUSTERED 
(
	[pg_balance_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[payment_gateway_fundin_statistic]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[payment_gateway_fundin_statistic](
	[date_int] [int] NOT NULL,
	[date_statistic] [datetime] NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [varchar](200) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[transaction_total] [int] NOT NULL,
	[transaction_succeed_total] [int] NOT NULL,
	[transaction_succeed_percent] [decimal](18, 2) NOT NULL,
	[transaction_succeed_amount] [decimal](18, 4) NOT NULL,
	[transaction_failed_total] [int] NOT NULL,
	[transaction_failed_percent] [decimal](18, 2) NOT NULL,
	[transaction_failed_amount] [decimal](18, 4) NOT NULL,
	[date_updated] [datetime] NOT NULL,
 CONSTRAINT [PK_payment_gateway_fundin_statistic] PRIMARY KEY CLUSTERED 
(
	[date_int] ASC,
	[currency] ASC,
	[pg_id] ASC,
	[bank_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [TRANSACTION]
) ON [TRANSACTION]
GO
/****** Object:  Table [dbo].[payment_gateway_fundin_statistic_request]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[payment_gateway_fundin_statistic_request](
	[req_id] [bigint] IDENTITY(1,1) NOT NULL,
	[date_transaction] [datetime] NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[transaction_amount] [decimal](18, 4) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
 CONSTRAINT [PK_payment_gateway_fundin_statistic_request] PRIMARY KEY CLUSTERED 
(
	[req_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [TRANSACTION]
) ON [TRANSACTION]
GO
/****** Object:  Table [dbo].[payment_gateway_fundout_statistic]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[payment_gateway_fundout_statistic](
	[date_int] [int] NOT NULL,
	[date_statistic] [datetime] NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [varchar](200) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[transaction_total] [int] NOT NULL,
	[transaction_succeed_total] [int] NOT NULL,
	[transaction_succeed_percent] [decimal](18, 2) NOT NULL,
	[transaction_succeed_amount] [decimal](18, 4) NOT NULL,
	[transaction_failed_total] [int] NOT NULL,
	[transaction_failed_percent] [decimal](18, 2) NOT NULL,
	[transaction_failed_amount] [decimal](18, 4) NOT NULL,
	[date_updated] [datetime] NOT NULL,
 CONSTRAINT [PK_payment_gateway_fundout_statistic] PRIMARY KEY CLUSTERED 
(
	[date_int] ASC,
	[currency] ASC,
	[pg_id] ASC,
	[bank_code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [TRANSACTION]
) ON [TRANSACTION]
GO
/****** Object:  Table [dbo].[payment_gateway_fundout_statistic_request]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[payment_gateway_fundout_statistic_request](
	[req_id] [bigint] IDENTITY(1,1) NOT NULL,
	[date_transaction] [datetime] NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[bank_code] [varchar](10) NOT NULL,
	[transaction_amount] [decimal](18, 4) NOT NULL,
	[transaction_status] [varchar](20) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[date_stamp] [datetime] NOT NULL,
 CONSTRAINT [PK_payment_gateway_fundout_statistic_request] PRIMARY KEY CLUSTERED 
(
	[req_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [TRANSACTION]
) ON [TRANSACTION]
GO
/****** Object:  Table [dbo].[payment_gateway_merchant_list]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[payment_gateway_merchant_list](
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_seq] [int] NOT NULL,
	[pg_merchant_id] [varchar](50) NOT NULL,
	[pg_merchant_currency] [varchar](3) NOT NULL,
	[pg_merchant_status] [varchar](1) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [nvarchar](200) NOT NULL,
	[gateway_fee] [decimal](18, 4) NOT NULL,
	[date_created] [datetime] NOT NULL,
	[date_updated] [datetime] NULL,
	[pg_pool_weight] [decimal](18, 4) NOT NULL,
	[pg_merchant_payment_channel] [varchar](20) NOT NULL,
	[pg_merchant_payment_channel_vendor] [varchar](20) NOT NULL,
	[fundin_min] [decimal](18, 4) NOT NULL,
	[fundin_max] [decimal](18, 4) NOT NULL,
	[fundin_total_day] [decimal](18, 4) NOT NULL,
	[fundout_min] [decimal](18, 4) NOT NULL,
	[fundout_max] [decimal](18, 4) NOT NULL,
	[fundout_total_day] [decimal](18, 4) NOT NULL,
 CONSTRAINT [PK_payment_gateway_merchant_list] PRIMARY KEY CLUSTERED 
(
	[pg_pool_id] ASC,
	[pg_pool_seq] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[payment_gateway_pool_fundin_statistic]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[payment_gateway_pool_fundin_statistic](
	[date_int] [int] NOT NULL,
	[date_statistic] [datetime] NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [varchar](200) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_succeed_amount] [decimal](18, 4) NOT NULL,
	[date_updated] [datetime] NOT NULL,
 CONSTRAINT [PK_payment_gateway_pool_fundin_statistic] PRIMARY KEY CLUSTERED 
(
	[date_int] ASC,
	[currency] ASC,
	[pg_id] ASC,
	[pg_pool_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [TRANSACTION]
) ON [TRANSACTION]
GO
/****** Object:  Table [dbo].[payment_gateway_pool_fundout_statistic]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[payment_gateway_pool_fundout_statistic](
	[date_int] [int] NOT NULL,
	[date_statistic] [datetime] NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[pg_id] [varchar](50) NOT NULL,
	[pg_name] [varchar](200) NOT NULL,
	[pg_pool_id] [varchar](50) NOT NULL,
	[pg_pool_score] [decimal](18, 4) NOT NULL,
	[transaction_succeed_amount] [decimal](18, 4) NOT NULL,
	[date_updated] [datetime] NOT NULL,
 CONSTRAINT [PK_payment_gateway_pool_fundout_statistic] PRIMARY KEY CLUSTERED 
(
	[date_int] ASC,
	[currency] ASC,
	[pg_id] ASC,
	[pg_pool_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [TRANSACTION]
) ON [TRANSACTION]
GO
/****** Object:  Table [dbo].[user_group]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[user_group](
	[user_group_id] [int] IDENTITY(1,1) NOT NULL,
	[level_id] [varchar](1) NOT NULL,
	[user_group_name] [varchar](50) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_group_name] [nvarchar](100) NOT NULL,
	[module_id] [varchar](10) NOT NULL,
	[create_date] [datetime] NOT NULL,
	[status] [varchar](10) NULL,
	[last_update] [datetime] NULL,
	[update_by] [varchar](10) NULL,
 CONSTRAINT [PK_user_group] PRIMARY KEY CLUSTERED 
(
	[user_group_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[user_group_authorization]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[user_group_authorization](
	[user_group_authorization_id] [int] IDENTITY(1,1) NOT NULL,
	[user_group_id] [int] NOT NULL,
	[user_group_name] [varchar](50) NOT NULL,
	[module_id] [varchar](10) NOT NULL,
	[menu_id] [varchar](10) NOT NULL,
	[authorization_id] [varchar](10) NOT NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_user_group_authorization] PRIMARY KEY CLUSTERED 
(
	[user_group_authorization_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[user_group_menu]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[user_group_menu](
	[user_group_menu_id] [int] IDENTITY(1,1) NOT NULL,
	[user_group_id] [int] NOT NULL,
	[user_group_name] [varchar](50) NOT NULL,
	[level_id] [varchar](1) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_group_name] [nvarchar](100) NOT NULL,
	[module_id] [varchar](10) NOT NULL,
	[section_id] [varchar](10) NOT NULL,
	[menu_id] [varchar](10) NOT NULL,
	[menu_name] [varchar](50) NOT NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_user_group_menu] PRIMARY KEY CLUSTERED 
(
	[user_group_menu_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[user_group_user]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[user_group_user](
	[user_group_user_id] [int] IDENTITY(1,1) NOT NULL,
	[user_group_id] [int] NOT NULL,
	[user_group_name] [varchar](50) NOT NULL,
	[level_id] [varchar](1) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_group_name] [nvarchar](100) NOT NULL,
	[user_guid] [varchar](20) NOT NULL,
	[user_login] [varchar](20) NOT NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_user_group_user] PRIMARY KEY CLUSTERED 
(
	[user_group_user_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[user_merchant_group]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[user_merchant_group](
	[user_merchant_group_id] [int] IDENTITY(1,1) NOT NULL,
	[level_id] [varchar](1) NOT NULL,
	[user_merchant_group_name] [varchar](50) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_user_merchant_group] PRIMARY KEY CLUSTERED 
(
	[user_merchant_group_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[user_merchant_group_merchant]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[user_merchant_group_merchant](
	[user_merchant_group_merchant_id] [int] IDENTITY(1,1) NOT NULL,
	[user_merchant_group_id] [int] NOT NULL,
	[user_merchant_group_name] [varchar](50) NOT NULL,
	[level_id] [varchar](1) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[merchant_code] [varchar](20) NOT NULL,
	[merchant_id] [varchar](10) NOT NULL,
	[merchant_name] [nvarchar](50) NOT NULL,
	[currency] [varchar](10) NOT NULL,
	[payment_channel_id] [varchar](20) NOT NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_user_merchant_group_merchant] PRIMARY KEY CLUSTERED 
(
	[user_merchant_group_merchant_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[user_merchant_group_user]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[user_merchant_group_user](
	[user_merchant_group_user_id] [int] IDENTITY(1,1) NOT NULL,
	[user_merchant_group_id] [int] NOT NULL,
	[user_merchant_group_name] [varchar](50) NOT NULL,
	[level_id] [varchar](1) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[merchant_group_id] [varchar](20) NOT NULL,
	[user_guid] [varchar](20) NOT NULL,
	[user_login] [varchar](10) NOT NULL,
	[create_date] [datetime] NOT NULL,
 CONSTRAINT [PK_user_merchant_group_user] PRIMARY KEY CLUSTERED 
(
	[user_merchant_group_user_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [MASTER]
) ON [MASTER]
GO
/****** Object:  Table [dbo].[user_session]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[user_session](
	[user_session_id] [bigint] IDENTITY(1,1) NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[company_name] [nvarchar](50) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[operator_name] [nvarchar](50) NOT NULL,
	[user_id] [int] NOT NULL,
	[user_login] [varchar](20) NOT NULL,
	[session_token] [varchar](150) NOT NULL,
	[login_date] [datetime] NOT NULL,
	[login_ip] [varchar](15) NOT NULL,
	[level_id] [varchar](10) NOT NULL,
	[user_guid] [varchar](20) NOT NULL,
	[origin] [varchar](1) NULL,
 CONSTRAINT [PK_user_session] PRIMARY KEY CLUSTERED 
(
	[user_session_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [TRANSACTION]
) ON [TRANSACTION]
GO
/****** Object:  Table [dbo].[user_session_hist]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[user_session_hist](
	[user_session_id] [bigint] NOT NULL,
	[company_id] [varchar](3) NOT NULL,
	[company_name] [nvarchar](50) NOT NULL,
	[operator_id] [varchar](2) NOT NULL,
	[operator_name] [nvarchar](50) NOT NULL,
	[user_id] [int] NOT NULL,
	[user_login] [varchar](20) NOT NULL,
	[session_token] [varchar](150) NOT NULL,
	[login_date] [datetime] NOT NULL,
	[logout_date] [datetime] NOT NULL,
	[login_ip] [varchar](15) NOT NULL,
	[level_id] [varchar](10) NOT NULL,
	[user_guid] [varchar](20) NOT NULL,
	[logout_status] [varchar](20) NOT NULL,
	[origin] [varchar](1) NULL,
 CONSTRAINT [PK_user_session_hist] PRIMARY KEY CLUSTERED 
(
	[user_session_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [TRANSACTION]
) ON [TRANSACTION]
GO
ALTER TABLE [dbo].[merchant_list]  WITH CHECK ADD  CONSTRAINT [FK_merchant_list_master_company] FOREIGN KEY([company_id])
REFERENCES [dbo].[master_company] ([company_id])
GO
ALTER TABLE [dbo].[merchant_list] CHECK CONSTRAINT [FK_merchant_list_master_company]
GO
ALTER TABLE [dbo].[merchant_list]  WITH CHECK ADD  CONSTRAINT [FK_merchant_list_master_currency] FOREIGN KEY([currency])
REFERENCES [dbo].[master_currency] ([currency])
GO
ALTER TABLE [dbo].[merchant_list] CHECK CONSTRAINT [FK_merchant_list_master_currency]
GO
ALTER TABLE [dbo].[merchant_list]  WITH CHECK ADD  CONSTRAINT [FK_merchant_list_merchant_list] FOREIGN KEY([merchant_id])
REFERENCES [dbo].[merchant_list] ([merchant_id])
GO
ALTER TABLE [dbo].[merchant_list] CHECK CONSTRAINT [FK_merchant_list_merchant_list]
GO
ALTER TABLE [dbo].[merchant_list]  WITH CHECK ADD  CONSTRAINT [FK_merchant_list_merchant_master] FOREIGN KEY([merchant_code])
REFERENCES [dbo].[merchant_master] ([merchant_code])
GO
ALTER TABLE [dbo].[merchant_list] CHECK CONSTRAINT [FK_merchant_list_merchant_master]
GO
ALTER TABLE [dbo].[merchant_setting]  WITH CHECK ADD  CONSTRAINT [FK_merchant_setting_merchant_setting] FOREIGN KEY([merchant_id])
REFERENCES [dbo].[merchant_setting] ([merchant_id])
GO
ALTER TABLE [dbo].[merchant_setting] CHECK CONSTRAINT [FK_merchant_setting_merchant_setting]
GO
ALTER TABLE [dbo].[merchant_setting]  WITH CHECK ADD  CONSTRAINT [FK_merchant_setting_merchant_setting1] FOREIGN KEY([merchant_id])
REFERENCES [dbo].[merchant_setting] ([merchant_id])
GO
ALTER TABLE [dbo].[merchant_setting] CHECK CONSTRAINT [FK_merchant_setting_merchant_setting1]
GO
ALTER TABLE [dbo].[merchant_transaction_virtual_account_idr]  WITH CHECK ADD  CONSTRAINT [FK_merchant_transaction_virtual_account_idr_master_bank] FOREIGN KEY([bank_code])
REFERENCES [dbo].[master_bank] ([bank_code])
GO
ALTER TABLE [dbo].[merchant_transaction_virtual_account_idr] CHECK CONSTRAINT [FK_merchant_transaction_virtual_account_idr_master_bank]
GO
ALTER TABLE [dbo].[merchant_transaction_virtual_account_idr]  WITH CHECK ADD  CONSTRAINT [FK_merchant_transaction_virtual_account_idr_merchant_transaction_virtual_account_idr] FOREIGN KEY([session_token])
REFERENCES [dbo].[merchant_transaction_virtual_account_idr] ([session_token])
GO
ALTER TABLE [dbo].[merchant_transaction_virtual_account_idr] CHECK CONSTRAINT [FK_merchant_transaction_virtual_account_idr_merchant_transaction_virtual_account_idr]
GO
ALTER TABLE [dbo].[user_group]  WITH CHECK ADD  CONSTRAINT [FK_user_group_user_group] FOREIGN KEY([user_group_id])
REFERENCES [dbo].[user_group] ([user_group_id])
GO
ALTER TABLE [dbo].[user_group] CHECK CONSTRAINT [FK_user_group_user_group]
GO
ALTER TABLE [dbo].[user_session]  WITH CHECK ADD  CONSTRAINT [FK_user_session_user_session] FOREIGN KEY([user_session_id])
REFERENCES [dbo].[user_session] ([user_session_id])
GO
ALTER TABLE [dbo].[user_session] CHECK CONSTRAINT [FK_user_session_user_session]
GO
/****** Object:  StoredProcedure [dbo].[spCallbackCallLog]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spCallbackCallLog]
(
	@request varchar(8000),
	@response varchar(8000),
	@method varchar(500)
) 
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @result_code int, @result_message varchar(8000)
	-----------------------------------------------------------------------------------------------------------
	INSERT INTO dbo.callback_log(request, response, date_stamp, method)
	VALUES(@request, @response, dbo.fnGetDateGMT7(), @method)
	-----------------------------------------------------------------------------------------------------------

	SELECT @result_code = 1, @result_message = ''

	SELECT @result_code, @result_message
	RETURN 
END
GO
/****** Object:  StoredProcedure [dbo].[spComboBank]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboBank]
(
	@currency varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Bank

	select * from dbo.master_bank with (nolock)

	EXEC spComboBank @currency='', @stamp_user='developer15'
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(100)

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	IF (@currency = '')
	BEGIN
		SELECT bank_code, bank_name, bank_display_name, currency
		FROM dbo.master_bank WITH (NOLOCK)
		WHERE status_active = 'Y'
		ORDER BY currency, bank_code
	END
	ELSE
	BEGIN
		SELECT c.bank_code, b.bank_name, b.bank_display_name, c.currency
		FROM dbo.master_bank b WITH (NOLOCK)
		INNER JOIN dbo.master_bank_currency c WITH (NOLOCK) ON b.bank_code = c.bank_code
		WHERE c.status_active = 'Y' 
		AND b.status_active = 'Y'
		AND c.currency = @currency
		ORDER BY currency, bank_code
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spComboCompany]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboCompany]
(
	@stamp_user varchar(20)
)
AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(100)

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT company_id, company_name	
	FROM dbo.master_company WITH (NOLOCK) 
	WHERE status_active = 'Y'
	ORDER BY company_name
END
GO
/****** Object:  StoredProcedure [dbo].[spComboCurrency]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboCurrency]
(
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	select * from master_currency with (nolock)
	
	EXEC spComboCurrency @stamp_user=''

*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(100)

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT currency, currency	
	FROM dbo.master_currency WITH (NOLOCK) 
	WHERE status_active = 'Y'
	ORDER BY currency_name
END

GO
/****** Object:  StoredProcedure [dbo].[spComboGateway]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboGateway]
(
	@stamp_user varchar(20)
)
AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(100)

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT gateway_id, gateway_name	
	FROM dbo.master_gateway WITH (NOLOCK) 
	WHERE status_active = 'Y'
	ORDER BY gateway_name
END

GO
/****** Object:  StoredProcedure [dbo].[spComboGatewayFeeType]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboGatewayFeeType]
(
	@stamp_user varchar(20)
)
AS
/*
	
	EXEC spComboGatewayFeeType @stamp_user=''
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
		
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	;WITH cte_gateway_fee_type
	AS
	(
		SELECT gateway_fee_type = 'PERCENT', order_by = 1
		UNION ALL
		SELECT 'FIXED', 2
	)

	SELECT gateway_fee_type
	FROM cte_gateway_fee_type
	ORDER BY order_by
END
GO
/****** Object:  StoredProcedure [dbo].[spComboLanguage]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spComboLanguage]
AS
/*
	select * from master_language
	
	EXEC spComboLanguage
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
		
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT language_code, language_name
	FROM dbo.master_language WITH(NOLOCK) 
	ORDER BY language_name
END

GO
/****** Object:  StoredProcedure [dbo].[spComboLevel]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE    PROCEDURE [dbo].[spComboLevel]    

AS
/*
	select * from master_authorization
	select * from master_web_page
	
	EXEC PaymentGatewayDB.dbo.spPageMasterAuthorization @page=1, @page_size=70, @authorization_name='', @web_name=''
*/
BEGIN
	SET NOCOUNT ON
	
	------------
	DECLARE @result_code INT, @error_message VARCHAR(8000)
		, @user_group_id varchar(10), @total_rows int
	

	SELECT @result_code = 1, @error_message = ''

	SELECT @result_code, @error_message
	CREATE table  #level (
		[key] varchar(1),
		[Name] varchar(10)
	)
	INSERT INTO #level ([key],[name])
	VALUES ('D','Developer')
	INSERT INTO #level ([key],[name])
	VALUES ('O','Operator')
	INSERT INTO #level ([key],[name])
	VALUES ('M','Merchant')

	SELECT [key],[name]
	FROM #level 
END

GO
/****** Object:  StoredProcedure [dbo].[spComboMasterModuleSection]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboMasterModuleSection]
(
	@module_id varchar(10),
	@module_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	select * from master_module with (nolock)
	select * from master_module_section with (nolock) order by module_id, section_order

	EXEC spComboMasterModuleSection @module_id='MCG', @module_name='', @stamp_user=''
	
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module Section not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT module_section_id, section_id, section_name
	FROM dbo.master_module_section WITH (NOLOCK)
	WHERE module_id = @module_id
	AND status_active = 'Y'
	ORDER BY section_order
END
GO
/****** Object:  StoredProcedure [dbo].[spComboMerchant]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboMerchant]
(
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@currency varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	rf_param spComboMerchant

	EXEC spComboMerchant @company_id='', @operator_id='', @merchant_group_id='', @currency='', @stamp_user=''
*/
	SET NOCOUNT ON;

	DECLARE @result_code int, @error_message varchar(1000)

	SELECT	@company_id = CASE WHEN @company_id = '' THEN '%' ELSE @company_id END,
			@operator_id = CASE WHEN @operator_id = '' THEN '%' ELSE @operator_id END,
			@merchant_group_id = CASE WHEN @merchant_group_id = '' THEN '%' ELSE @merchant_group_id END,
			@currency = CASE WHEN @currency = '' THEN '%' ELSE @currency END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT company_id, operator_id, merchant_group_id, merchant_id, merchant_name, currency, payment_channel_id
	FROM dbo.merchant_list WITH (NOLOCK)
	WHERE merchant_status = 'Y'
	AND company_id LIKE @company_id
	AND operator_id LIKE @operator_id
	AND merchant_group_id LIKE @merchant_group_id
	AND currency LIKE @currency
	ORDER BY merchant_name
END
GO
/****** Object:  StoredProcedure [dbo].[spComboMerchantCode]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboMerchantCode]
(
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	rf_param spComboMerchantCode

	EXEC spComboMerchantCode @company_id='', @operator_id='', @merchant_group_id='', @stamp_user=''
*/
	SET NOCOUNT ON;

	DECLARE @result_code int, @error_message varchar(1000)

	SELECT @company_id = CASE WHEN @company_id = '' THEN '%' ELSE @company_id END,
		@operator_id = CASE WHEN @operator_id = '' THEN '%' ELSE @operator_id END,
		@merchant_group_id = CASE WHEN @merchant_group_id = '' THEN '%' ELSE @merchant_group_id END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT company_id, operator_id, merchant_group_id, merchant_code, merchant_name
	FROM dbo.merchant_master WITH (NOLOCK)
	WHERE status_active = 'Y'
	AND company_id LIKE @company_id
	AND operator_id LIKE @operator_id
	AND merchant_group_id LIKE @merchant_group_id
	ORDER BY merchant_name
END
GO
/****** Object:  StoredProcedure [dbo].[spComboMerchantGroup]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboMerchantGroup]
(
	@company_id varchar(3),
	@operator_id varchar(2),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Merchant Group

	select * from dbo.master_merchant_group with (nolock)

	EXEC spComboMerchantGroup @company_id='000', @operator_id='00', @stamp_user=''
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(100)

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SET @company_id = CASE WHEN @company_id = '' THEN '%' ELSE @company_id end
	SET @operator_id = CASE WHEN @operator_id = '' THEN '%' ELSE @operator_id end
	
	SELECT mg.company_id, cp.company_name, mg.operator_id, op.operator_name, mg.merchant_group_code, mg.merchant_group_id, mg.merchant_group_name	
	FROM dbo.master_merchant_group mg WITH (NOLOCK)
	INNER JOIN dbo.master_company cp WITH (NOLOCK) ON mg.company_id = cp.company_id
	INNER JOIN dbo.master_operator op WITH (NOLOCK) ON mg.company_id = op.company_id AND mg.operator_id = op.operator_id
	WHERE mg.status_active = 'Y' 
	AND mg.company_id LIKE @company_id
	AND mg.operator_id LIKE @operator_id
	ORDER BY mg.company_id, mg.operator_id, mg.merchant_group_name
END

GO
/****** Object:  StoredProcedure [dbo].[spComboModule]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboModule]
(
	@stamp_user varchar(20)
)
AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(8000)	

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT module_id, module_name
	FROM dbo.master_module WITH (NOLOCK)
	ORDER BY module_name
END
GO
/****** Object:  StoredProcedure [dbo].[spComboOperator]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboOperator]
(
	@company_id varchar(3),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Operator

	select * from dbo.master_operator with (nolock)

	EXEC spComboOperator @company_id='000', @stamp_user=''
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(100)

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SET @company_id = CASE WHEN @company_id = '' THEN '%' ELSE @company_id end
	
	SELECT opr.operator_id, opr.operator_name, opr.company_id, c.company_name
	FROM dbo.master_operator opr WITH (NOLOCK)
	INNER JOIN dbo.master_company c WITH (NOLOCK) ON opr.company_id = c.company_id
	WHERE opr.status_active = 'Y' 
	AND opr.company_id LIKE @company_id
	ORDER BY opr.company_id, opr.operator_name
END

GO
/****** Object:  StoredProcedure [dbo].[spComboPaymentChannel]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboPaymentChannel]
AS
/*
	select * from master_payment_channel
	
	EXEC spComboPaymentChannel
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
		
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT channel_id, channel_name
	FROM dbo.master_payment_channel WITH(NOLOCK) 
	ORDER BY channel_name
END

GO
/****** Object:  StoredProcedure [dbo].[spComboPaymentGateway]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboPaymentGateway]
(
	@currency varchar(10) = '',
	@currency_code varchar(10) = '', --remove
	@stamp_user varchar(20)
)
AS
/*
	select * from master_payment_gateway

	EXEC spComboPaymentGateway @currency='IDR', @stamp_user='developer13'
*/
BEGIN
	SET NOCOUNT ON
	
	------------
	DECLARE @result_code INT, @error_message VARCHAR(100)
	
	SET @currency = CASE WHEN @currency_code <> '' THEN @currency_code ELSE @currency END
	SET @currency = CASE @currency WHEN '' THEN '%'	ELSE @currency END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT pg_id, pg_name
	FROM dbo.master_payment_gateway WITH(NOLOCK) 
	WHERE currency LIKE @currency
	GROUP BY pg_id, pg_name
	ORDER BY pg_name
END
GO
/****** Object:  StoredProcedure [dbo].[spComboPaymentGatewayPool]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboPaymentGatewayPool]
(
	@currency varchar(10),
	@stamp_user varchar(20)
)
AS
/*
	
	EXEC spComboPaymentGatewayPool @currency='', @stamp_user=''
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
		
	SET @currency = CASE WHEN @currency = '' THEN '%' ELSE @currency END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
	
	SELECT pg_pool_id
	FROM dbo.payment_gateway_merchant_list WITH (NOLOCK)
	WHERE pg_merchant_currency LIKE @currency
	GROUP BY pg_pool_id
	ORDER BY pg_pool_id
	
END
GO
/****** Object:  StoredProcedure [dbo].[spComboPGMerchant]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboPGMerchant]
(
	@currency varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	
	EXEC spComboPGMerchant @currency='', @stamp_user='developer13'
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(100)

	SET @currency = CASE WHEN @currency = '' THEN '%' ELSE @currency END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT pg_merchant_id, pg_id, pg_name
	FROM dbo.payment_gateway_merchant_list WITH (NOLOCK)
	WHERE pg_merchant_currency LIKE @currency
	GROUP BY pg_merchant_id, pg_id, pg_name
	ORDER BY pg_id, pg_merchant_id
END

GO
/****** Object:  StoredProcedure [dbo].[spComboSection]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboSection]
AS
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(8000)

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT section_id, section_name	
	FROM dbo.master_section WITH(NOLOCK)
	ORDER BY section_name
END
GO
/****** Object:  StoredProcedure [dbo].[spComboUserBank]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboUserBank]
(
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Page: Combo Bank (user merchant)
	Desc: dari user, bisa access bank apa aja, 1 user multi merchant

	rf_param spComboUserBank

	EXEC spComboUserBank @stamp_user=''

	master_user
	merchant_list
*/
	SET NOCOUNT ON

	DECLARE @result_code INT, @error_message VARCHAR(8000)

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT bank_code, bank_name, bank_display_name, currency
	FROM dbo.master_bank WITH(NOLOCK)
	WHERE status_active = 'Y'
	ORDER BY bank_code
END
GO
/****** Object:  StoredProcedure [dbo].[spComboUserCurrency]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboUserCurrency]
(
	@merchant_code varchar(20),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Page: Combo Currency (user merchant)
	Desc: dari user, bisa access currency apa aja, 1 user multi merchant

	rf_param spComboUserCurrency

	EXEC spComboUserCurrency @merchant_code='', @stamp_user='developer13'
*/
	SET NOCOUNT ON

	DECLARE @result_code INT, @error_message VARCHAR(8000)

	CREATE TABLE #tbl_currency (
		currency varchar(10)
	)

	INSERT INTO #tbl_currency (currency)
	SELECT currency
	FROM dbo.fnUserMerchant(@stamp_user, '', '', '', '', '', @merchant_code)
	GROUP BY currency

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT c.currency, c.currency_name
	FROM dbo.master_currency c WITH (NOLOCK) 
	INNER JOIN #tbl_currency tbl WITH (NOLOCK) ON c.currency = tbl.currency
	WHERE c.status_active = 'Y'
	ORDER BY c.currency
END
GO
/****** Object:  StoredProcedure [dbo].[spComboUserLevel]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboUserLevel]
(
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > User

	EXEC spComboUserLevel @stamp_user=''
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(100)

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT level_id = 'D', level_name = 'Developer', order_by = 1
	UNION
	SELECT level_id = 'O', level_name = 'Operator', order_by = 2
	UNION
	SELECT level_id = 'M', level_name = 'Merchant', order_by = 3
	ORDER BY order_by

END
GO
/****** Object:  StoredProcedure [dbo].[spComboUserMerchant]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboUserMerchant]
(
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Page: Combo Merchant (user merchant)
	Desc: dari user, bisa access merchant apa aja

	rf_param spComboUserMerchant

	EXEC spComboUserMerchant @stamp_user=''

	master_user
	merchant_list
*/
	SET NOCOUNT ON

	DECLARE @result_code INT, @error_message VARCHAR(8000)

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT company_id, operator_id, merchant_group_id, merchant_id, merchant_name, currency, payment_channel_id
	FROM dbo.merchant_list WITH (NOLOCK)
	WHERE merchant_status = 'Y'
	ORDER BY merchant_name
END
GO
/****** Object:  StoredProcedure [dbo].[spComboUserMerchantCode]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboUserMerchantCode]
(
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Page: Combo Merchant (user merchant)
	Desc: dari user, bisa access merchant apa aja

	rf_param spComboUserMerchantCode

	EXEC spComboUserMerchantCode @stamp_user='developer13'

	master_user
	merchant_list
*/
	SET NOCOUNT ON

	DECLARE @result_code INT, @error_message VARCHAR(8000)

	CREATE TABLE #tbl_merchant (
		merchant_code varchar(20)
	)

	INSERT INTO #tbl_merchant (merchant_code)
	SELECT merchant_code
	FROM dbo.fnUserMerchant(@stamp_user, '', '', '', '', '', '')
	GROUP BY merchant_code

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
	
	SELECT m.company_id, m.operator_id, m.merchant_group_id, m.merchant_code, m.merchant_name
	FROM #tbl_merchant tbl WITH (NOLOCK)
	INNER JOIN dbo.merchant_master m WITH (NOLOCK) ON tbl.merchant_code = m.merchant_code
	GROUP BY m.company_id, m.operator_id, m.merchant_group_id, m.merchant_code, m.merchant_name
	ORDER BY m.merchant_code
END
GO
/****** Object:  StoredProcedure [dbo].[spComboUserPaymentChannel]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spComboUserPaymentChannel]
(
	@merchant_code varchar(20),
	@currency varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Page: Combo Payment Channel (user merchant)
	Desc: dari user, bisa access payment channel apa aja, 1 user multi merchant

	rf_param spComboUserPaymentChannel

	EXEC spComboUserPaymentChannel @merchant_code='', @currency='MYR', @stamp_user='developer13'
*/
	SET NOCOUNT ON

	DECLARE @result_code INT, @error_message VARCHAR(8000)

	--CREATE TABLE #tbl_channel (
	--	payment_channel_id varchar(20)
	--)

	--INSERT INTO #tbl_channel (payment_channel_id)

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	;WITH cte_channel
	AS
	(
		SELECT payment_channel_id
		FROM dbo.fnUserMerchant(@stamp_user, '', '', '', @currency, '', @merchant_code)
		GROUP BY payment_channel_id
	)

	SELECT c.channel_id, c.channel_name
	FROM dbo.master_payment_channel c WITH (NOLOCK) 
	INNER JOIN cte_channel tbl WITH (NOLOCK) ON c.channel_id = tbl.payment_channel_id
	WHERE c.status_active = 'Y'
	ORDER BY c.channel_id
END
GO
/****** Object:  StoredProcedure [dbo].[spDashboardMenuGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE     PROCEDURE [dbo].[spDashboardMenuGet]
(
	@user_guid varchar(20),
	@module_id varchar(10) = '' --DEV, OPR, MCG
)
AS
BEGIN
/*
	select top 100 * from dbo.master_user with (nolock)
	select * from master_operator
	EXEC spDashboardMenuGet @user_guid='E56C8C24F2B8427ABA3E' --DEV
*/
	SET NOCOUNT ON
	
	------------
	DECLARE @menu_list TABLE(menu_id varchar(10) PRIMARY KEY, section_id varchar(10));

	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@level varchar(1), @company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20)

	
	IF NOT EXISTS(SELECT user_guid FROM dbo.master_user WITH (NOLOCK) WHERE user_guid = @user_guid)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @company_id = company_id, @operator_id = operator_id, @merchant_group_id = merchant_group_id, @level = level_id from dbo.master_user WITH (NOLOCK) WHERE user_guid = @user_guid

	IF (@level = 'D')
	BEGIN

		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message

		--SET @module_id = CASE WHEN @module_id = '' THEN 'DEV' ELSE @module_id END
		SET @module_id = '%'

		SELECT mm.module_id, mo.module_name, mm.section_id, s.section_name, mm.menu_id, m.menu_name, m.page_source, mm.menu_order, 
			m.menu_name_id, m.menu_name_en, m.menu_name_ch, m.menu_name_km, m.menu_name_th, m.menu_name_tw, m.menu_name_vn, s.section_icon
		FROM dbo.master_module_menu mm WITH(NOLOCK) 
		INNER JOIN dbo.master_module mo ON mm.module_id = mo.module_id
		INNER JOIN dbo.master_menu m ON mm.menu_id = m.menu_id
		INNER JOIN dbo.master_module_section ms WITH(NOLOCK) ON mm.module_id = ms.module_id AND mm.section_id = ms.section_id  --order
		INNER JOIN dbo.master_section s WITH(NOLOCK) ON mm.section_id = s.section_id --name + icon
		WHERE mm.module_id LIKE @module_id
		ORDER BY mo.module_name, ms.section_order, mm.menu_order
	END
	ELSE IF (@level = 'O')
	BEGIN

		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message

		SELECT @module_id = module_id FROM dbo.master_operator WITH(NOLOCK) where company_id = @company_id AND operator_id = @operator_id

		SELECT mm.module_id, mo.module_name, mm.section_id, s.section_name, mm.menu_id, m.menu_name, m.page_source, mm.menu_order, 
			m.menu_name_id, m.menu_name_en, m.menu_name_ch, m.menu_name_km, m.menu_name_th, m.menu_name_tw, m.menu_name_vn, s.section_icon
		FROM dbo.master_module_menu mm WITH(NOLOCK) 
		INNER JOIN dbo.master_module mo ON mm.module_id = mo.module_id
		INNER JOIN dbo.master_menu m ON mm.menu_id = m.menu_id
		INNER JOIN dbo.master_module_section ms WITH(NOLOCK) ON mm.module_id = ms.module_id AND mm.section_id = ms.section_id  --order
		INNER JOIN dbo.master_section s WITH(NOLOCK) ON mm.section_id = s.section_id --name + icon
		WHERE mm.module_id LIKE @module_id
		ORDER BY mo.module_name, ms.section_order, mm.menu_order
	END
	ELSE IF (@level = 'M')
	BEGIN

		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message
		
		SELECT @module_id = module_id FROM dbo.master_merchant_group WITH(NOLOCK) where company_id = @company_id AND operator_id = @operator_id AND merchant_group_id = @merchant_group_id

		SELECT mm.module_id, mo.module_name, mm.section_id, s.section_name, mm.menu_id, m.menu_name, m.page_source, mm.menu_order, 
			m.menu_name_id, m.menu_name_en, m.menu_name_ch, m.menu_name_km, m.menu_name_th, m.menu_name_tw, m.menu_name_vn, s.section_icon
		FROM dbo.master_module_menu mm WITH(NOLOCK) 
		INNER JOIN dbo.master_module mo ON mm.module_id = mo.module_id
		INNER JOIN dbo.master_menu m ON mm.menu_id = m.menu_id
		INNER JOIN dbo.master_module_section ms WITH(NOLOCK) ON mm.module_id = ms.module_id AND mm.section_id = ms.section_id  --order
		INNER JOIN dbo.master_section s WITH(NOLOCK) ON mm.section_id = s.section_id --name + icon
		WHERE mm.module_id LIKE @module_id
		ORDER BY mo.module_name, ms.section_order, mm.menu_order
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spGatewayAdjustmentAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spGatewayAdjustmentAdd]
(
	@operator_id varchar(2),
	@pg_merchant_id varchar(50),
	@currency varchar(10),
	@adjustment_type varchar(20), --FUNDIN, FUNDOUT
	@adjustment_action varchar(20), --ADD, SUBTRACT
	@adjustment_amount decimal(18,4),
	@adjustment_note nvarchar(500),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Gateway > Gateway Adjustment

	rf_param spGatewayAdjustmentAdd
	rf_column_list gateway_adjustment_list,'@type'
	
	EXEC spGatewayAdjustmentAdd @operator_id='', @merchant_code='Merchant Global', @currency='IDR', @adjustment_type='FUNDIN', @adjustment_action='ADD', @adjustment_amount=123000.00, @adjustment_note='Test Fund In Add', @stamp_user='developer13'

	select * from gateway_adjustment_list

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@company_id varchar(3), 
			@gateway_balance_before decimal(18,4), @gateway_balance_after decimal(18,4), @gateway_amount_debit decimal(18,4), @gateway_amount_credit decimal(18,4),
			@adjustment_id varchar(50), @generator_no bigint, @getdate datetime,
			@transaction_note varchar(500), @statement_type varchar(20),
			@pg_balance_id varchar(50), @pg_id varchar(50), @pg_name nvarchar(200)
	
	IF @adjustment_type NOT IN ('FUNDIN', 'FUNDOUT')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Adjustment Group invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @adjustment_action NOT IN ('ADD', 'SUBTRACT')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Adjustment Type invalid'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF NOT EXISTS(SELECT pg_merchant_id FROM dbo.payment_gateway_balance WITH (NOLOCK) WHERE pg_merchant_id = @pg_merchant_id AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'PGMerchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT operator_id FROM dbo.master_operator WITH (NOLOCK) WHERE operator_id = @operator_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Operator not found'
		SELECT @result_code, @error_message
		RETURN
	END
	-----------------------------------------------------------------------------------------------------------

	SELECT	@company_id = company_id, 
			@operator_id = operator_id
	FROM dbo.master_operator WITH (NOLOCK)
	WHERE operator_id = @operator_id
	
	SELECT	@pg_balance_id = pg_balance_id,
			@pg_id = pg_id,
			@pg_name = pg_name
	FROM dbo.payment_gateway_balance WITH (NOLOCK)
	WHERE pg_merchant_id = @pg_merchant_id
	AND currency = @currency

	SET @transaction_note = 'Adjustment '+CASE @adjustment_type WHEN 'FUNDIN' THEN 'Fund In' ELSE 'Fund Out' END+' '+CASE @adjustment_action WHEN 'ADD' THEN 'Add' ELSE 'Subtract' END

	SET @gateway_amount_debit = CASE @adjustment_action WHEN 'ADD' THEN 0.00 ELSE @adjustment_amount END
	SET @gateway_amount_credit = CASE @adjustment_action WHEN 'ADD' THEN @adjustment_amount ELSE 0.00 END
	SET @statement_type = CASE @adjustment_type WHEN 'FUNDIN' THEN 'ADJFI' ELSE 'ADJFO' END

	-----------------------------------------------------------------------------

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()
		
		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @adjustment_id = generator_code + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'PGADJ'
		AND currency = @currency

		INSERT INTO dbo.gateway_adjustment_list(adjustment_id, adjustment_date, company_id, operator_id, pg_merchant_id, pg_balance_id, currency, pg_id, pg_name,
			adjustment_type, adjustment_action, adjustment_amount, adjustment_debit, adjustment_credit, process_date, process_status, adjustment_note, create_date)
		VALUES(@adjustment_id, @getdate, @company_id, @operator_id, @pg_merchant_id, @pg_balance_id, @currency, @pg_id, @pg_name,
			@adjustment_type, @adjustment_action, @adjustment_amount, @gateway_amount_debit, @gateway_amount_credit, @getdate, 'SUCCESS', @adjustment_note, @getdate)

		---------------------------------------------------------------------------------------------------------

		IF @currency = 'IDR'
		BEGIN	
			UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_IDR'
		END
		ELSE IF @currency = 'VND'
		BEGIN	
			UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_VND'
		END
		ELSE IF @currency = 'THB'
		BEGIN	
			UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_THB'
		END
		ELSE IF @currency = 'MYR'
		BEGIN	
			UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_MYR'
		END

		UPDATE dbo.payment_gateway_balance
		SET @gateway_balance_before = pg_balance_fundin + pg_balance_fundout,
			@gateway_balance_after = @gateway_balance_before + @gateway_amount_credit - @gateway_amount_debit,
			pg_balance_fundin = CASE @adjustment_type WHEN 'FUNDIN' THEN pg_balance_fundin + @gateway_amount_credit - @gateway_amount_debit ELSE pg_balance_fundin END,
			pg_balance_fundout = CASE @adjustment_type WHEN 'FUNDOUT' THEN pg_balance_fundout + @gateway_amount_credit - @gateway_amount_debit ELSE pg_balance_fundout END,
			date_updated = @getdate
		WHERE pg_balance_id = @pg_balance_id

		IF @currency = 'IDR'
		BEGIN
			INSERT INTO dbo.gateway_statement_idr(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_id_vendor, payment_channel_name, pg_merchant_id, pg_balance_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, gateway_balance_before, gateway_amount_debit, gateway_amount_credit, gateway_balance_after, bank_fee)
			VALUES(@statement_type, 'ADJ', @adjustment_id, @adjustment_id
				, '', '', '', @adjustment_amount, @getdate, '', @currency
				, '', '', '', '', '', ''
				, '', '', ''
				, @pg_id, @pg_name, 'SUCCESS', @getdate, '', '', '', @pg_merchant_id, @pg_balance_id
				, @adjustment_note, @getdate, 0.00, 0.00, ''
				, @gateway_balance_before, @gateway_amount_debit, @gateway_amount_credit, @gateway_balance_after, 0.00)
		END
		ELSE IF @currency = 'VND'
		BEGIN
			INSERT INTO dbo.gateway_statement_vnd(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_id_vendor, payment_channel_name, pg_merchant_id, pg_balance_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, gateway_balance_before, gateway_amount_debit, gateway_amount_credit, gateway_balance_after, bank_fee)
			VALUES(@statement_type, 'ADJ', @adjustment_id, @adjustment_id
				, '', '', '', @adjustment_amount, @getdate, '', @currency
				, '', '', '', '', '', ''
				, '', '', ''
				, @pg_id, @pg_name, 'SUCCESS', @getdate, '', '', '', @pg_merchant_id, @pg_balance_id
				, @adjustment_note, @getdate, 0.00, 0.00, ''
				, @gateway_balance_before, @gateway_amount_debit, @gateway_amount_credit, @gateway_balance_after, 0.00)
		END
		ELSE IF @currency = 'THB'
		BEGIN
			INSERT INTO dbo.gateway_statement_thb(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_id_vendor, payment_channel_name, pg_merchant_id, pg_balance_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, gateway_balance_before, gateway_amount_debit, gateway_amount_credit, gateway_balance_after, bank_fee)
			VALUES(@statement_type, 'ADJ', @adjustment_id, @adjustment_id
				, '', '', '', @adjustment_amount, @getdate, '', @currency
				, '', '', '', '', '', ''
				, '', '', ''
				, @pg_id, @pg_name, 'SUCCESS', @getdate, '', '', '', @pg_merchant_id, @pg_balance_id
				, @adjustment_note, @getdate, 0.00, 0.00, ''
				, @gateway_balance_before, @gateway_amount_debit, @gateway_amount_credit, @gateway_balance_after, 0.00)
		END
		ELSE IF @currency = 'MYR'
		BEGIN
			INSERT INTO dbo.gateway_statement_myr(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_id_vendor, payment_channel_name, pg_merchant_id, pg_balance_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, gateway_balance_before, gateway_amount_debit, gateway_amount_credit, gateway_balance_after, bank_fee)
			VALUES(@statement_type, 'ADJ', @adjustment_id, @adjustment_id
				, '', '', '', @adjustment_amount, @getdate, '', @currency
				, '', '', '', '', '', ''
				, '', '', ''
				, @pg_id, @pg_name, 'SUCCESS', @getdate, '', '', '', @pg_merchant_id, @pg_balance_id
				, @adjustment_note, @getdate, 0.00, 0.00, ''
				, @gateway_balance_before, @gateway_amount_debit, @gateway_amount_credit, @gateway_balance_after, 0.00)
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spGatewayAdjustmentList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spGatewayAdjustmentList]
(
	@date_from datetime,
	@date_to datetime,
	@pg_merchant_id varchar(50),
	@currency varchar(10),
	@adjustment_type varchar(20), --'', FUND IN, FUND OUT
	@adjustment_action varchar(20), --'', ADD, SUBTRACT
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Gateway > Gateway Adjustment

	rf_param spGatewayAdjustmentList

	EXEC spGatewayAdjustmentList @date_from='2020-01-01', @date_to='2020-01-01', @pg_merchant_id='', @currency='IDR', @adjustment_type='', @adjustment_action='', 
		@page=1, @page_size=50, @stamp_user='developer13'

	select * from gateway_adjustment_list
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@total_rows int, @top int
	
	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997'),
		@adjustment_type = CASE WHEN @adjustment_type = '' THEN '%' ELSE @adjustment_type END,
		@adjustment_action = CASE WHEN @adjustment_action = '' THEN '%' ELSE @adjustment_action END

	SELECT 
		@total_rows = 0,
		@top = @page * @page_size

	------------------------------
	
	SELECT @total_rows = @total_rows + COUNT(1)
	FROM dbo.gateway_adjustment_list WITH (NOLOCK)
	WHERE adjustment_date BETWEEN @date_from AND @date_to
	AND adjustment_type LIKE @adjustment_type
	AND adjustment_action LIKE @adjustment_action

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows
	
	SELECT adjustment_id, adjustment_date, company_id, operator_id, pg_merchant_id, pg_balance_id, 
		pg_id, pg_name, adjustment_type, adjustment_action,
		currency, adjustment_amount, adjustment_debit, adjustment_credit, 
		adjustment_note
	FROM dbo.gateway_adjustment_list m WITH (NOLOCK)
	WHERE adjustment_date BETWEEN @date_from AND @date_to
	AND adjustment_type LIKE @adjustment_type
	AND adjustment_action LIKE @adjustment_action
	ORDER BY row_no DESC
	OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY		
END
GO
/****** Object:  StoredProcedure [dbo].[spGatewayBalanceList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spGatewayBalanceList]
(
	@currency varchar(10),
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Operator > Gateway > Gateway Balance

	EXEC PacmanMainDB.dbo.spGatewayBalanceList @currency='MYR', @page=1, @page_size=25, @stamp_user='developer13'
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(100),
			@total_rows int
	
	SELECT @currency = CASE WHEN @currency = '' THEN '%' ELSE @currency END

	SELECT @total_rows = COUNT(1)
	FROM dbo.master_bank WITH (NOLOCK) 
	WHERE currency LIKE @currency
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows
	
	SELECT currency, pg_balance_id, pg_id, pg_name, pg_merchant_id, pg_balance_fundin, pg_balance_fundout
	FROM dbo.payment_gateway_balance WITH (NOLOCK)
	WHERE currency LIKE @currency
	ORDER BY currency, pg_id
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spGatewayPoolAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spGatewayPoolAdd]
(
	@operator_id varchar(2),
	@pg_pool_id varchar(50),
	@pg_pool_name varchar(200),
	@currency varchar(3),
	@payment_channel_id varchar(20),
	@stamp_user varchar(20)
)
AS
/*
	Page : Operator > Gateway Pool > [Add]
	
	EXEC PacmanMainDB.dbo.spGatewayPoolAdd @operator_id='', @pg_pool_id='', @pg_pool_name, @currency, @payment_channel_id, @stamp_user
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	BEGIN TRY
		BEGIN TRANSACTION

		IF NOT EXISTS(SELECT pg_pool_id FROM dbo.master_payment_gateway_pool WITH (NOLOCK) WHERE pg_pool_id = @pg_pool_id)
		BEGIN
			INSERT INTO dbo.master_payment_gateway_pool(pg_pool_id, pg_pool_name, pg_pool_status, currency, payment_channel_id)
			VALUES(@pg_pool_id, @pg_pool_name, 'Y', @currency, @payment_channel_id)
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code=39999, @error_message=ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code=1, @error_message=''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spGatewayPoolDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spGatewayPoolDelete]
(
	@operator_id varchar(2),
	@pg_pool_id varchar(50),
	@stamp_user varchar(20)
)
AS
/*
	Page : Operator > Gateway Pool > [Add]
	
	EXEC PacmanMainDB.dbo.spGatewayPoolDelete @operator_id='', @pg_pool_id='', @stamp_user=''
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@getdate datetime
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	BEGIN TRY
		BEGIN TRANSACTION

		DELETE FROM dbo.master_payment_gateway_pool WHERE pg_pool_id = @pg_pool_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code=39999, @error_message=ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code=1, @error_message=''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spGatewayPoolList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spGatewayPoolList]
(
	@page int,
	@page_size int,
	@operator_id varchar(2),
	@currency varchar(3),
	@stamp_user varchar(20)
)
AS
/*
	Page : Operator > Gateway Pool
	
	EXEC PacmanMainDB.dbo.spGatewayPoolList @page=1, @page_size=50, @operator_id='', @currency='', @stamp_user='developer13'
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@total_rows int
	
	SELECT	@operator_id = CASE @operator_id WHEN '' THEN '%' ELSE @operator_id END,
			@currency = CASE @currency WHEN '' THEN '%' ELSE @currency END
	
	SELECT @total_rows = COUNT(1)
	FROM dbo.master_payment_gateway_pool WITH (NOLOCK) 
	WHERE currency LIKE @currency
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows

	SELECT pg_pool_id, pg_pool_name, currency, payment_channel_id
	FROM dbo.master_payment_gateway_pool WITH (NOLOCK)
	WHERE currency LIKE @currency
	ORDER BY pg_pool_id
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spGatewayPoolMerchantAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spGatewayPoolMerchantAdd]
(
	@pg_pool_id varchar(50),
	@merchant_id varchar(10),
	@stamp_user varchar(20)
)
AS
/*
	Page : Operator > Gateway Pool > [Add]
	
	EXEC PacmanMainDB.dbo.spGatewayPoolMerchantAdd @pg_pool_id='', @merchant_id='', @stamp_user=''
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	BEGIN TRY
		BEGIN TRANSACTION

		UPDATE dbo.merchant_setting
		SET pg_pool_id = @pg_pool_id
		WHERE merchant_id = @merchant_id
	
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code=39999, @error_message=ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code=1, @error_message=''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spGatewayPoolMerchantDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spGatewayPoolMerchantDelete]
(
	@pg_pool_id varchar(50),
	@merchant_id varchar(10),
	@stamp_user varchar(20)
)
AS
/*
	Page : Operator > Gateway Pool > [Delete]
	
	EXEC PacmanMainDB.dbo.spGatewayPoolMerchantDelete @pg_pool_id='', @merchant_id='', @stamp_user=''
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	BEGIN TRY
		BEGIN TRANSACTION

		UPDATE dbo.merchant_setting
		SET pg_pool_id = ''
		WHERE merchant_id = @merchant_id
	
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code=39999, @error_message=ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code=1, @error_message=''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spGatewayPoolMerchantEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spGatewayPoolMerchantEdit]
(
	@pg_pool_id varchar(50),
	@pg_pool_seq int,
	@pg_pool_weight decimal(18,4), --0-100
	@fundin_min decimal(18,4), 
	@fundin_max decimal(18,4), 
	@fundin_total_day decimal(18,4), 
	@fundout_min decimal(18,4), 
	@fundout_max decimal(18,4), 
	@fundout_total_day decimal(18,4),
	@stamp_user varchar(20)
)
AS
/*
	Page : Operator > Gateway Pool
	
	rf_param spGatewayPoolMerchantEdit
	
	EXEC spGatewayPoolMerchantEdit @pg_pool_id='DEF_POOL_IDR_IB', @pg_pool_seq=0, @pg_pool_weight=0.00, 
		@fundin_min=0.00, @fundin_max=0.00, @fundin_total_day=0.00, @fundout_min=0.00, @fundout_max=0.00, @fundout_total_day=0.00, @stamp_user='developer13'

*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime
	

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		UPDATE dbo.payment_gateway_merchant_list
		SET pg_pool_weight = @pg_pool_weight,
			date_updated = @getdate
		WHERE pg_pool_id = @pg_pool_id
		AND pg_pool_seq = @pg_pool_seq 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spGatewayPoolMerchantList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spGatewayPoolMerchantList]
(
	@pg_pool_id varchar(50),
	@stamp_user varchar(20)
)
AS
/*
	Page : Operator > Gateway Pool
	
	EXEC PacmanMainDB.dbo.spGatewayPoolMerchantList @pg_pool_id='DEF_POOL_IDR_IB', @stamp_user='developer13'
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@operator_id varchar(2), @currency varchar(3), @payment_channel_id varchar(20)
	
	SELECT @currency = currency, @payment_channel_id = payment_channel_id
	FROM dbo.master_payment_gateway_pool WITH (NOLOCK)
	WHERE pg_pool_id = @pg_pool_id

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	
	SELECT merchant_id, merchant_name, currency, selected = 'Y'
	FROM dbo.merchant_setting WITH (NOLOCK)
	WHERE pg_pool_id = @pg_pool_id
	
	UNION ALL

	SELECT m.merchant_id, m.merchant_name, m.currency, selected = 'N'
	FROM dbo.merchant_list m WITH (NOLOCK)
	LEFT JOIN dbo.merchant_setting s WITH (NOLOCK) ON m.merchant_id = s.merchant_id
	WHERE s.pg_pool_id = ''
	--AND m.operator_id = @operator_id
	AND m.currency = @currency
	AND m.payment_channel_id = @payment_channel_id
	AND m.merchant_status = 'Y'
	ORDER BY selected DESC, merchant_name
END
GO
/****** Object:  StoredProcedure [dbo].[spGatewayPoolPGMerchantList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spGatewayPoolPGMerchantList]
(
	@pg_pool_id varchar(50),
	@stamp_user varchar(20)
)
AS
/*
	Page : Operator > Gateway Pool
	
	EXEC PacmanMainDB.dbo.spGatewayPoolPGMerchantList @pg_pool_id='DEF_POOL_IDR_IB', @stamp_user='developer13'
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@operator_id varchar(2), @currency varchar(3), @payment_channel_id varchar(20)
	
	SELECT @currency = currency, @payment_channel_id = payment_channel_id
	FROM dbo.master_payment_gateway_pool WITH (NOLOCK)
	WHERE pg_pool_id = @pg_pool_id

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT pg_pool_id, pg_pool_seq, pg_merchant_id, pg_merchant_currency, pg_id, pg_name, pg_merchant_payment_channel, pg_merchant_payment_channel_vendor, pg_pool_weight, 
			fundin_min, fundin_max, fundin_total_day,
			fundout_min, fundout_max, fundout_total_day
	FROM dbo.payment_gateway_merchant_list WITH (NOLOCK)
	WHERE pg_pool_id = @pg_pool_id
	ORDER BY pg_pool_seq
END
GO
/****** Object:  StoredProcedure [dbo].[spGenerateRandomString]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
[dbo].[spGenerateRandomString] 11
3C08D87801
*/

CREATE   PROCEDURE [dbo].[spGenerateRandomString]
(
	@len int
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @retVal varchar(32), @random_string VARCHAR(36)

	SELECT @retVal = ''

	IF ((@len > 0) AND (@len <33))
	BEGIN
		SELECT @random_string = CONVERT(varchar(255), NEWID())
		SELECT @random_string = REPLACE(@random_string, '-', '')

		SELECT @retVal = SUBSTRING(@random_string,0, @len)
	END

	SELECT @retVal
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterAuthorizationAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterAuthorizationAdd]
(
	@authorization_id varchar(10),
	@authorization_name varchar(50),
	@menu_id varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*

	rf_param spMasterAuthorizationAdd

	EXEC spMasterAuthorizationAdd @authorization_id='XX1', @authorization_name='Test Add', @menu_id='', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime

	IF @authorization_name = '' OR @authorization_id = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Input'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT authorization_id FROM dbo.master_authorization WITH (NOLOCK) WHERE authorization_id = @authorization_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Authrorization already exists'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @menu_id <> '' AND NOT EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		INSERT INTO dbo.master_authorization(authorization_id, authorization_name, menu_id, status_active, create_date)
		VALUES(@authorization_id, @authorization_name, @menu_id, 'Y', @getdate)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterAuthorizationDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterAuthorizationDelete]
(
	@authorization_id varchar(10),
	@authorization_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*

	rf_param spMasterAuthorizationDelete

	EXEC spMasterAuthorizationDelete @authorization_id='XX1', @authorization_name='Test Add', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF NOT EXISTS(SELECT authorization_id FROM dbo.master_authorization WITH (NOLOCK) WHERE authorization_id = @authorization_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Authrorization already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT authorization_id FROM dbo.master_module_authorization WITH (NOLOCK) WHERE authorization_id = @authorization_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Authrorization used in Module'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT authorization_id FROM dbo.user_group_authorization WITH (NOLOCK) WHERE authorization_id = @authorization_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Authrorization used in User Group'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION

		DELETE FROM dbo.master_authorization WHERE authorization_id = @authorization_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterAuthorizationEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterAuthorizationEdit]
(
	@authorization_id varchar(10),
	@authorization_name varchar(50),
	@menu_id varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*

	select * from master_authorization
	
	rf_param spMasterAuthorizationEdit

	EXEC spMasterAuthorizationEdit @authorization_id='XX1', @authorization_name='Test Edit', @menu_id='', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @error_code int, @error_message varchar(100)
			
	IF @authorization_name = ''
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Name cannot empty'
		SELECT @error_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT authorization_id FROM dbo.master_authorization WITH (NOLOCK) WHERE authorization_id = @authorization_id)
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Authorization not found'
		SELECT @error_code, @error_message
		RETURN
	END

	IF @menu_id <> '' AND NOT EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Menu not found'
		SELECT @error_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.master_authorization
		SET	authorization_name = @authorization_name,
			menu_id = @menu_id
		WHERE authorization_id = @authorization_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @error_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @error_code, @error_message
		RETURN
	END CATCH

	SELECT @error_code = 1, @error_message = ''
	SELECT @error_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterAuthorizationEditStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterAuthorizationEditStatus]
(
	@authorization_id varchar(10),
	@authorization_name varchar(50), --graylog
	@type varchar(10), -- ACTIVE
	@status_active varchar(1),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	select * from master_authorization

	EXEC spMasterAuthorizationEditStatus @authorization_id='XX1', @authorization_name='', @type='ACTIVE', @status_active='N', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @error_code INT, @error_message VARCHAR(8000)

	IF @type NOT IN ('ACTIVE')
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Invalid Type'
		SELECT @error_code, @error_message
		RETURN
	END

	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Status invalid'
		SELECT @error_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT authorization_id FROM dbo.master_authorization WITH (NOLOCK) WHERE authorization_id = @authorization_id)
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Authorization not found'
		SELECT @error_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION

		IF(@type = 'ACTIVE')
		BEGIN
			UPDATE dbo.master_authorization
			SET	status_active = @status_active
			WHERE authorization_id = @authorization_id
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @error_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @error_code, @error_message
		RETURN
	END CATCH

	SELECT @error_code = 1, @error_message = ''
	SELECT @error_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterAuthorizationList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterAuthorizationList]
(
	@authorization_name varchar(50),
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
/*
	
	EXEC spMasterAuthorizationList @authorization_name='', @page=1, @page_size=50, @stamp_user='developer13'
*/
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@total_rows int
	
	SET @authorization_name = CASE @authorization_name WHEN '' THEN '%' ELSE '%'+@authorization_name+'%' END

	SELECT @total_rows = COUNT(1)
	FROM dbo.master_authorization WITH (NOLOCK) 
	WHERE authorization_name LIKE @authorization_name

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows

	;WITH cte_authorization_used
	AS
	(
		SELECT authorization_id FROM dbo.master_module_authorization WITH (NOLOCK) GROUP BY authorization_id
		UNION 
		SELECT authorization_id FROM dbo.user_group_authorization WITH (NOLOCK) GROUP BY authorization_id
	)

	SELECT ma.authorization_id, ma.authorization_name, ma.menu_id, menu_name = ISNULL(mn.menu_name,''), ma.status_active,
		isShowDelete = CASE WHEN c.authorization_id IS NULL THEN 'Y' ELSE 'N' END
	FROM dbo.master_authorization ma WITH (NOLOCK) 
	LEFT JOIN dbo.master_menu mn WITH (NOLOCK) ON ma.menu_id = mn.menu_id
	LEFT JOIN cte_authorization_used c ON ma.authorization_id = c.authorization_id
	WHERE ma.authorization_name LIKE @authorization_name
	ORDER BY ma.authorization_id
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterBankAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterBankAdd]
(
	@bank_code varchar(10),
	@currency varchar(10),
	@bank_name nvarchar(50),
	@bank_display_name nvarchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Bank

	select * from dbo.master_bank with (nolock) order by currency, bank_code

	EXEC spMasterBankAdd @bank_code='XXX', @currency='VND', @bank_name='Bank X', @bank_display_name='XXX', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@getdate datetime

	IF @bank_code = '' OR @currency = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameters'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS (SELECT currency FROM dbo.master_currency WITH (NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	SET @bank_display_name = CASE WHEN @bank_display_name = '' THEN @bank_code ELSE @bank_display_name END

	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		IF NOT EXISTS(SELECT bank_code FROM dbo.master_bank WITH (NOLOCK) WHERE bank_code = @bank_code)
		BEGIN
			INSERT INTO dbo.master_bank(bank_code, bank_name, bank_display_name, currency, status_active, date_created, legend_color)
			VALUES(@bank_code, @bank_name, @bank_display_name, '', 'Y', @getdate, '')
		END

		IF NOT EXISTS(SELECT bank_code FROM dbo.master_bank_currency WITH (NOLOCK) WHERE bank_code = @bank_code AND currency = @currency)
		BEGIN
			INSERT INTO dbo.master_bank_currency(bank_code, currency, status_active, date_created, date_updated)
			VALUES(@bank_code, @currency, 'Y', @getdate, NULL)
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterBankCurrencyAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterBankCurrencyAdd]
(
	@bank_code varchar(10),
	@currency varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Bank

	select * from dbo.master_bank with (nolock)

	EXEC spMasterBankCurrencyAdd @bank_code='BAY', @currency='', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime
	
	IF NOT EXISTS(SELECT bank_code FROM dbo.master_bank WITH (NOLOCK) WHERE bank_code = @bank_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Bank Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT currency FROM dbo.master_currency WITH (NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------------------------------

	IF EXISTS(SELECT bank_code FROM dbo.master_bank_currency WITH (NOLOCK) WHERE bank_code = @bank_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Currency already add'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		INSERT INTO dbo.master_bank_currency(bank_code, currency, status_active, date_created)
		VALUES(@bank_code, @currency, 'Y', @getdate)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterBankCurrencyDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterBankCurrencyDelete]
(
	@bank_code varchar(10),
	@currency varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Bank

	rf_param spMasterBankCurrencyDelete

	EXEC spMasterBankCurrencyDelete @bank_code='BAY', @currency='IDR', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	IF NOT EXISTS(SELECT bank_code FROM dbo.master_bank_currency WITH (NOLOCK) WHERE bank_code = @bank_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Currency already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT bank_code FROM dbo.master_payment_gateway_fundin_bank WITH (NOLOCK) WHERE bank_code = @bank_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency is used by Fund In Bank'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT bank_code FROM dbo.master_payment_gateway_fundout_bank WITH (NOLOCK) WHERE bank_code = @bank_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency is used by Fund Out Bank'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION

		DELETE FROM dbo.master_bank_currency WHERE bank_code = @bank_code AND currency = @currency

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterBankCurrencyList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterBankCurrencyList]
(
	@bank_code varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Bank

	select * from dbo.master_bank with (nolock)

	EXEC spMasterBankCurrencyList @bank_code='BAY', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(100)
	
	CREATE TABLE #tbl_fundin
	(
		currency varchar(10),
		gateway_list varchar(4000)
	)
	
	;WITH cte_fundin
	AS
	(
		SELECT currency, pg_id, payment_channel_id = payment_channel_id+'-'+payment_channel_id_vendor
		FROM dbo.master_payment_gateway_fundin_bank WITH (NOLOCK) 
		WHERE bank_code = @bank_code
	), cte_fundin_gateway
	AS
	(
		SELECT currency, pg_id, payment_channel_list = STUFF((SELECT ', '+payment_channel_id FROM cte_fundin c2 
			WHERE c1.currency = c2.currency AND c1.pg_id = c2.pg_id ORDER BY payment_channel_id FOR XML PATH ('')), 1, 2, '') 
		FROM cte_fundin c1
		GROUP BY currency, pg_id
	)

	INSERT INTO #tbl_fundin(currency, gateway_list)
	SELECT currency, gateway_list = STUFF((SELECT ', '+pg_id+' ('+payment_channel_list+')\n' FROM cte_fundin_gateway c2 
		WHERE c1.currency = c2.currency ORDER BY pg_id FOR XML PATH ('')), 1, 2, '') 
	FROM cte_fundin_gateway c1
	GROUP BY currency

	----------------------------------------------------------

	CREATE TABLE #tbl_fundout
	(
		currency varchar(10),
		gateway_list varchar(4000)
	)

	;WITH cte_fundout
	AS
	(
		SELECT currency, pg_id, payment_channel_id FROM dbo.master_payment_gateway_fundout_bank WITH (NOLOCK) WHERE bank_code = @bank_code
	), cte_fundout_gateway
	AS
	(
		SELECT currency, pg_id, payment_channel_list = STUFF((SELECT ', '+payment_channel_id FROM cte_fundout c2 
			WHERE c1.currency = c2.currency AND c1.pg_id = c2.pg_id ORDER BY payment_channel_id FOR XML PATH ('')), 1, 2, '') 
		FROM cte_fundout c1
		GROUP BY currency, pg_id
	)

	INSERT INTO #tbl_fundout(currency, gateway_list)
	SELECT currency, gateway_list = STUFF((SELECT ', '+pg_id+' ('+payment_channel_list+')\n' FROM cte_fundout_gateway c2 
		WHERE c1.currency = c2.currency ORDER BY pg_id FOR XML PATH ('')), 1, 2, '') 
	FROM cte_fundout_gateway c1
	GROUP BY currency

	----------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	--Currency
	SELECT mc.currency, fundin_gateway_list = ISNULL(fi.gateway_list,''),
		fundout_gateway_list = ISNULL(fo.gateway_list,''),
		status_active = mc.status_active,
		selected = 'Y'
	FROM dbo.master_bank_currency mc WITH (NOLOCK)
	LEFT JOIN #tbl_fundin fi WITH (NOLOCK) ON mc.currency = fi.currency
	LEFT JOIN #tbl_fundout fo WITH (NOLOCK) ON mc.currency = fo.currency
	WHERE mc.bank_code = @bank_code

	UNION ALL

	SELECT c.currency, fundin_gateway_list = ISNULL(fi.gateway_list,''),
		fundout_gateway_list = ISNULL(fo.gateway_list,''),
		status_active = 'N',
		selected = 'N'
	FROM dbo.master_currency c WITH (NOLOCK)
	LEFT JOIN dbo.master_bank_currency mc WITH (NOLOCK) ON mc.bank_code = @bank_code AND c.currency = mc.currency
	LEFT JOIN #tbl_fundin fi WITH (NOLOCK) ON c.currency = fi.currency
	LEFT JOIN #tbl_fundout fo WITH (NOLOCK) ON c.currency = fo.currency
	WHERE mc.currency IS NULL
	ORDER BY selected DESC, currency
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterBankCurrencyStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterBankCurrencyStatusActive]
(
	@bank_code varchar(10),
	@currency varchar(10),
	@status_active varchar(1), --Y/N
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Bank

	rf_param spMasterBankCurrencyDelete

	EXEC spMasterBankCurrencyDelete @bank_code='BAY', @currency='IDR', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT bank_code FROM dbo.master_bank_currency WITH (NOLOCK) WHERE bank_code = @bank_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Currency not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION

		UPDATE dbo.master_bank_currency
		SET status_active = @status_active
		WHERE bank_code = @bank_code 
		AND currency = @currency

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterBankDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterBankDelete]
(
	@bank_code varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Bank

	select * from dbo.master_bank with (nolock) order by currency, bank_code

	EXEC spMasterBankDelete @bank_code='XXX', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
		
	IF EXISTS(SELECT bank_code FROM dbo.master_payment_gateway_fundin_bank WITH (NOLOCK) WHERE bank_code = @bank_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Bank is used By Fund In Bank'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT bank_code FROM dbo.master_payment_gateway_fundout_bank WITH (NOLOCK) WHERE bank_code = @bank_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Bank is used By Fund Out Bank'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		DELETE FROM dbo.master_bank WHERE bank_code = @bank_code

		DELETE FROM dbo.master_bank_currency WHERE bank_code = @bank_code

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterBankEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterBankEdit]
(
	@bank_code varchar(10),
	@bank_name nvarchar(50),
	@bank_display_name nvarchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Bank

	select * from dbo.master_bank with (nolock) order by currency, bank_code

	EXEC spMasterBankEdit @bank_code='XXX', @bank_name='Bank X1', @bank_display_name='XXX', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF @bank_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Bank Name empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT bank_code FROM dbo.master_bank WITH (NOLOCK) WHERE bank_code = @bank_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Bank not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SET @bank_display_name = CASE WHEN @bank_display_name = '' THEN @bank_code ELSE @bank_display_name END

	------------------------------------------------------------
	
	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.master_bank
		SET	bank_name = @bank_name,
			bank_display_name = @bank_display_name,
			date_updated = dbo.fnGetDateGMT7()
		WHERE bank_code = @bank_code

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterBankList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterBankList]
(
	@currency varchar(10),
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Bank

	select * from dbo.master_bank with (nolock)

	EXEC PacmanMainDB.dbo.spMasterBankList @currency='MYR', @page=1, @page_size=25, @stamp_user='developer13'
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(100),
			@total_rows int
	
	----------------------------------------------------------

	CREATE TABLE #tbl_fundin
	(
		bank_code varchar(10),
		gateway_list varchar(4000)
	)
	
	;WITH cte_fundin
	AS
	(
		SELECT bank_code, pg_id, payment_channel_id = payment_channel_id+'-'+payment_channel_id_vendor 
		FROM dbo.master_payment_gateway_fundin_bank WITH (NOLOCK)
	), cte_fundin_gateway
	AS
	(
		SELECT bank_code, pg_id, payment_channel_list = STUFF((SELECT ', '+payment_channel_id FROM cte_fundin c2 
			WHERE c1.bank_code = c2.bank_code AND c1.pg_id = c2.pg_id ORDER BY payment_channel_id FOR XML PATH ('')), 1, 2, '') 
		FROM cte_fundin c1
		GROUP BY bank_code, pg_id
	)

	INSERT INTO #tbl_fundin(bank_code, gateway_list)
	SELECT bank_code, gateway_list = STUFF((SELECT ', '+pg_id+' ('+payment_channel_list+')\n' FROM cte_fundin_gateway c2 
		WHERE c1.bank_code = c2.bank_code ORDER BY pg_id FOR XML PATH ('')), 1, 2, '') 
	FROM cte_fundin_gateway c1
	GROUP BY bank_code

	----------------------------------------------------------

	CREATE TABLE #tbl_fundout
	(
		bank_code varchar(10),
		gateway_list varchar(4000)
	)

	;WITH cte_fundout
	AS
	(
		SELECT bank_code, pg_id, payment_channel_id = payment_channel_id
		FROM dbo.master_payment_gateway_fundout_bank WITH (NOLOCK)
	), cte_fundout_gateway
	AS
	(
		SELECT bank_code, pg_id, payment_channel_list = STUFF((SELECT ', '+payment_channel_id FROM cte_fundout c2 
			WHERE c1.bank_code = c2.bank_code AND c1.pg_id = c2.pg_id ORDER BY payment_channel_id FOR XML PATH ('')), 1, 2, '') 
		FROM cte_fundout c1
		GROUP BY bank_code, pg_id
	)

	INSERT INTO #tbl_fundout(bank_code, gateway_list)
	SELECT bank_code, gateway_list = STUFF((SELECT ', '+pg_id+' ('+payment_channel_list+')\n' FROM cte_fundout_gateway c2 
		WHERE c1.bank_code = c2.bank_code ORDER BY pg_id FOR XML PATH ('')), 1, 2, '') 
	FROM cte_fundout_gateway c1
	GROUP BY bank_code

	----------------------------------------------------------

	IF @currency = ''
	BEGIN
		CREATE TABLE #tbl_bank_currency
		(
			bank_code varchar(10),
			currency_list varchar(4000)
		)

		INSERT INTO #tbl_bank_currency(bank_code, currency_list)
		SELECT	bank_code, currency_list = STUFF((SELECT ', '+currency
					FROM dbo.master_bank_currency c2 WITH (NOLOCK) 
					WHERE c1.bank_code = c2.bank_code ORDER BY currency FOR XML PATH ('')), 1, 2, '') 
		FROM dbo.master_bank_currency c1 WITH (NOLOCK)

		--------------------------------------------------

		SELECT @total_rows = COUNT(1)
		FROM dbo.master_bank WITH (NOLOCK) 
	
		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message

		SELECT @total_rows

		;WITH cte_bank_used
		AS
		(
			SELECT bank_code FROM #tbl_fundin WITH (NOLOCK)
			UNION
			SELECT bank_code FROM #tbl_fundout WITH (NOLOCK)
		)

		SELECT b.bank_code, b.bank_name, b.bank_display_name, tb.currency_list, b.status_active, 
			show_delete = CASE WHEN cte.bank_code IS NOT NULL THEN 'N' ELSE 'Y' END,
			fundin_gateway_list = ISNULL(fi.gateway_list,''),
			fundout_gateway_list = ISNULL(fo.gateway_list,'')
		FROM dbo.master_bank b WITH (NOLOCK)
		LEFT JOIN cte_bank_used cte ON b.bank_code = cte.bank_code
		LEFT JOIN #tbl_bank_currency tb WITH (NOLOCK) ON b.bank_code = tb.bank_code
		LEFT JOIN #tbl_fundin fi WITH (NOLOCK) ON b.bank_code = fi.bank_code
		LEFT JOIN #tbl_fundout fo WITH (NOLOCK) ON b.bank_code = fo.bank_code
		ORDER BY b.bank_code
		OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
	END
	ELSE
	BEGIN		
		SELECT @total_rows = COUNT(1)
		FROM dbo.master_bank_currency WITH (NOLOCK)
		WHERE currency = @currency
	
		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message

		SELECT @total_rows

		;WITH cte_bank_used
		AS
		(
			SELECT bank_code FROM #tbl_fundin WITH (NOLOCK)
			UNION
			SELECT bank_code FROM #tbl_fundout WITH (NOLOCK)
		)

		SELECT mc.bank_code, 
			bank_name = ISNULL(b.bank_name, 'Corrupt Bank Currency'), 
			bank_display_name = ISNULL(b.bank_display_name,'Corrupt Bank Currency'), 
			mc.currency, 
			status_active = ISNULL(b.status_active,'N'), 
			show_delete = CASE WHEN cte.bank_code IS NOT NULL THEN 'N' ELSE 'Y' END,
			fundin_gateway_list = ISNULL(fi.gateway_list,''),
			fundout_gateway_list = ISNULL(fo.gateway_list,'')
		FROM dbo.master_bank_currency mc WITH (NOLOCK)
		LEFT JOIN dbo.master_bank b WITH (NOLOCK) ON mc.bank_code = b.bank_code
		LEFT JOIN cte_bank_used cte ON mc.bank_code = cte.bank_code
		LEFT JOIN #tbl_fundin fi WITH (NOLOCK) ON mc.bank_code = fi.bank_code
		LEFT JOIN #tbl_fundout fo WITH (NOLOCK) ON mc.bank_code = fo.bank_code
		WHERE mc.currency = @currency
		ORDER BY mc.bank_code
		OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterBankStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterBankStatusActive]
(
	@bank_code varchar(10),
	@status_active varchar(1), --Y/N
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Bank

	select * from dbo.master_bank with (nolock) order by currency, bank_code

	EXEC spMasterBankStatusActive @bank_code='XXX', @status_active='N', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT bank_code FROM dbo.master_bank WITH (NOLOCK) WHERE bank_code = @bank_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Bank not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.master_bank
		SET	status_active = @status_active,
			date_updated = dbo.fnGetDateGMT7()
		WHERE bank_code = @bank_code

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterCompanyAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterCompanyAdd]
(
	@company_id varchar(3),
	@company_name nvarchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Company 

	select * from master_company with (nolock)
	
	EXEC spMasterCompanyAdd @company_id='VTP', @company_name='VirtuePay', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF @company_id = '' OR @company_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameters'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT company_id FROM dbo.master_company WITH(NOLOCK) WHERE company_id = @company_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Company already exists'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO dbo.master_company(company_id, company_name, status_active, create_date)
		VALUES(@company_id, @company_name, 'Y', dbo.fnGetDateGMT7())

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterCompanyDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterCompanyDelete]
(
	@company_id varchar(3),
	@company_name nvarchar(50), --graylog
	@stamp_user VARCHAR(20)
)
AS
BEGIN
/*
	Developer > Master > Company
	
	select * from master_company with (nolock)

	EXEC spMasterCompanyDelete @company_id='VTP', @company_name='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF NOT EXISTS(SELECT company_id FROM dbo.master_company WITH (NOLOCK) WHERE company_id = @company_id)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Company deleted'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT company_id FROM dbo.master_user WITH (NOLOCK) WHERE company_id = @company_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Company has User'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		DELETE FROM dbo.master_company
		WHERE company_id = @company_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterCompanyEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterCompanyEdit]
(
	@company_id varchar(3),
	@company_name nvarchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Company
	
	select * from master_company with (nolock)

	EXEC spMasterCompanyEdit @company_id='VTP', @company_name='VirtuePay 1', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code int, @error_message varchar(1000),
			@company_name_old nvarchar(50)
			
	IF @company_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Company Name empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT company_id FROM dbo.master_company WITH (NOLOCK) WHERE company_id = @company_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Company not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @company_name_old = company_name FROM dbo.master_company WITH (NOLOCK) WHERE company_id = @company_id

	BEGIN TRY
		BEGIN TRANSACTION
	
		IF @company_name_old <> @company_name
		BEGIN
			UPDATE dbo.master_company SET company_name = @company_name WHERE company_id = @company_id
			UPDATE dbo.master_merchant_group SET company_name = @company_name WHERE company_id = @company_id
			UPDATE dbo.master_operator SET company_name = @company_name WHERE company_id = @company_id			
			--user_session
			--user_session_hist
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterCompanyEditStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterCompanyEditStatus]
(
	@company_id VARCHAR(3),
	@status_active VARCHAR(1)
)
AS
BEGIN
/*
	EXEC spMenuEditStatus @MenuID=1, @StatusActive='Y'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @error_code INT, @error_message VARCHAR(8000)

	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Status invalid'
		SELECT @error_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT company_id FROM dbo.master_company WITH (NOLOCK) WHERE company_id = @company_id)
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Company not found'
		SELECT @error_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
		
		UPDATE dbo.master_company
		SET	company_status = @status_active
		WHERE company_id = @company_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @error_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @error_code, @error_message
		RETURN
	END CATCH

	SELECT @error_code = 1, @error_message = 'Success'
	SELECT @error_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterCompanyList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterCompanyList]
(
	@stamp_user varchar(20)
)
AS
/*
	Developer > Master > Company 

	select * from master_company with (nolock)
	
	EXEC spMasterCompanyList @stamp_user=''
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
	
	;WITH cte_company_used
	AS
	(
		SELECT company_id FROM dbo.master_user WITH (NOLOCK) GROUP BY company_id
	)

	SELECT comp.company_id, comp.company_name, comp.status_active, show_delete = CASE WHEN c.company_id IS NOT NULL THEN 'N' ELSE 'Y' END
	FROM dbo.master_company comp WITH (NOLOCK)
	LEFT JOIN cte_company_used c ON comp.company_id = c.company_id
	ORDER BY comp.company_name
END

GO
/****** Object:  StoredProcedure [dbo].[spMasterCompanyStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterCompanyStatusActive]
(
	@company_id VARCHAR(3),
	@status_active VARCHAR(1), --Y/N
	@company_name VARCHAR(3), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Company
	
	select * from master_company with (nolock)

	EXEC spMasterCompanyStatusActive @company_id='VTP', @status_active='Y', @company_name='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT company_id FROM dbo.master_company WITH (NOLOCK) WHERE company_id = @company_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Company not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
			
		UPDATE dbo.master_company
		SET	status_active = @status_active
		WHERE company_id = @company_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterCurrencyAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterCurrencyAdd]
(
	@currency varchar(10),
	@currency_name varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Currency 

	select * from master_currency with (nolock)
	
	EXEC spMasterCurrencyAdd @currency='XXX', @currency_name='Duit X', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime

	IF @currency = '' OR @currency_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameters'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT currency FROM dbo.master_currency WITH(NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency already exists'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		INSERT INTO dbo.master_currency(currency, currency_name, status_active, date_created)
		VALUES(@currency, @currency_name, 'Y', @getdate)
				
		INSERT INTO dbo.master_generator_id(generator_id, currency, generator_code, generator_no)
		VALUES('FUND_IN',@currency,'D'+@currency,1)

		INSERT INTO dbo.master_generator_id(generator_id, currency, generator_code, generator_no)
		VALUES('FUND_OUT',@currency,'W'+@currency,1)

		INSERT INTO dbo.master_generator_id(generator_id, currency, generator_code, generator_no)
		VALUES('TOPUP',@currency,'T'+@currency,1)

		INSERT INTO dbo.master_generator_id(generator_id, currency, generator_code, generator_no)
		VALUES('SETTLEMENT',@currency,'S'+@currency,1)

		INSERT INTO dbo.master_generator_id(generator_id, currency, generator_code, generator_no)
		VALUES('ADJUSTMENT',@currency,'AD'+@currency,1)

		INSERT INTO dbo.master_generator_id(generator_id, currency, generator_code, generator_no)
		VALUES('PGADJ',@currency,'GA'+@currency,1)

		INSERT INTO dbo.master_counter(counter_id, counter_value, currency)
		VALUES('STATEMENT_'+@currency,1,@currency)
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterCurrencyDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterCurrencyDelete]
(
	@currency varchar(10),
	@currency_name varchar(50) = '', --remove
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Currency
	
	select * from master_currency with (nolock)

	EXEC spMasterCurrencyDelete @currency='XXX', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF NOT EXISTS(SELECT currency FROM dbo.master_currency WITH (NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF EXISTS(SELECT currency FROM dbo.master_payment_gateway_fundin_bank WITH (NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency used by Fund In Bank'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT currency FROM dbo.master_payment_gateway_fundin_bank WITH (NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency used by Fund Out Bank'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT currency FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency used by Merchant'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT currency FROM dbo.merchant_master_balance WITH (NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency used by Balance'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		DELETE FROM dbo.master_currency	WHERE currency = @currency

		DELETE FROM dbo.master_payment_gateway_fundin WHERE currency = @currency

		DELETE FROM dbo.master_payment_gateway_fundout WHERE currency = @currency

		DELETE FROM dbo.master_generator_id WHERE currency = @currency

		DELETE FROM dbo.master_counter WHERE currency = @currency

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterCurrencyEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterCurrencyEdit]
(
	@currency varchar(10),
	@currency_name varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Currency
	
	select * from master_currency with (nolock)

	EXEC spMasterCurrencyEdit @currency='XXX', @currency_name='Duit X1', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF @currency_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency Name empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT currency FROM dbo.master_currency WITH (NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.master_currency
		SET	currency_name = @currency_name,
			date_updated = dbo.fnGetDateGMT7()
		WHERE currency = @currency

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterCurrencyList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterCurrencyList]
(
	@stamp_user varchar(20)
)
AS
/*
	Developer > Master > Currency 

	select * from master_currency with (nolock)
	
	EXEC spMasterCurrencyList @stamp_user=''
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
	
	;WITH cte_currency_used
	AS
	(
		SELECT currency FROM dbo.master_gateway_currency WITH (NOLOCK) WHERE status_active = 'Y' GROUP BY currency
	)

	SELECT gt.currency, gt.currency_name, gt.status_active, show_delete = CASE WHEN c.currency IS NOT NULL THEN 'N' ELSE 'Y' END
	FROM dbo.master_currency gt WITH (NOLOCK)
	LEFT JOIN cte_currency_used c ON gt.currency = c.currency
	ORDER BY gt.currency
END

GO
/****** Object:  StoredProcedure [dbo].[spMasterCurrencyListGateway]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterCurrencyListGateway]
(
	@currency varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Currency > Gateway

	select * from dbo.master_currency with (nolock)
	select * from dbo.master_payment_gateway with (nolock)
	select * from dbo.master_payment_gateway_fundin with (nolock)
	select * from dbo.master_payment_gateway_fundout with (nolock)

	EXEC spMasterCurrencyListGateway @currency='IDR', @stamp_user=''
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF NOT EXISTS(SELECT currency FROM dbo.master_currency WITH (NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	;WITH cte_fundin
	AS
	(
		SELECT pg_id, pg_name, currency, status_active
		FROM dbo.master_payment_gateway_fundin WITH (NOLOCK)
		WHERE currency = @currency
	), cte_fundout
	AS
	(
		SELECT pg_id, pg_name, currency, status_active
		FROM dbo.master_payment_gateway_fundout WITH (NOLOCK)
		WHERE currency = @currency
	)

	SELECT pg.pg_id, pg_name = g.gateway_name, pg.currency, status_fundin = fi.status_active, status_fundout = fo.status_active
	FROM dbo.master_payment_gateway pg WITH (NOLOCK)
	LEFT JOIN cte_fundin fi ON pg.pg_id = fi.pg_id AND pg.currency = fi.currency
	LEFT JOIN cte_fundout fo ON pg.pg_id = fo.pg_id AND pg.currency = fo.currency
	INNER JOIN dbo.master_gateway g WITH (NOLOCK) ON pg.pg_id = g.gateway_id
	WHERE pg.currency = @currency
	ORDER BY pg.pg_id
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterCurrencyStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterCurrencyStatusActive]
(
	@currency varchar(10),
	@status_active varchar(1), --Y/N
	@currency_name varchar(50) = '', --remove
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Currency
	
	select * from master_currency with (nolock)

	EXEC spMasterCurrencyStatusActive @currency='XXX', @status_active='N', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT currency FROM dbo.master_currency WITH (NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
			
		UPDATE dbo.master_currency
		SET	status_active = @status_active,
			date_updated = dbo.fnGetDateGMT7()
		WHERE currency = @currency

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayAdd]
(
	@gateway_id varchar(10),
	@gateway_name nvarchar(100),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Gateway 

	EXEC spMasterGatewayAdd @gateway_id='VTP', @gateway_name='VirtuePay', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime

	IF @gateway_id = '' OR @gateway_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameters'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT gateway_id FROM dbo.master_gateway WITH(NOLOCK) WHERE gateway_id = @gateway_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway already exists'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------

	SET @getdate = dbo.fnGetDateGMT7()

	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO dbo.master_gateway(gateway_id, gateway_name, status_active, date_created)
		VALUES(@gateway_id, @gateway_name, 'Y', @getdate)
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayBankAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayBankAdd]
(
	@gateway_type varchar(20), --FUNDIN, FUNDOUT
	@gateway_id varchar(10),
	@currency varchar(10),
	@payment_channel_id varchar(20),
	@bank_code varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Gateway 
	
	select * from master_gateway with (nolock)
	select * from master_payment_gateway with (nolock)
	select * from master_payment_gateway_fundin_bank with (nolock)
	
	EXEC spMasterGatewayBankAdd @gateway_id='VTP', @currency='IDR', @payment_channel_id='QR', @payment_channel_id_vendor='', @bank_code='BCA', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime, @gateway_name nvarchar(200)

	IF @gateway_type NOT IN ('FUNDIN','FUNDOUT')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway Type invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT gateway_id FROM dbo.master_gateway WITH(NOLOCK) WHERE gateway_id = @gateway_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT currency FROM dbo.master_currency WITH(NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT channel_id FROM dbo.master_payment_channel WITH(NOLOCK) WHERE channel_id = @payment_channel_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Payment Channel invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT bank_code FROM dbo.master_bank WITH(NOLOCK) WHERE bank_code = @bank_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Bank invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------

	SELECT @gateway_name = gateway_name
	FROM dbo.master_gateway WITH (NOLOCK)
	WHERE gateway_id = @gateway_id

	SET @getdate = dbo.fnGetDateGMT7()

	BEGIN TRY
		BEGIN TRANSACTION

		IF @gateway_type = 'FUNDIN'
		BEGIN			
			--master_payment_gateway_fundin_bank
			IF NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundin_bank WITH(NOLOCK) 
				WHERE pg_id = @gateway_id AND currency = @currency AND payment_channel_id = @payment_channel_id AND bank_code = @bank_code)
			BEGIN
				INSERT INTO dbo.master_payment_gateway_fundin_bank(pg_id, pg_name, currency, payment_channel_id, payment_channel_id_vendor, bank_code, status_active, date_created)
				VALUES(@gateway_id, @gateway_name, @currency, @payment_channel_id, '', @bank_code, 'Y', @getdate)
			END
			ELSE
			BEGIN
				UPDATE dbo.master_payment_gateway_fundin_bank
				SET status_active = 'Y'
				WHERE pg_id = @gateway_id 
				AND currency = @currency 
				AND payment_channel_id = @payment_channel_id
				AND bank_code = @bank_code
			END

			--master_payment_gateway_fundin
			IF NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundin WITH(NOLOCK) WHERE pg_id = @gateway_id AND currency = @currency)
			BEGIN
				INSERT INTO dbo.master_payment_gateway_fundin(pg_id, pg_name, currency, status_active, date_created)
				VALUES(@gateway_id, @gateway_name, @currency, 'Y', @getdate)
			END

			--master_payment_gateway
			IF NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway WITH(NOLOCK) WHERE pg_id = @gateway_id AND currency = @currency)
			BEGIN
				INSERT INTO dbo.master_payment_gateway(pg_id, pg_name, currency, status_active, date_created)
				VALUES(@gateway_id, @gateway_name, @currency, 'Y', @getdate)
			END
		END
		---------------------------------------------------------------------------------
		--FUNDOUT
		---------------------------------------------------------------------------------
		ELSE IF @gateway_type = 'FUNDOUT'
		BEGIN			
			--master_payment_gateway_fundout_bank
			IF NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundout_bank WITH(NOLOCK) 
				WHERE pg_id = @gateway_id AND currency = @currency AND payment_channel_id = @payment_channel_id AND bank_code = @bank_code)
			BEGIN
				INSERT INTO dbo.master_payment_gateway_fundout_bank(pg_id, pg_name, currency, payment_channel_id, bank_code, status_active, date_created)
				VALUES(@gateway_id, @gateway_name, @currency, @payment_channel_id, @bank_code, 'Y', @getdate)
			END
			ELSE
			BEGIN
				UPDATE dbo.master_payment_gateway_fundout_bank
				SET status_active = 'Y'
				WHERE pg_id = @gateway_id 
				AND currency = @currency 
				AND payment_channel_id = @payment_channel_id 
				AND bank_code = @bank_code
			END

			--master_payment_gateway_fundout
			IF NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundout WITH(NOLOCK) WHERE pg_id = @gateway_id AND currency = @currency)
			BEGIN
				INSERT INTO dbo.master_payment_gateway_fundout(pg_id, pg_name, currency, status_active, date_created)
				VALUES(@gateway_id, @gateway_name, @currency, 'Y', @getdate)
			END
			
			--master_payment_gateway
			IF NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway WITH(NOLOCK) WHERE pg_id = @gateway_id AND currency = @currency)
			BEGIN
				INSERT INTO dbo.master_payment_gateway(pg_id, pg_name, currency, status_active, date_created)
				VALUES(@gateway_id, @gateway_name, @currency, 'Y', @getdate)
			END
		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayBankDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayBankDelete]
(
	@gateway_type varchar(20), --FUNDIN, FUNDOUT
	@gateway_id varchar(10),
	@currency varchar(10),
	@payment_channel_id varchar(20),
	@bank_code varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Gateway 
	
	EXEC spMasterGatewayBankDelete @gateway_type='FUNDIN', @gateway_id='VTP', @currency='', @payment_channel_id='', @bank_code='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime, 	@gateway_name nvarchar(200)

	IF @gateway_type NOT IN ('FUNDIN','FUNDOUT')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway Type invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT gateway_id FROM dbo.master_gateway WITH(NOLOCK) WHERE gateway_id = @gateway_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT currency FROM dbo.master_currency WITH(NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT channel_id FROM dbo.master_payment_channel WITH(NOLOCK) WHERE channel_id = @payment_channel_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Payment Channel invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT bank_code FROM dbo.master_bank WITH(NOLOCK) WHERE bank_code = @bank_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Bank invalid'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF @gateway_type = 'FUNDIN'
		AND NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundin_bank WITH(NOLOCK) 
		WHERE pg_id = @gateway_id AND currency = @currency AND payment_channel_id = @payment_channel_id AND bank_code = @bank_code)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Bank already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @gateway_type = 'FUNDOUT'
		AND NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundout_bank WITH(NOLOCK) 
		WHERE pg_id = @gateway_id AND currency = @currency AND payment_channel_id = @payment_channel_id AND bank_code = @bank_code)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Bank already remove'
		SELECT @result_code, @error_message
		RETURN
	END
	------------------------------------------------------------------------

	BEGIN TRY
		BEGIN TRANSACTION

		IF @gateway_type = 'FUNDIN'
		BEGIN			
			--master_payment_gateway_fundin_bank
			IF EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundin_bank WITH(NOLOCK) 
				WHERE pg_id = @gateway_id AND currency = @currency AND payment_channel_id = @payment_channel_id AND bank_code = @bank_code)
			BEGIN
				DELETE FROM dbo.master_payment_gateway_fundin_bank
				WHERE pg_id = @gateway_id 
				AND currency = @currency 
				AND payment_channel_id = @payment_channel_id 
				AND bank_code = @bank_code
			END

			--master_payment_gateway_fundin
			IF NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundin_bank WITH(NOLOCK) 
				WHERE pg_id = @gateway_id AND currency = @currency AND payment_channel_id = @payment_channel_id AND bank_code = @bank_code)
			BEGIN
				DELETE FROM dbo.master_payment_gateway_fundin
				WHERE pg_id = @gateway_id 
				AND currency = @currency
			END
		END
		---------------------------------------------------------------------------------
		--FUNDOUT
		---------------------------------------------------------------------------------
		ELSE IF @gateway_type = 'FUNDOUT'
		BEGIN			
			--master_payment_gateway_fundout_bank
			IF EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundout_bank WITH(NOLOCK) 
				WHERE pg_id = @gateway_id AND currency = @currency AND payment_channel_id = @payment_channel_id AND bank_code = @bank_code)
			BEGIN
				DELETE FROM dbo.master_payment_gateway_fundout_bank
				WHERE pg_id = @gateway_id 
				AND currency = @currency 
				AND payment_channel_id = @payment_channel_id 
				AND bank_code = @bank_code
			END

			--master_payment_gateway_fundout
			IF NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundout_bank WITH(NOLOCK) 
				WHERE pg_id = @gateway_id AND currency = @currency AND payment_channel_id = @payment_channel_id AND bank_code = @bank_code)
			BEGIN
				DELETE FROM dbo.master_payment_gateway_fundout
				WHERE pg_id = @gateway_id
				AND currency = @currency
			END
		END
				
		--master_payment_gateway
		IF NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundin WITH(NOLOCK) WHERE pg_id = @gateway_id AND currency = @currency)
			AND NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundout WITH(NOLOCK) WHERE pg_id = @gateway_id AND currency = @currency)
		BEGIN
			DELETE FROM dbo.master_payment_gateway
			WHERE pg_id = @gateway_id
			AND currency = @currency
		END

		COMMIT TRANSACTION

	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayBankList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayBankList]
(
	@gateway_type varchar(20), --FUNDIN, FUNDOUT
	@gateway_id varchar(50),
	@currency varchar(10),
	@payment_channel_id varchar(20),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Gateway > Fund In/Out

	select * from dbo.master_payment_gateway_fundin_bank with (nolock)
	select * from dbo.master_payment_gateway_fundout with (nolock)

	EXEC spMasterGatewayBankList @gateway_type='FUNDIN', @gateway_id='PTY', @currency='THB', @payment_channel_id='QR', @stamp_user=''
	EXEC spMasterGatewayBankList @gateway_type='FUNDOUT', @gateway_id='V2P', @currency='VND', @payment_channel_id='QR', @stamp_user=''
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@gateway_name nvarchar(200)
	
	--------------------------------------------------------------------------------

	SELECT @gateway_name = gateway_name
	FROM dbo.master_gateway WITH (NOLOCK)
	WHERE gateway_id = @gateway_id

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	/*
		select master_payment_gateway_fundin_bank yang udah ada
		select bank yang lom ada di master_payment_gateway_fundin_bank sesuai currency, dan yang active

	*/
	--Fund In
	IF @gateway_type = 'FUNDIN'
	BEGIN
		SELECT gateway_type = 'FUNDIN', gateway_id = pb.pg_id, gateway_name = @gateway_name, pb.currency, pb.payment_channel_id, pb.bank_code, 
			bank_name = ISNULL(b.bank_name,''), bank_status = pb.status_active,
			master_bank_status = ISNULL(b.status_active,'N'), show_delete = 'Y', pb.payment_channel_id_vendor
		FROM dbo.master_payment_gateway_fundin_bank pb WITH (NOLOCK)
		LEFT JOIN dbo.master_bank b WITH (NOLOCK) ON pb.bank_code = b.bank_code
		WHERE pb.pg_id = @gateway_id
		AND pb.currency = @currency
		AND pb.payment_channel_id = @payment_channel_id

		UNION ALL

		SELECT gateway_type = 'FUNDIN', gateway_id = @gateway_id, gateway_name = @gateway_name, b.currency, payment_channel_id = @payment_channel_id, b.bank_code, 
			b.bank_name, bank_status = 'N',
			master_bank_status = b.status_active, show_delete = 'N', payment_channel_id_vendor = ''
		FROM dbo.master_bank b WITH (NOLOCK) 
		LEFT JOIN dbo.master_payment_gateway_fundin_bank pb WITH (NOLOCK) ON b.bank_code = pb.bank_code AND pb.pg_id = @gateway_id
			AND pb.currency = @currency AND pb.payment_channel_id = @payment_channel_id
		WHERE b.currency = @currency
		AND b.status_active = 'Y'
		AND pb.bank_code IS NULL
		ORDER BY bank_status DESC, bank_code
	END
	----------------------------------------------------------------------------
	--Fund Out
	----------------------------------------------------------------------------
	IF @gateway_type = 'FUNDOUT'
	BEGIN
		SELECT gateway_type = 'FUNDOUT', gateway_id = pb.pg_id, gateway_name = @gateway_name, pb.currency, pb.payment_channel_id, pb.bank_code, 
			bank_name = ISNULL(b.bank_name,''), bank_status = pb.status_active,
			master_bank_status = ISNULL(b.status_active,'N'), show_delete = 'Y', payment_channel_id_vendor = ''
		FROM dbo.master_payment_gateway_fundout_bank pb WITH (NOLOCK)
		LEFT JOIN dbo.master_bank b WITH (NOLOCK) ON pb.bank_code = b.bank_code
		WHERE pb.pg_id = @gateway_id
		AND pb.currency = @currency
		AND pb.payment_channel_id = @payment_channel_id

		UNION ALL

		SELECT gateway_type = 'FUNDOUT', gateway_id = @gateway_id, gateway_name = @gateway_name, b.currency, payment_channel_id = @payment_channel_id, b.bank_code, 
			b.bank_name, bank_status = 'N',
			master_bank_status = b.status_active, show_delete = 'N', payment_channel_id_vendor = ''
		FROM dbo.master_bank b WITH (NOLOCK) 
		LEFT JOIN dbo.master_payment_gateway_fundout_bank pb WITH (NOLOCK) ON b.bank_code = pb.bank_code AND pb.pg_id = @gateway_id
			AND pb.currency = @currency AND pb.payment_channel_id = @payment_channel_id
		WHERE b.currency = @currency
		AND b.status_active = 'Y'
		AND pb.bank_code IS NULL
		ORDER BY bank_status DESC, bank_code
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayBankStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayBankStatusActive]
(
	@gateway_type varchar(20), --FUNDIN, FUNDOUT
	@gateway_id varchar(10),
	@currency varchar(10),
	@payment_channel_id varchar(20),
	@bank_code varchar(10),
	@status_active varchar(1), --Y, N
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Gateway 
	
	EXEC spMasterGatewayBankStatusActive @gateway_id='VTP', @currency='', @payment_channel_id='', @bank_code='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime

	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @gateway_type NOT IN ('FUNDIN','FUNDOUT')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway Type invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT gateway_id FROM dbo.master_gateway WITH(NOLOCK) WHERE gateway_id = @gateway_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT currency FROM dbo.master_currency WITH(NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT channel_id FROM dbo.master_payment_channel WITH(NOLOCK) WHERE channel_id = @payment_channel_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Payment Channel invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT bank_code FROM dbo.master_bank WITH(NOLOCK) WHERE bank_code = @bank_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Bank invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @gateway_type = 'FUNDIN'
	BEGIN
		IF NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundin_bank WITH(NOLOCK) 
			WHERE pg_id = @gateway_id AND currency = @currency AND payment_channel_id = @payment_channel_id AND bank_code = @bank_code)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Data'
			SELECT @result_code, @error_message
			RETURN
		END

		SET @getdate = dbo.fnGetDateGMT7()

		BEGIN TRY
		BEGIN TRANSACTION

			UPDATE dbo.master_payment_gateway_fundin_bank 
			SET status_active = @status_active,
				date_updated = @getdate
			WHERE pg_id = @gateway_id 
			AND currency = @currency 
			AND payment_channel_id = @payment_channel_id 
			AND bank_code = @bank_code
		
		COMMIT TRANSACTION
		END TRY
		BEGIN CATCH
			ROLLBACK TRANSACTION
			SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
			SELECT @result_code, @error_message
			RETURN
		END CATCH

	END
	---------------------------------------------------------------------------------
	--FUNDOUT
	---------------------------------------------------------------------------------
	ELSE IF @gateway_type = 'FUNDOUT'
	BEGIN
		IF NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundout_bank WITH(NOLOCK) 
			WHERE pg_id = @gateway_id AND currency = @currency AND payment_channel_id = @payment_channel_id AND bank_code = @bank_code)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Data'
			SELECT @result_code, @error_message
			RETURN
		END

		SET @getdate = dbo.fnGetDateGMT7()

		BEGIN TRY
		BEGIN TRANSACTION

			UPDATE dbo.master_payment_gateway_fundout_bank 
			SET status_active = @status_active,
				date_updated = @getdate
			WHERE pg_id = @gateway_id 
			AND currency = @currency 
			AND payment_channel_id = @payment_channel_id 
			AND bank_code = @bank_code
		
		COMMIT TRANSACTION
		END TRY
		BEGIN CATCH
			ROLLBACK TRANSACTION
			SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
			SELECT @result_code, @error_message
			RETURN
		END CATCH
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayCurrencyList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayCurrencyList]
(
	@gateway_type varchar(20), --FUNDIN, FUNDOUT
	@gateway_id varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Gateway > Fund In/Out

	select * from dbo.master_payment_gateway_fundin with (nolock)
	select * from dbo.master_payment_gateway_fundout with (nolock)

	EXEC spMasterGatewayCurrencyList @gateway_type='FUNDIN', @gateway_id='V2P', @stamp_user=''
	EXEC spMasterGatewayCurrencyList @gateway_type='FUNDOUT', @gateway_id='V2P', @stamp_user=''
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@gateway_name nvarchar(200)
	
	--------------------------------------------------------------------------------
	SELECT @gateway_name = gateway_name
	FROM dbo.master_gateway WITH (NOLOCK)
	WHERE gateway_id = @gateway_id

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	--Fund In
	IF @gateway_type = 'FUNDIN'
	BEGIN		
		SELECT gateway_id = pg_id, gateway_name = @gateway_name, currency, status_active
		FROM dbo.master_payment_gateway_fundin WITH (NOLOCK)
		WHERE pg_id = @gateway_id
		ORDER BY currency
	END
	----------------------------------------------------------------------------
	--Fund Out
	----------------------------------------------------------------------------
	ELSE IF @gateway_type = 'FUNDOUT'
	BEGIN
		SELECT gateway_id = pg_id, gateway_name = @gateway_name, currency, status_active
		FROM dbo.master_payment_gateway_fundout WITH (NOLOCK)
		WHERE pg_id = @gateway_id
		ORDER BY currency
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayCurrencyStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayCurrencyStatusActive]
(
	@gateway_type varchar(20), --FUNDIN, FUNDOUT
	@gateway_id varchar(10),
	@currency varchar(10),
	@status_active varchar(1), --Y, N
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Gateway 
	
	EXEC spMasterGatewayCurrencyStatusActive @gateway_type='FUNDIN', @gateway_id='VTP', @currency='', @status_active='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime

	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @gateway_type NOT IN ('FUNDIN','FUNDOUT')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway Type invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT gateway_id FROM dbo.master_gateway WITH(NOLOCK) WHERE gateway_id = @gateway_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT currency FROM dbo.master_currency WITH(NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency invalid'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF @gateway_type = 'FUNDIN'
	BEGIN
		IF NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundin WITH(NOLOCK) WHERE pg_id = @gateway_id AND currency = @currency)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Data'
			SELECT @result_code, @error_message
			RETURN
		END
	END
	ELSE IF @gateway_type = 'FUNDOUT'
	BEGIN
		IF NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundout WITH(NOLOCK) WHERE pg_id = @gateway_id AND currency = @currency)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Data'
			SELECT @result_code, @error_message
			RETURN
		END
	END

	------------------------------------------------------------------------

	SET @getdate = dbo.fnGetDateGMT7()

	BEGIN TRY
		BEGIN TRANSACTION

		IF @gateway_type = 'FUNDIN'
		BEGIN
			IF EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundin WITH(NOLOCK) WHERE pg_id = @gateway_id AND currency = @currency)
			BEGIN
				UPDATE dbo.master_payment_gateway_fundin
				SET status_active = @status_active,
					date_updated = @getdate
				WHERE pg_id = @gateway_id 
				AND currency = @currency
			END
		END
		---------------------------------------------------------------------------------
		--FUNDOUT
		---------------------------------------------------------------------------------
		ELSE IF @gateway_type = 'FUNDOUT'
		BEGIN
			IF EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundout WITH(NOLOCK) WHERE pg_id = @gateway_id AND currency = @currency)
			BEGIN
				UPDATE dbo.master_payment_gateway_fundout
				SET status_active = @status_active,
					date_updated = @getdate
				WHERE pg_id = @gateway_id 
				AND currency = @currency
			END
		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayDelete]
(
	@gateway_id varchar(10),
	@gateway_name nvarchar(100), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Gateway
	
	select * from master_gateway with (nolock)

	EXEC spMasterGatewayDelete @gateway_id='VTP', @gateway_name='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF EXISTS(SELECT gateway_id FROM dbo.master_gateway WITH (NOLOCK) WHERE gateway_id = @gateway_id AND status_active = 'Y')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway is Active'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundin_bank WITH (NOLOCK) WHERE pg_id = @gateway_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway is used by Fund In Bank'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundout_bank WITH (NOLOCK) WHERE pg_id = @gateway_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway is used by Fund Out Bank'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundin WITH (NOLOCK) WHERE pg_id = @gateway_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway is used by Fund In'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_fundout WITH (NOLOCK) WHERE pg_id = @gateway_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway is used by Fund Out'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_language WITH (NOLOCK) WHERE pg_id = @gateway_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway have Language '
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		DELETE FROM dbo.master_gateway
		WHERE gateway_id = @gateway_id

		DELETE FROM dbo.master_payment_gateway
		WHERE pg_id = @gateway_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayEdit]
(
	@gateway_id varchar(10),
	@gateway_name nvarchar(100),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Gateway
	
	select * from master_gateway with (nolock)

	EXEC spMasterGatewayEdit @gateway_id='VTP', @gateway_name='VirtuePay 1', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF @gateway_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway Name empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT gateway_id FROM dbo.master_gateway WITH (NOLOCK) WHERE gateway_id = @gateway_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.master_gateway
		SET	gateway_name = @gateway_name,
			date_updated = dbo.fnGetDateGMT7()
		WHERE gateway_id = @gateway_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayFundList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayFundList]
(
	@gateway_type varchar(20), --FUNDIN, FUNDOUT
	@gateway_id varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Gateway > Fund In/Out

	Desc : show currency + bank, base on click Fund In / Fund Out

	EXEC spMasterGatewayFundList @gateway_type='FUNDIN', @gateway_id='V2P', @stamp_user=''
	EXEC spMasterGatewayFundList @gateway_type='FUNDOUT', @gateway_id='V2P', @stamp_user=''
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	--------------------------------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	--Fund In
	IF @gateway_type = 'FUNDIN'
	BEGIN
		WITH cte_bank
		AS
		(
			SELECT b.pg_id, b.currency, b.payment_channel_id, b.bank_code, bank_status = b.status_active, currency_status = f.status_active
			FROM dbo.master_payment_gateway_fundin_bank b WITH (NOLOCK)
			LEFT JOIN dbo.master_payment_gateway_fundin f WITH (NOLOCK) ON b.pg_id = f.pg_id AND b.currency = f.currency
			WHERE b.pg_id = @gateway_id
		), cte_list
		AS
		(
			SELECT pg_id, currency, payment_channel_id, currency_status, 
				bank_list = STUFF((SELECT bank_code+'  ' FROM cte_bank c2 WHERE c1.currency = c2.currency AND c1.payment_channel_id = c2.payment_channel_id ORDER BY bank_code FOR XML PATH ('')), 1, 0, '') 
			FROM cte_bank c1
			group by pg_id, currency, payment_channel_id, currency_status
		)

		SELECT gateway_id = c.pg_id, gateway_name = ISNULL(g.gateway_name,''), c.currency, c.payment_channel_id, c.currency_status, c.bank_list
		FROM cte_list c
		LEFT JOIN dbo.master_gateway g WITH (NOLOCK) ON c.pg_id = g.gateway_id
		ORDER BY c.currency, c.payment_channel_id
	END
	----------------------------------------------------------------------------
	--Fund Out
	----------------------------------------------------------------------------
	ELSE IF @gateway_type = 'FUNDOUT'
	BEGIN
		WITH cte_bank
		AS
		(
			SELECT b.pg_id, b.currency, b.payment_channel_id, b.bank_code, bank_status = b.status_active, currency_status = f.status_active
			FROM dbo.master_payment_gateway_fundout_bank b WITH (NOLOCK)
			LEFT JOIN dbo.master_payment_gateway_fundout f WITH (NOLOCK) ON b.pg_id = f.pg_id AND b.currency = f.currency
			WHERE b.pg_id = @gateway_id
		), cte_list
		AS
		(
			SELECT pg_id, currency, payment_channel_id, currency_status, 
				bank_list = STUFF((SELECT bank_code+'  ' FROM cte_bank c2 WHERE c1.currency = c2.currency AND c1.payment_channel_id = c2.payment_channel_id ORDER BY bank_code FOR XML PATH ('')), 1, 0, '') 
			FROM cte_bank c1
			group by pg_id, currency, payment_channel_id, currency_status
		)

		SELECT gateway_id = c.pg_id, gateway_name = ISNULL(g.gateway_name,''), c.currency, c.payment_channel_id, c.currency_status, c.bank_list
		FROM cte_list c
		LEFT JOIN dbo.master_gateway g WITH (NOLOCK) ON c.pg_id = g.gateway_id
		ORDER BY c.currency, c.payment_channel_id
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayLanguageStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayLanguageStatusActive]
(
	@gateway_id varchar(10),
	@language_code varchar(5),
	@status_active varchar(1),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Language > Gateway 
	Developer > Master > Gateway > Language

	select * from dbo.master_gateway with (nolock)
	select * from dbo.master_language with (nolock)
	select * from dbo.master_payment_gateway_language with (nolock)

	EXEC spMasterGatewayLanguageStatusActive @gateway_id='PTY', @language_code='ch-CH', @status_active='Y', @stamp_user=''
	EXEC spMasterGatewayLanguageStatusActive @gateway_id='PTY', @language_code='ch-CH', @status_active='N', @stamp_user=''
	EXEC spMasterGatewayLanguageStatusActive @gateway_id='MID', @language_code='en-US', @status_active='N', @stamp_user='developer38'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@gateway_name nvarchar(200), @getdate datetime

	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT language_code FROM dbo.master_language WITH (NOLOCK) WHERE language_code = @language_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Language not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT gateway_id FROM dbo.master_gateway WITH (NOLOCK) WHERE gateway_id = @gateway_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @status_active = 'N' AND NOT EXISTS(SELECT pg_id FROM dbo.master_payment_gateway_language WITH (NOLOCK) WHERE pg_id = @gateway_id AND language_code = @language_code)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Gateway remove'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @gateway_name = gateway_name
	FROM dbo.master_gateway WITH (NOLOCK)
	WHERE gateway_id = @gateway_id

	BEGIN TRY
		BEGIN TRANSACTION
		
		SET @getdate = dbo.fnGetDateGMT7()

		IF @status_active = 'Y'
		BEGIN
			IF NOT EXISTS (SELECT pg_id FROM dbo.master_payment_gateway_language WITH (NOLOCK) WHERE pg_id = @gateway_id AND language_code = @language_code)
			BEGIN
				INSERT INTO dbo.master_payment_gateway_language(pg_id, pg_name, language_code, status_active, date_created)
				VALUES(@gateway_id, @gateway_name, @language_code, 'Y', @getdate)
			END
			ELSE
			BEGIN
				UPDATE dbo.master_payment_gateway_language
				SET status_active = 'Y',
					date_updated = @getdate
				WHERE pg_id = @gateway_id
				AND language_code = @language_code
			END
		END
		ELSE IF @status_active = 'N'
		BEGIN
			DELETE FROM dbo.master_payment_gateway_language WHERE pg_id = @gateway_id AND language_code = @language_code
		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayList]
(
	@stamp_user varchar(20)
)
AS
/*
	Developer > Master > Gateway 

	EXEC spMasterGatewayList @stamp_user=''
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
	
	------------------------------------------------------------------------------------------------------------------------------------------------------------
	CREATE TABLE #tbl_language (gateway_id varchar(10), language_list varchar(2000))

	;WITH cte_language_list_1 --data
	AS
	(
		SELECT pg_id, language_code FROM dbo.master_payment_gateway_language WITH (NOLOCK) GROUP BY pg_id, language_code
	), cte_language_list_2 --en-US\nid-ID
	AS
	(
		SELECT pg_id, language_list = STUFF((SELECT '\n'+c2.language_code FROM cte_language_list_1 c2 WHERE c1.pg_id = c2.pg_id ORDER BY language_code FOR XML PATH('')),1,2,'')
		FROM cte_language_list_1 c1
		GROUP BY pg_id
	)

	INSERT INTO #tbl_language (gateway_id, language_list)
	SELECT pg_id, language_list
	FROM cte_language_list_2
	
	------------------------------------------------------------------------------------------------------------------------------------------------------------
	CREATE TABLE #tbl_fundin (gateway_id varchar(10), currency_fundin varchar(4000))

	;WITH cte_fundin_1 --data
	AS
	(
		SELECT pb.pg_id, pb.currency, pb.payment_channel_id
		FROM dbo.master_payment_gateway_fundin_bank pb WITH (NOLOCK)
		GROUP BY pb.pg_id, pb.currency, pb.payment_channel_id
	), cte_fundin_2 --IB, QR, VA
	AS
	(
		SELECT c1.pg_id, c1.currency, pg.status_active, currency_list = STUFF((SELECT ', '+c2.payment_channel_id 
			FROM cte_fundin_1 c2 WHERE c1.pg_id = c2.pg_id AND c1.currency = c2.currency FOR XML PATH ('')), 1, 2, '') 
		FROM cte_fundin_1 c1
		LEFT JOIN dbo.master_payment_gateway_fundin pg WITH (NOLOCK) ON c1.pg_id = pg.pg_id AND c1.currency = pg.currency
		GROUP BY c1.pg_id, c1.currency, pg.status_active
	), cte_fundin_3 --[green]IB, QR, VA[/green]\n
	AS
	(
		SELECT pg_id, currency_fundin = STUFF((SELECT '\n'+CASE c2.status_active WHEN 'Y' THEN '[green]' ELSE '[red]' END + 
				c2.currency + ' - ' + c2.currency_list+CASE c2.status_active WHEN 'Y' THEN '[/green]' ELSE '[/red]' END 
				FROM cte_fundin_2 c2 WHERE c1.pg_id = c2.pg_id FOR XML PATH ('')), 1, 2, '') 
		FROM cte_fundin_2 c1
		GROUP BY pg_id
	)

	INSERT INTO #tbl_fundin(gateway_id, currency_fundin)
	SELECT pg_id, currency_fundin
	FROM cte_fundin_3

	------------------------------------------------------------------------------------------------------------------------------------------------------------
	CREATE TABLE #tbl_fundout (gateway_id varchar(10), currency_fundout varchar(4000))

	;WITH cte_fundout_1 --data
	AS
	(
		SELECT pb.pg_id, pb.currency, pb.payment_channel_id
		FROM dbo.master_payment_gateway_fundout_bank pb WITH (NOLOCK)
		GROUP BY pb.pg_id, pb.currency, pb.payment_channel_id
	), cte_fundout_2 --IB, QR, VA
	AS
	(
		SELECT c1.pg_id, c1.currency, pg.status_active, currency_list = STUFF((SELECT ', '+c2.payment_channel_id 
			FROM cte_fundout_1 c2 WHERE c1.pg_id = c2.pg_id AND c1.currency = c2.currency FOR XML PATH ('')), 1, 2, '') 
		FROM cte_fundout_1 c1
		LEFT JOIN dbo.master_payment_gateway_fundout pg WITH (NOLOCK) ON c1.pg_id = pg.pg_id AND c1.currency = pg.currency
		GROUP BY c1.pg_id, c1.currency, pg.status_active
	), cte_fundout_3 --[green]IB, QR, VA[/green]\n
	AS
	(
		SELECT pg_id, currency_fundout = STUFF((SELECT '\n'+CASE c2.status_active WHEN 'Y' THEN '[green]' ELSE '[red]' END + 
			c2.currency + ' - ' + c2.currency_list+CASE c2.status_active WHEN 'Y' THEN '[/green]' ELSE '[/red]' END 
			FROM cte_fundout_2 c2 WHERE c1.pg_id = c2.pg_id FOR XML PATH ('')), 1, 2, '') 
		FROM cte_fundout_2 c1
		GROUP BY pg_id
	)

	INSERT INTO #tbl_fundout(gateway_id, currency_fundout)
	SELECT pg_id, currency_fundout
	FROM cte_fundout_3

	------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	;WITH cte_gateway_used
	AS
	(
		SELECT pg_id FROM dbo.master_payment_gateway WITH (NOLOCK) WHERE status_active = 'Y' GROUP BY pg_id
		UNION 
		SELECT pg_id FROM dbo.master_payment_gateway_fundin WITH (NOLOCK) WHERE status_active = 'Y' GROUP BY pg_id
		UNION
		SELECT pg_id FROM dbo.master_payment_gateway_fundout WITH (NOLOCK) WHERE status_active = 'Y' GROUP BY pg_id
	)

	SELECT gt.gateway_id, gt.gateway_name, gt.status_active, show_delete = CASE WHEN c.pg_id IS NOT NULL THEN 'N' ELSE 'Y' END,
			currency_fundin = ISNULL(fi.currency_fundin,''), 
			currency_fundout = ISNULL(fo.currency_fundout,''), 
			language_list = ISNULL(tl.language_list,'')
	FROM dbo.master_gateway gt WITH (NOLOCK)
	LEFT JOIN cte_gateway_used c ON gt.gateway_id = c.pg_id
	LEFT JOIN #tbl_language tl ON gt.gateway_id = tl.gateway_id
	LEFT JOIN #tbl_fundin fi ON gt.gateway_id = fi.gateway_id
	LEFT JOIN #tbl_fundout fo ON gt.gateway_id = fo.gateway_id
	ORDER BY gt.gateway_name
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayListLanguage]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayListLanguage]
(
	@gateway_id varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Gateway > Language

	select * from dbo.master_language with (nolock)
	select * from dbo.master_payment_gateway_language with (nolock)

	EXEC spMasterGatewayListLanguage @gateway_id='DST', @stamp_user=''
*/
	SET NOCOUNT ON

	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime, @language_list varchar(4000) 
		
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	/*
		select yang ada di master_payment_gateway_language
		select yang ga ada di master_payment_gateway_language, tapi master_language active
	*/
	SELECT pl.pg_id, pl.language_code, language_status = 'Y', master_language_status = ISNULL(l.status_active,'N')
	FROM dbo.master_payment_gateway_language pl WITH (NOLOCK)
	LEFT JOIN dbo.master_language l WITH (NOLOCK) ON pl.language_code = l.language_code
	WHERE pl.pg_id = @gateway_id

	UNION ALL

	SELECT pg_id = @gateway_id, l.language_code, language_status = 'N', master_language_status = l.status_active
	FROM dbo.master_language l WITH (NOLOCK)
	LEFT JOIN dbo.master_payment_gateway_language pl WITH (NOLOCK) ON l.language_code = pl.language_code AND pl.pg_id = @gateway_id
	WHERE l.status_active = 'Y'
	AND pl.language_code IS NULL
	ORDER BY language_status DESC, language_code
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayMerchantList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayMerchantList]
(
	@pg_id varchar(50),
	@pg_merchant_id varchar(50),
	@currency varchar(3),
	@payment_channel_id varchar(20),
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Gateway Merchant
	
	selcet * from dbo.master_gateway_merchant with (nolock)

	EXEC PacmanMainDB.dbo.spMasterGatewayMerchantList @pg_id='', @pg_merchant_id='', @currency='', @payment_channel_id='', @page=1, @page_size=70, @stamp_user='developer13'
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@total_rows int
	
	SELECT	@pg_id = CASE @pg_id WHEN '' THEN '%' ELSE @pg_id END,
			@pg_merchant_id = CASE @pg_merchant_id WHEN '' THEN '%' ELSE @pg_merchant_id END,
			@currency = CASE @currency WHEN '' THEN '%' ELSE @currency END,
			@payment_channel_id = CASE @payment_channel_id WHEN '' THEN '%' ELSE @payment_channel_id END
	
	----------------------------------------------------------------------------------

	SELECT @total_rows = COUNT(1) 
	FROM dbo.master_gateway_merchant WITH (NOLOCK)
	WHERE pg_id LIKE @pg_id
	AND pg_merchant_id LIKE @pg_merchant_id
	AND currency LIKE @currency
	AND payment_channel_id LIKE @payment_channel_id

	----------------------------------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows

	--Merchant Code
	SELECT pg_merchant_code, pg_id, pg_name, pg_merchant_id, currency, 
		payment_channel_id, payment_channel_vendor, pg_merchant_status, gateway_fee, 
		fundin_status, fundin_min, fundin_max, fundin_max_daily, 
		fundout_status, fundout_min, fundout_max, fundout_max_daily
	FROM dbo.master_gateway_merchant m WITH (NOLOCK)
	WHERE pg_id LIKE @pg_id
	AND pg_merchant_id LIKE @pg_merchant_id
	AND currency LIKE @currency
	AND payment_channel_id LIKE @payment_channel_id
	ORDER BY pg_id, pg_merchant_id, currency, payment_channel_id
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY

	






	--pg_id
	--DST		VT001	Fund In		Fund Out		[Add Fund In/Fund Out]
	--		IDR		QR		code		Fund In		[Add : Currency, Payment Channel, Payment Channel Vendor]
	--		IDR		IB		code		Fund In		[Add : Currency, Payment Channel, Payment Channel Vendor]
	
	--		IDR		IB		code		Fund Out	[Add : Currency, Payment Channel, Payment Channel Vendor]

	

	


	--LEFT JOIN dbo.master_company c WITH (NOLOCK) ON m.company_id = c.company_id
	--LEFT JOIN dbo.master_operator o WITH (NOLOCK) ON m.operator_id = o.operator_id
	--LEFT JOIN dbo.master_merchant_group mg WITH (NOLOCK) ON m.merchant_group_id = mg.merchant_group_id
	--ORDER BY m.merchant_code
	--OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY

	--Payment Channel
	SELECT ml.company_id, ml.operator_id, ml.merchant_code, ml.currency, ml.merchant_id, ml.payment_channel_id, payment_channel_name = pc.channel_name, 
		m.fundin_status, m.fundin_amount_min, m.fundin_amount_max, m.fundin_fee_percent, m.fundin_fix_rate, m.fundin_referral_fee_percent,
		m.fundout_status, m.fundout_amount_min, m.fundout_amount_max, m.fundout_fee_percent, m.fundout_fix_rate, m.fundout_referral_fee_percent,
		m.pg_pool_id, p.pg_pool_name, m.date_created, m.date_updated, m.gateway_fee_type, ml.merchant_pass_key
	FROM dbo.merchant_list ml WITH (NOLOCK)
	INNER JOIN #tbl_merchant_code tbl WITH (NOLOCK) ON ml.merchant_code = tbl.merchant_code AND ml.currency = tbl.currency
	INNER JOIN dbo.merchant_setting m WITH (NOLOCK) ON ml.merchant_id = m.merchant_id
	LEFT JOIN dbo.master_payment_channel pc WITH (NOLOCK) ON ml.payment_channel_id = pc.channel_id
	LEFT JOIN dbo.master_payment_gateway_pool p WITH (NOLOCK) ON m.pg_pool_id = p.pg_pool_id
	ORDER BY ml.merchant_code, ml.currency, ml.payment_channel_id
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterGatewayStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterGatewayStatusActive]
(
	@gateway_id varchar(10),
	@status_active varchar(1), --Y/N
	@gateway_name nvarchar(100), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Gateway
	
	select * from master_gateway with (nolock)

	EXEC spMasterGatewayStatusActive @gateway_id='VTP', @status_active='Y', @gateway_name='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT gateway_id FROM dbo.master_gateway WITH (NOLOCK) WHERE gateway_id = @gateway_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Gateway not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
			
		UPDATE dbo.master_gateway
		SET	status_active = @status_active,
			date_updated = dbo.fnGetDateGMT7()
		WHERE gateway_id = @gateway_id

		UPDATE dbo.master_payment_gateway
		SET	status_active = @status_active,
			date_updated = dbo.fnGetDateGMT7()
		WHERE pg_id = @gateway_id

		UPDATE dbo.master_payment_gateway_fundin
		SET	status_active = @status_active,
			date_updated = dbo.fnGetDateGMT7()
		WHERE pg_id = @gateway_id

		UPDATE dbo.master_payment_gateway_fundout
		SET	status_active = @status_active,
			date_updated = dbo.fnGetDateGMT7()
		WHERE pg_id = @gateway_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterLanguageAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterLanguageAdd]
(
	@language_code varchar(5),
	@language_name varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Language

	EXEC spMasterLanguageAdd @language_code='th-TH', @language_name='Thai - Thailand', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@getdate datetime

	IF EXISTS(SELECT language_code FROM dbo.master_language WITH (NOLOCK) WHERE language_code = @language_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Language already exists'
		SELECT @result_code, @error_message
		RETURN
	END

	--------------------------------------------------------------------------------------------------------------

	SET @getdate = dbo.fnGetDateGMT7()

	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO dbo.master_language(language_code, language_name, status_active, date_created, date_updated)
		VALUES(@language_code, @language_name, 'Y', @getdate, NULL)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterLanguageDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterLanguageDelete]
(
	@language_code varchar(5),
	@language_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Language

	EXEC spMasterLanguageDelete @language_code='th-TH', @language_name='Thai - Thailand', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
		
	IF NOT EXISTS(SELECT language_code FROM dbo.master_language WITH (NOLOCK) WHERE language_code = @language_code)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Language Deleted'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT language_code FROM dbo.master_payment_gateway_language WITH (NOLOCK) WHERE language_code = @language_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Language used by Gateway'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT language_code FROM dbo.master_language WITH (NOLOCK) WHERE language_code = @language_code AND status_active = 'Y')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Language is Active'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		DELETE FROM dbo.master_language
		WHERE language_code = @language_code

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterLanguageEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterLanguageEdit]
(
	@language_code varchar(5),
	@language_name varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Language

	select * from dbo.master_language with (nolock)

	EXEC spMasterLanguageEdit @language_code='th-TH', @language_name='Thai - Thailand 2', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF @language_code = '' OR @language_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Data'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT language_code FROM dbo.master_language WITH (NOLOCK) WHERE language_code = @language_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Language not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.master_language
		SET	language_name = @language_name,
			date_updated = dbo.fnGetDateGMT7()
		WHERE language_code = @language_code

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterLanguageList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterLanguageList]
(
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Language

	EXEC spMasterLanguageList @stamp_user=''
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	------------------------------------------------------------------------------------------------------------------------------------------------------------
	CREATE TABLE #tbl_gateway (language_code varchar(5), gateway_list varchar(2000))

	;WITH cte_gateway_list_1 --data
	AS
	(
		SELECT language_code, pg_id
		FROM dbo.master_payment_gateway_language WITH (NOLOCK)
		WHERE status_active = 'Y'
	), cte_gateway_list_2 --DST, PTY, V2P, XPY
	AS
	(
		SELECT c1.language_code, gateway_list = STUFF((SELECT ', '+pg_id FROM cte_gateway_list_1 c2 WHERE c2.language_code = c1.language_code ORDER BY pg_id FOR XML PATH('')),1,2,'')
		FROM cte_gateway_list_1 c1
		GROUP BY c1.language_code
	)

	INSERT INTO #tbl_gateway (language_code, gateway_list)
	SELECT language_code, gateway_list
	FROM cte_gateway_list_2
	
	------------------------------------------------------------------------------------------------------------------------------------------------------------

	;WITH cte_language_used
	AS
	(
		SELECT language_code FROM dbo.master_payment_gateway_language WITH (NOLOCK) GROUP BY language_code
	)

	SELECT l.language_code, l.language_name, l.status_active,
		show_delete = CASE WHEN cl.language_code IS NOT NULL THEN 'N' ELSE 'Y' END,
		gateway_list = ISNULL(tbl.gateway_list,'')
	FROM dbo.master_language l WITH (NOLOCK)
	LEFT JOIN cte_language_used cl ON l.language_code = cl.language_code
	LEFT JOIN #tbl_gateway tbl ON l.language_code = tbl.language_code
	ORDER BY l.language_code
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterLanguageListGateway]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterLanguageListGateway]
(
	@language_code varchar(5),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Language

	select * from dbo.master_language with (nolock)
	select * from dbo.master_payment_gateway_language with (nolock)

	EXEC spMasterLanguageListGateway @language_code='th-TH', @stamp_user=''
	EXEC spMasterLanguageListGateway @language_code='en-Us', @stamp_user=''
	EXEC spMasterLanguageListGateway @language_code='vi-Vn', @stamp_user=''
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF NOT EXISTS(SELECT language_code FROM dbo.master_language WITH (NOLOCK) WHERE language_code = @language_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Language not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	/*
		select yang ada di master_payment_gateway_language
		select yang ga ada di master_payment_gateway_language, tapi master_gateway active
	*/
	SELECT l.pg_id, pg_name = g.gateway_name, language_status = 'Y', gateway_status = ISNULL(g.status_active,'N')
	FROM dbo.master_payment_gateway_language l WITH (NOLOCK)
	LEFT JOIN dbo.master_gateway g WITH (NOLOCK) ON l.pg_id = g.gateway_id
	WHERE l.language_code = @language_code

	UNION ALL

	SELECT g.gateway_id, g.gateway_name, language_status = 'N', gateway_status = g.status_active
	FROM dbo.master_gateway g WITH (NOLOCK)
	LEFT JOIN dbo.master_payment_gateway_language l WITH (NOLOCK) ON g.gateway_id = l.pg_id AND l.language_code = @language_code
	WHERE g.status_active = 'Y'
	AND l.pg_id IS NULL
	ORDER BY language_status DESC, pg_id

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterLanguageStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterLanguageStatusActive]
(
	@language_code varchar(5),
	@status_active varchar(1), --Y/N
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Language

	select * from dbo.master_language with (nolock)

	EXEC spMasterLanguageStatusActive @language_code='th-TH', @status_active='N', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT language_code FROM dbo.master_language WITH (NOLOCK) WHERE language_code = @language_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Language not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @status_active = 'N'
	BEGIN
		IF EXISTS(SELECT language_code FROM dbo.master_payment_gateway_language WITH (NOLOCK) WHERE language_code = @language_code AND status_active = 'Y')
		BEGIN
			SELECT @result_code = 1, @error_message = 'Language used by Gateway'
			SELECT @result_code, @error_message
			RETURN
		END
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.master_language
		SET	status_active = @status_active,
			date_updated = dbo.fnGetDateGMT7()
		WHERE language_code = @language_code

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMenuAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMenuAdd]
(
	@menu_id varchar(10),
	@menu_name varchar(50),
	@page_source nvarchar(400),
	@menu_note varchar(200) = '',
	@stamp_user varchar(20)	
)
AS
BEGIN
/*
	Developer > Master > Menu

	EXEC spMasterMenuAdd @menu_id='XX1', @menu_name='Bioskop XX1', @page_source='', @menu_note='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime
			
	SET @menu_id = UPPER(@menu_id)

	IF @menu_id = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu ID empty'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF @menu_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu Name empty'
		SELECT @result_code, @error_message
		RETURN
	END
	------------------------------------------------------------------------------------------

	IF EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu already exists'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------------------------

	BEGIN TRY
		BEGIN TRANSACTION
			SET @getdate = dbo.fnGetDateGMT7()
			
			INSERT INTO dbo.master_menu(menu_id, menu_name, page_source, status_active, create_date, menu_note, module_list)
			VALUES(@menu_id, @menu_name, @page_source, 'Y', @getdate, @menu_note, '')

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMenuDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMenuDelete]
(
	@menu_id VARCHAR(10),
	@menu_name VARCHAR(50), --graylog
	@stamp_user VARCHAR(20)
)
AS
BEGIN
/*
	Developer > Master > Menu
	
	EXEC spMasterMenuDelete @menu_id='', @menu_name='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @error_code int, @error_message varchar(100)
	
	IF NOT EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Menu not found'
		SELECT @error_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT menu_id FROM dbo.master_module_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Menu used at Module'
		SELECT @error_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT menu_id FROM dbo.user_group_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Menu used at User Group'
		SELECT @error_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
			DELETE FROM dbo.master_menu
			WHERE menu_id = @menu_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @error_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @error_code, @error_message
		RETURN
	END CATCH

	SELECT @error_code = 1, @error_message = 'Success'
	SELECT @error_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMenuEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMenuEdit]
(
	@menu_id VARCHAR(10),
	@menu_name VARCHAR(50),
	@page_source nvarchar(400),
	@menu_note VARCHAR(200) = '',
	@stamp_user VARCHAR(20)
)
AS
BEGIN
/*
	Developer > Master > Menu
	
	EXEC spMasterMenuEdit @menu_id='', @menu_name='', @page_source='', @menu_note='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @error_code int, @error_message varchar(100)
			
	IF @menu_name = ''
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Menu Name empty'
		SELECT @error_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Menu not found'
		SELECT @error_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
			UPDATE dbo.master_menu
			SET	menu_name = @menu_name,
				page_source = @page_source,
				menu_note = @menu_note
			WHERE menu_id = @menu_id

			UPDATE dbo.user_group_menu SET menu_name = @menu_name WHERE menu_id = @menu_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @error_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @error_code, @error_message
		RETURN
	END CATCH

	SELECT @error_code = 1, @error_message = 'Success'
	SELECT @error_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMenuEditStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMenuEditStatus]    
(
	@menu_id VARCHAR(10),
	@type varchar(10), -- ACTIVE,SHOWPROD
	@status_active VARCHAR(1)
)
AS
BEGIN
/*
	EXEC spMenuEditStatus @menu_id=1, @status_active='Y'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @error_code INT, @error_message VARCHAR(8000)

	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Status invalid'
		SELECT @error_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Menu not found'
		SELECT @error_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION

		IF(@type = 'ACTIVE')
		BEGIN
			UPDATE dbo.master_menu
			SET	status_active = @status_active
			WHERE menu_id = @menu_id
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @error_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @error_code, @error_message
		RETURN
	END CATCH

	SELECT @error_code = 1, @error_message = 'Success'
	SELECT @error_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMenuList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMenuList]
(
	@page int,
	@page_size int,
	@menu_name varchar(50),
	@page_source nvarchar(200),
	@stamp_user varchar(50)
)
AS
/*
	Developer > Master > Menu

	EXEC spMasterMenuList @page=1, @page_size=50, @menu_name='', @page_source='', @stamp_user=''
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(100),
			@total_rows int

	SET @menu_name = CASE @menu_name WHEN '' THEN '%' ELSE '%'+@menu_name+'%' END
	SET @page_source = CASE @page_source WHEN '' THEN '%' ELSE '%'+@page_source+'%' END
	
	SELECT @total_rows = COUNT(*)
	FROM dbo.master_menu WITH (NOLOCK)
	WHERE menu_name LIKE @menu_name
	AND page_source LIKE @page_source

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT @total_rows

	;WITH cte_menu_used
	AS
	(
		SELECT menu_id FROM dbo.master_module_menu WITH (NOLOCK) GROUP BY menu_id
		UNION 
		SELECT menu_id FROM dbo.user_group_menu WITH (NOLOCK) GROUP BY menu_id
	)

	SELECT m.menu_id, m.menu_name, m.page_source, m.status_active, 
		show_delete = CASE WHEN c.menu_id is not null THEN 'N' else 'Y' END,
		m.menu_note, m.module_list
	FROM dbo.master_menu m WITH (NOLOCK)
	LEFT JOIN cte_menu_used c ON m.menu_id = c.menu_id
	WHERE m.menu_name LIKE @menu_name
	AND m.page_source LIKE @page_source
	ORDER BY m.menu_name
	OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMenuListModule]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMenuListModule]
(
	@menu_id varchar(10),
	@menu_name varchar(50), --graylog
	@stamp_user varchar(50)
)
AS
/*
	Developer > Master > Menu > [Module]

	EXEC spMasterMenuListModule @menu_id='RFI', @menu_name='', @stamp_user=''

	select * from master_menu
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	IF NOT EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu not found'
		SELECT @result_code, @error_message
		RETURN	
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
	
	SELECT mn.module_menu_id, mn.module_id, module_name = ISNULL(md.module_name,'') , mn.section_id, section_name = ISNULL(sc.section_name,'')
	FROM dbo.master_module_menu mn WITH (NOLOCK)
	LEFT JOIN dbo.master_module md WITH (NOLOCK) ON mn.module_id = md.module_id
	LEFT JOIN dbo.master_section sc WITH (NOLOCK) ON mn.section_id = sc.section_id
	WHERE mn.menu_id = @menu_id
	ORDER BY md.module_name
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMenuStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMenuStatusActive]
(
	@menu_id VARCHAR(10),
	@menu_name VARCHAR(50), --graylog
	@status_active nvarchar(1), --Y/N
	@stamp_user VARCHAR(20)
)
AS
BEGIN
/*
	Developer > Master > Menu
	
	EXEC spMasterMenuStatusActive @menu_id='', @menu_name='', @status_active='Y', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @error_code int, @error_message varchar(100)
			
	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Status Invalid'
		SELECT @error_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Menu not found'
		SELECT @error_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
			UPDATE dbo.master_menu
			SET	status_active = @status_active
			WHERE menu_id = @menu_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @error_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @error_code, @error_message
		RETURN
	END CATCH

	SELECT @error_code = 1, @error_message = 'Success'
	SELECT @error_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantAdd]
(
    @company_id varchar(3),
    @operator_id varchar(2),
	@merchant_group_id varchar(20),
	@merchant_code varchar(20),
    @merchant_name nvarchar(50),
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant

	select * from merchant_master with (nolock)

	rf_column_list merchant_master

	EXEC spMasterMerchantAdd @company_id='000', @operator_id='00', @merchant_group_id='MGDEV', @merchant_code='MCDEV', @merchant_name='Merchant Dev', @stamp_user='developer13'

*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@payment_channel_name nvarchar(200), 
			@getdate datetime

	IF @company_id = '' OR @operator_id = '' OR @merchant_group_id = '' OR @merchant_code = '' OR @merchant_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameter'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT merchant_code FROM dbo.merchant_master WITH (NOLOCK) WHERE merchant_code = @merchant_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant already exists'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF NOT EXISTS(SELECT company_id FROM dbo.master_merchant_group WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id AND merchant_group_id = @merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION
		
		SET @getdate = dbo.fnGetDateGMT7()

		INSERT INTO dbo.merchant_master(company_id, operator_id, merchant_group_id, merchant_code, merchant_name, status_active, create_date)
		VALUES(@company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_name, 'Y', @getdate)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantCurrencyAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantCurrencyAdd]
(
	@merchant_code varchar(20),
	@currency varchar(10),
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant

	select * from dbo.merchant_master with (nolock)

	EXEC PacmanMainDB.dbo.spMasterMerchantCurrencyAdd @merchant_code='MCDEV2', @currency='IDR', @stamp_user='developer13'
*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20), @merchant_name nvarchar(50), @payment_channel_name nvarchar(100),
			@getdate datetime

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master WITH (NOLOCK) WHERE merchant_code = @merchant_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT currency FROM dbo.master_currency WITH (NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Merchant Currency exists'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT merchant_code FROM dbo.merchant_master_balance WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Merchant Balance exists'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------------------
	SELECT	@company_id = company_id, 
			@operator_id = operator_id, 
			@merchant_group_id = merchant_group_id, 
			@merchant_code = merchant_code, 
			@merchant_name = merchant_name
	FROM dbo.merchant_master WITH (NOLOCK)
	WHERE merchant_code = @merchant_code 

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		INSERT INTO dbo.merchant_master_currency(company_id, operator_id, merchant_group_id, merchant_code, merchant_name, currency, 
			status_active, settlement_min, settlement_max, settlement_fee_percent, settlement_fix_rate, topup_fee_percent, topup_fix_rate, settlement_password, create_date)
		VALUES(@company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_name, @currency, 
			'Y', 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, '', @getdate)

		INSERT INTO dbo.merchant_master_balance(company_id, operator_id, merchant_group_id, merchant_code, merchant_name, currency, 
			merchant_balance_fundin, merchant_balance_fundout, merchant_outstanding_fundin, merchant_outstanding_fundout, merchant_daily_fundin, merchant_daily_fundout, date_updated)
		VALUES(@company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_name, @currency, 
			0.00, 0.00, 0.00, 0.00, 0.00, 0.00, @getdate)
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantCurrencyDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantCurrencyDelete]
(
	@merchant_code varchar(20),
	@currency varchar(10),
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant

	select * from dbo.merchant_master with (nolock)

	EXEC PacmanMainDB.dbo.spMasterMerchantCurrencyDelete @merchant_code='MCDEV2', @currency='IDR', @stamp_user='developer13'
*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master WITH (NOLOCK) WHERE merchant_code = @merchant_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT currency FROM dbo.master_currency WITH (NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
		AND NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_balance WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Merchant Currency already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	
	BEGIN TRY
		BEGIN TRANSACTION

		DELETE FROM dbo.merchant_master_currency WHERE merchant_code = @merchant_code AND currency = @currency

		DELETE FROM dbo.merchant_master_balance WHERE merchant_code = @merchant_code AND currency = @currency

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantCurrencyList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantCurrencyList]
(
	@merchant_code varchar(20),
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant
	
	select * from dbo.merchant_master with (nolock)

	EXEC PacmanMainDB.dbo.spMasterMerchantCurrencyList @merchant_code='MCDEV2', @stamp_user=''
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master WITH (NOLOCK) WHERE merchant_code = @merchant_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT m.currency, c.status_active, selected = 'Y'
	FROM dbo.merchant_list m WITH (NOLOCK)
	LEFT JOIN dbo.master_currency c WITH (NOLOCK) ON m.currency = c.currency
	WHERE m.merchant_code = @merchant_code

	UNION ALL

	SELECT c.currency, c.status_active, selected = 'N'
	FROM dbo.master_currency c WITH (NOLOCK)
	LEFT JOIN dbo.merchant_list m WITH (NOLOCK) ON m.merchant_code = @merchant_code AND c.currency = m.currency
	WHERE m.merchant_code IS NULL
	ORDER BY selected DESC, currency
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantDelete]
(
    @merchant_code varchar(20),
    @stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant
	
	select * from merchant_master with (nolock)

	rf_column_list merchant_master

	EXEC spMasterMerchantDelete @merchant_code='MCDEV', @stamp_user='developer13'

*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master WITH (NOLOCK) WHERE merchant_code = @merchant_code)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Merchant already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND status_active = 'Y')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant has currency'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT merchant_code FROM dbo.merchant_master_balance WITH (NOLOCK) WHERE merchant_code = @merchant_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant been used by Balance'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------

	BEGIN TRY
		BEGIN TRANSACTION
		
		DELETE FROM dbo.merchant_master WHERE merchant_code = @merchant_code

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantEdit]
(
    @merchant_code varchar(20),
    @merchant_name nvarchar(50),
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant

	select * from merchant_master with (nolock)

	rf_column_list merchant_master

	EXEC spMasterMerchantEdit @merchant_code='MCDEV2', @merchant_name='Merchant Dev 2A', @stamp_user='developer13'

*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime, @merchant_name_old nvarchar(50)

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master WITH (NOLOCK) WHERE merchant_code = @merchant_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @merchant_name_old = merchant_name FROM dbo.merchant_master WITH (NOLOCK) WHERE merchant_code = @merchant_code

	-----------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION
		
		SET @getdate = dbo.fnGetDateGMT7()

		IF @merchant_name_old <> @merchant_name
		BEGIN			
			UPDATE dbo.merchant_master SET merchant_name = @merchant_name WHERE merchant_code = @merchant_code

			UPDATE dbo.merchant_master_currency SET merchant_name = @merchant_name WHERE merchant_code = @merchant_code

			UPDATE dbo.merchant_master_balance SET merchant_name = @merchant_name WHERE merchant_code = @merchant_code

			UPDATE dbo.merchant_list SET merchant_name = @merchant_name WHERE merchant_code = @merchant_code

			--UPDATE dbo.merchant_setting SET merchant_name = @merchant_name WHERE merchant_code = @merchant_code

			/*

select column_name = c.name, table_name = t.name, ty.name, c.max_length, c.precision, c.scale, 
	[type_name] = case ty.name 
		when 'decimal' then 'decimal ('+cast(c.precision as varchar)+','+cast(c.scale as varchar)+')' 
		when 'varchar' then 'varchar ('+cast(c.max_length as varchar)+')' 
		when 'nvarchar' then 'nvarchar ('+cast(c.max_length / 2 as varchar)+')' 
		else ty.name end
from PacmanMainDB.sys.tables t 
inner join PacmanMainDB.sys.columns c on t.object_id = c.object_id
inner join PacmanMainDB.sys.types ty on c.user_type_id = ty.user_type_id
where c.name like 'merchant_name'
and t.name not in ('merchant_master','merchant_master_currency','merchant_master_balance','merchant_list','merchant_setting')
order by c.name, t.name
go

			*/
			--merchant_adjustment_list
			--merchant_balance
			--merchant_settlement_list
			--merchant_settlement_payment
			--merchant_settlement_pending
			--merchant_settlement_temp
			--merchant_statement_idr
			--merchant_statement_myr
			--merchant_statement_thb
			--merchant_statement_vnd
			--merchant_topup_bank
			--merchant_topup_list
			--merchant_transaction_history_fundin_idr
			--merchant_transaction_history_fundin_idr_log
			--merchant_transaction_history_fundin_myr
			--merchant_transaction_history_fundin_thb
			--merchant_transaction_history_fundin_vnd
			--merchant_transaction_history_fundin_vnd_log
			--merchant_transaction_history_fundout_idr
			--merchant_transaction_history_fundout_myr
			--merchant_transaction_history_fundout_thb
			--merchant_transaction_history_fundout_vnd
			--merchant_transaction_history_fundout_vnd_log
			--merchant_transaction_notify_fundin_idr
			--merchant_transaction_notify_fundin_log
			--merchant_transaction_notify_fundin_myr
			--merchant_transaction_notify_fundin_thb
			--merchant_transaction_notify_fundin_vnd
			--merchant_transaction_notify_fundout_idr
			--merchant_transaction_notify_fundout_log
			--merchant_transaction_notify_fundout_myr
			--merchant_transaction_notify_fundout_thb
			--merchant_transaction_notify_fundout_vnd
			--merchant_transaction_payment_html_thb
			--merchant_transaction_pending_fundin_idr
			--merchant_transaction_pending_fundin_myr
			--merchant_transaction_pending_fundin_thb
			--merchant_transaction_pending_fundin_vnd
			--merchant_transaction_pending_fundout_idr
			--merchant_transaction_pending_fundout_myr
			--merchant_transaction_pending_fundout_thb
			--merchant_transaction_pending_fundout_vnd
			--merchant_transaction_virtual_account_idr
			--operator_settlement_payment_temp
			--operator_topup_temp
			--user_merchant_group_merchant
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantGroupAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantGroupAdd]
(
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@module_id varchar(10),
	@merchant_group_name nvarchar(50),
	@module_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Merchant Group

	select * from dbo.master_merchant_group with (nolock) order by company_id, merchant_group_id

	EXEC spMasterMerchantGroupAdd @company_id='', @operator_id='', @merchant_group_id='', @module_id='', @merchant_group_name='', @module_name='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@merchant_group_code varchar(25), @company_name nvarchar(50), @operator_name nvarchar(50)

	IF @company_id = '' OR @operator_id = '' OR @merchant_group_id = '' OR @merchant_group_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameters'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS (SELECT company_id FROM dbo.master_company WITH (NOLOCK) WHERE company_id = @company_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Company Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS (SELECT operator_id FROM dbo.master_operator WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Operator Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @module_id <> '' AND NOT EXISTS (SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT merchant_group_id FROM dbo.master_merchant_group WITH (NOLOCK) WHERE merchant_group_id = @merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Group already exists'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @company_name = company_name FROM dbo.company_master WITH (NOLOCK) WHERE company_id = @company_id
	SELECT @operator_name = operator_name FROM dbo.operator_master WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id

	SET @merchant_group_code = @company_id + @operator_id + @merchant_group_id

	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO dbo.master_merchant_group(merchant_group_code, company_id, company_name, operator_id,merchant_group_id, merchant_group_name, module_id, status_active, date_created)
		VALUES(@merchant_group_code, @company_id, @company_name, @operator_id, @merchant_group_id, @merchant_group_name, @module_id, 'Y', dbo.fnGetDateGMT7())

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantGroupDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantGroupDelete]
(
	@merchant_group_code varchar(25),
	@merchant_group_name nvarchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Merchant Group

	select * from dbo.master_merchant_group with (nolock) order by company_id, merchant_group_id

	EXEC spMasterMerchantGroupDelete @merchant_group_code='00000MGDEV', @merchant_group_name='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@company_id varchar(3), @operator_id varchar(3), @merchant_group_id varchar(20)
		
	IF NOT EXISTS(SELECT merchant_group_code FROM dbo.master_merchant_group WITH (NOLOCK) WHERE merchant_group_code = @merchant_group_code)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Merchant Group Deleted'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @merchant_group_id = merchant_group_id
	FROM dbo.master_merchant_group WITH (NOLOCK) WHERE merchant_group_code = @merchant_group_code

	IF EXISTS(SELECT company_id FROM dbo.master_user WITH (NOLOCK) WHERE merchant_group_id = @merchant_group_id)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Merchant Group has User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT merchant_group_id FROM dbo.merchant_list WITH (NOLOCK) WHERE merchant_group_id = @merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Group has Merchant'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------------------

	BEGIN TRY
		BEGIN TRANSACTION
	
		DELETE FROM dbo.master_merchant_group
		WHERE merchant_group_id = @merchant_group_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantGroupEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantGroupEdit]
(
	@merchant_group_code varchar(25),
	@module_id varchar(10),
	@merchant_group_name nvarchar(50),
	@module_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Merchant Group

	select * from dbo.master_module with (nolock) order by module_id
	select * from dbo.master_merchant_group with (nolock) order by company_id, merchant_group_id

	EXEC spMasterMerchantGroupEdit @merchant_group_code='00000MGDEV', @module_id='MCG', @merchant_group_name='Developer 1', @module_name='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code int, @error_message varchar(1000),
			@module_id_old varchar(10), @merchant_group_id varchar(20), @getdate datetime, @merchant_group_name_old nvarchar(100)
			
	IF @merchant_group_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Group Name empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_group_id FROM dbo.master_merchant_group WITH (NOLOCK) WHERE merchant_group_code = @merchant_group_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module not found'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------
	--Module Change	
	SELECT	@module_id_old = module_id,
			@merchant_group_name_old = merchant_group_name,
			@merchant_group_id = merchant_group_id
	FROM dbo.master_merchant_group WITH (NOLOCK) 
	WHERE merchant_group_code = @merchant_group_code
	
	IF @module_id_old <> '' AND @module_id_old <> @module_id
	BEGIN		
		IF EXISTS(SELECT module_id FROM dbo.user_group WITH (NOLOCK) WHERE merchant_group_id = @merchant_group_id AND module_id = @module_id_old)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Module used in User Group'
			SELECT @result_code, @error_message
			RETURN
		END 
	END
	
	------------------------------------------------------------

	BEGIN TRY
		BEGIN TRANSACTION
	
		SET @getdate = dbo.fnGetDateGMT7()

		UPDATE dbo.master_merchant_group
		SET	merchant_group_name = @merchant_group_name,
			module_id = @module_id,
			date_updated = @getdate
		WHERE merchant_group_code = @merchant_group_code
		
		IF @merchant_group_name_old <> @merchant_group_name
		BEGIN
			UPDATE dbo.user_group SET merchant_group_name = @merchant_group_name WHERE merchant_group_id = @merchant_group_id
			UPDATE dbo.user_group_menu SET merchant_group_name = @merchant_group_name WHERE merchant_group_id = @merchant_group_id
			UPDATE dbo.user_group_user SET merchant_group_name = @merchant_group_name WHERE merchant_group_id = @merchant_group_id
			UPDATE dbo.master_user SET merchant_group_name = @merchant_group_name WHERE merchant_group_id = @merchant_group_id
		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantGroupList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantGroupList]
(
	@company_id varchar(3),
	@operator_id varchar(2),
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Merchant Group

	select * from dbo.master_merchant_group with (nolock)

	EXEC PacmanMainDB.dbo.spMasterMerchantGroupList @company_id='', @operator_id='', @page=1, @page_size=25, @stamp_user='opdem13'
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(100),
			@total_rows int
	
	SET @company_id = CASE @company_id WHEN '' THEN '%' ELSE @company_id END
	SET @operator_id = CASE @operator_id WHEN '' THEN '%' ELSE @operator_id END

	SELECT @total_rows = COUNT(1)
	FROM dbo.master_merchant_group WITH (NOLOCK) 
	WHERE company_id LIKE @company_id
	AND operator_id LIKE @operator_id 

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT @total_rows

	;WITH cte_merchant_group_used
	AS
	(
		SELECT company_id, operator_id, merchant_group_id FROM dbo.master_user WITH (NOLOCK) WHERE merchant_group_id <> '' GROUP BY company_id, operator_id, merchant_group_id
		UNION 
		SELECT company_id, operator_id, merchant_group_id FROM dbo.merchant_list WITH (NOLOCK) GROUP BY company_id, operator_id, merchant_group_id
	), cte_merchant
	AS
	(
		SELECT merchant_group_id, merchant_name FROM dbo.merchant_list WITH (NOLOCK) GROUP BY merchant_group_id, merchant_name
	), cte_merchant_list
	AS
	(
		SELECT merchant_group_id, merchant_list = STUFF((SELECT ', '+ct2.merchant_name FROM cte_merchant ct2 WHERE ct1.merchant_group_id = ct2.merchant_group_id 
			ORDER BY ct2.merchant_name FOR XML PATH('')),1,2,'') 
		FROM cte_merchant ct1
		GROUP BY merchant_group_id
	)
	
	SELECT mg.merchant_group_code, mg.company_id, c.company_name, mg.operator_id, o.operator_name, mg.merchant_group_id, mg.merchant_group_name, mg.status_active, 
		mg.module_id, module_name = ISNULL(m.module_name,''), 
		show_delete = CASE WHEN cte.merchant_group_id IS NOT NULL THEN 'N' ELSE 'Y' END,
		merchant_list = ISNULL(cml.merchant_list,'')
	FROM dbo.master_merchant_group mg WITH (NOLOCK)
	INNER JOIN dbo.master_company c WITH (NOLOCK) ON mg.company_id = c.company_id
	INNER JOIN dbo.master_operator o WITH (NOLOCK) ON mg.company_id = o.company_id AND mg.operator_id = o.operator_id
	LEFT JOIN dbo.master_module m WITH (NOLOCK) ON mg.module_id = m.module_id
	LEFT JOIN cte_merchant_group_used cte ON mg.company_id = cte.company_id AND mg.operator_id = cte.operator_id AND mg.merchant_group_id = cte.merchant_group_id
	LEFT JOIN cte_merchant_list cml ON mg.merchant_group_id = cml.merchant_group_id
	WHERE mg.company_id LIKE @company_id
	AND mg.operator_id LIKE @operator_id
	ORDER BY c.company_name, o.operator_name, mg.merchant_group_name
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantGroupStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantGroupStatusActive]
(
	@merchant_group_code varchar(25),
	@status_active varchar(1), --Y/N
	@merchant_group_name nvarchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Merchant Group

	select * from dbo.master_merchant_group with (nolock) order by company_id, merchant_group_id

	EXEC spMasterMerchantGroupStatusActive @merchant_group_code='00000MGDEV', @status_active='N', @merchant_group_name='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@company_id varchar(3), @operator_id varchar(3), @merchant_group_id varchar(20)
			
	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_group_code FROM dbo.master_merchant_group WITH (NOLOCK) WHERE merchant_group_code = @merchant_group_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------------------

	SELECT	@company_id = company_id, 
			@operator_id = operator_id, 
			@merchant_group_id = merchant_group_id
	FROM dbo.master_merchant_group WITH (NOLOCK) 
	WHERE merchant_group_code = @merchant_group_code

	IF EXISTS(SELECT merchant_group_id FROM dbo.merchant_list WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id AND merchant_group_id = @merchant_group_id AND merchant_status = 'Y')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Group has Active Merchant'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------------------

	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.master_merchant_group
		SET	status_active = @status_active,
			date_updated = dbo.fnGetDateGMT7()
		WHERE merchant_group_code = @merchant_group_code

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantList]
(
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant
	
	select * from dbo.merchant_master with (nolock)

	EXEC PacmanMainDB.dbo.spMasterMerchantList @company_id='', @operator_id='', @merchant_group_id='', @page=1, @page_size=70, @stamp_user=''
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@total_rows int
	
	SELECT	@company_id = CASE @company_id WHEN '' THEN '%' ELSE @company_id END,
			@operator_id = CASE @operator_id WHEN '' THEN '%' ELSE @operator_id END,
			@merchant_group_id = CASE @merchant_group_id WHEN '' THEN '%' ELSE @merchant_group_id END
	
	SELECT @total_rows = COUNT(1)
	FROM dbo.merchant_master WITH (NOLOCK) 
	WHERE company_id LIKE @company_id
	AND operator_id LIKE @operator_id
	AND merchant_group_id LIKE @merchant_group_id
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows

	;WITH cte_merchant_used
	AS
	(
		SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) GROUP BY merchant_code
	)

	SELECT ml.company_id, c.company_name, ml.operator_id, o.operator_name, ml.merchant_group_id, mg.merchant_group_name, ml.merchant_code, ml.merchant_name, 
		ml.status_active, show_delete = CASE WHEN cte.merchant_code IS NULL THEN 'Y' ELSE 'N' END
	FROM dbo.merchant_master ml WITH (NOLOCK)
	LEFT JOIN dbo.master_company c WITH (NOLOCK) ON ml.company_id = c.company_id
	LEFT JOIN dbo.master_operator o WITH (NOLOCK) ON ml.operator_id = o.operator_id
	LEFT JOIN dbo.master_merchant_group mg WITH (NOLOCK) ON ml.company_id = mg.company_id AND ml.operator_id = mg.operator_id AND ml.merchant_group_id = mg.merchant_group_id
	LEFT JOIN cte_merchant_used cte ON ml.merchant_code = cte.merchant_code
	WHERE ml.company_id LIKE @company_id
	AND ml.operator_id LIKE @operator_id
	AND ml.merchant_group_id LIKE @merchant_group_id
	ORDER BY ml.merchant_name
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantPaymentChannelAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantPaymentChannelAdd]
(	
	@merchant_code varchar(20),
	@currency varchar(10),
	@payment_channel_id varchar(20),
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant

	select * from dbo.merchant_master with (nolock)

	EXEC PacmanMainDB.dbo.spMasterMerchantCurrencyAdd @merchant_code='MCDEV2', @currency='IDR', @payment_channel_id='IB' @stamp_user='developer13'
*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20), @merchant_name nvarchar(50), @payment_channel_name nvarchar(100),
			@merchant_id varchar(10), @merchant_pass_key varchar(10),
			@getdate datetime

	SET @merchant_pass_key = ''

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master WITH (NOLOCK) WHERE merchant_code = @merchant_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT currency FROM dbo.master_currency WITH (NOLOCK) WHERE currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT channel_id FROM dbo.master_payment_channel WITH (NOLOCK) WHERE channel_id = @payment_channel_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Method not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT currency FROM dbo.master_payment_gateway_fundin_bank WITH (NOLOCK) WHERE currency = @currency AND payment_channel_id = @payment_channel_id AND status_active = 'Y')
	AND NOT EXISTS(SELECT currency FROM dbo.master_payment_gateway_fundout_bank WITH (NOLOCK) WHERE currency = @currency AND payment_channel_id = @payment_channel_id AND status_active = 'Y')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Method not valid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT merchant_code FROM dbo.merchant_list WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency AND payment_channel_id = @payment_channel_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Payment Channel exists'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------------------
	SELECT @merchant_id = LEFT(REPLACE(NEWID(),'-',''),10)

	IF EXISTS(SELECT merchant_id FROM dbo.merchant_list WITH (NOLOCK) WHERE merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Merchant ID exists, try again'
		SELECT @result_code, @error_message
		RETURN
	END
	------------------------------------------------------------------------------------

	SELECT	@company_id = company_id, 
			@operator_id = operator_id, 
			@merchant_group_id = merchant_group_id, 
			@merchant_code = merchant_code, 
			@merchant_name = merchant_name
	FROM dbo.merchant_master WITH (NOLOCK)
	WHERE merchant_code = @merchant_code 

	SELECT @payment_channel_name = channel_name FROM dbo.master_payment_channel WITH (NOLOCK) WHERE channel_id = @payment_channel_id

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()
		
		INSERT INTO dbo.merchant_list (company_id, operator_id, merchant_group_id, merchant_code, merchant_id, merchant_name, currency, 
			payment_channel_id, payment_channel_name, merchant_pass_key, merchant_status, date_created, settlement_password)
		VALUES(@company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_id, @merchant_name, @currency, 
			@payment_channel_id, @payment_channel_name, @merchant_pass_key, 'Y', @getdate, '')
			
		INSERT INTO dbo.merchant_setting(company_id, operator_id, merchant_group_id, merchant_code, merchant_id, merchant_name, currency, 
			settlement_min, settlement_max, settlement_fee_percent, settlement_fix_rate, topup_fee_percent, topup_fix_rate, 
			pg_pool_id, gateway_fee_type, date_created, 
			fundin_status, fundin_amount_min, fundin_amount_max, fundin_fee_percent, fundin_fix_rate, fundin_referral_fee_percent, 
			fundout_status, fundout_amount_min, fundout_amount_max, fundout_fee_percent, fundout_fix_rate, fundout_referral_fee_percent)
		VALUES(@company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_id, @merchant_name, @currency, 
			0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 
			'', '', @getdate, 
			'N', 0.00, 0.00, 0.00, 0.00, 0.00, 
			'N', 0.00, 0.00, 0.00, 0.00, 0.00)

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantPaymentChannelDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantPaymentChannelDelete]
(	
	@merchant_id varchar(10),
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant

	select * from dbo.merchant_list with (nolock)

	EXEC PacmanMainDB.dbo.spMasterMerchantPaymentChannelDelete @merchant_id='MCDEV2', @stamp_user='developer13'
*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF NOT EXISTS(SELECT merchant_id FROM dbo.merchant_list WITH (NOLOCK) WHERE merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Merchant Payment Channel already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION

		DELETE FROM dbo.merchant_list WHERE merchant_id = @merchant_id
	
		DELETE FROM dbo.merchant_setting WHERE merchant_id = @merchant_id

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterMerchantPaymentChannelList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterMerchantPaymentChannelList]
(
	@merchant_code varchar(20),
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant > Currency > [Payment Channel]
	
	select * from dbo.merchant_list with (nolock)

	EXEC PacmanMainDB.dbo.spMasterMerchantPaymentChannelList @merchant_code='XVP01', @stamp_user=''
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master WITH (NOLOCK) WHERE merchant_code = @merchant_code)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------

	CREATE TABLE #tbl_gateway (currency varchar(10), payment_channel_id varchar(20), status_active varchar(1))

	INSERT INTO #tbl_gateway (currency, payment_channel_id, status_active)
	SELECT p.currency, p.payment_channel_id, 'Y' 
	FROM dbo.master_payment_gateway_fundin_bank p WITH (NOLOCK) 
	INNER JOIN dbo.merchant_master_currency c WITH (NOLOCK) ON c.merchant_code = @merchant_code AND p.currency = c.currency
	WHERE p.status_active = 'Y' 
	GROUP BY p.currency, p.payment_channel_id
	
	UNION
	
	SELECT p.currency, p.payment_channel_id, 'Y' 
	FROM dbo.master_payment_gateway_fundout_bank p WITH (NOLOCK) 
	INNER JOIN dbo.merchant_master_currency c WITH (NOLOCK) ON c.merchant_code = @merchant_code AND p.currency = c.currency
	WHERE p.status_active = 'Y' 
	GROUP BY p.currency, p.payment_channel_id

	------------------------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT m.currency, m.payment_channel_id, m.payment_channel_name, tbl.status_active, selected = 'Y', m.merchant_id, m.merchant_pass_key 
	FROM dbo.merchant_list m WITH (NOLOCK)
	LEFT JOIN #tbl_gateway tbl WITH (NOLOCK) ON m.currency = tbl.currency AND m.payment_channel_id = tbl.payment_channel_id
	WHERE m.merchant_code = @merchant_code

	UNION ALL

	SELECT tbl.currency, tbl.payment_channel_id, c.channel_name, tbl.status_active, selected = 'N', merchant_id = '', merchant_pass_key = ''
	FROM #tbl_gateway tbl WITH (NOLOCK)
	LEFT JOIN dbo.merchant_list m WITH (NOLOCK) ON m.merchant_code = @merchant_code AND tbl.currency = m.currency AND tbl.payment_channel_id = m.payment_channel_id
	LEFT JOIN dbo.master_payment_channel c WITH (NOLOCK) ON tbl.payment_channel_id = c.channel_id
	WHERE m.merchant_code IS NULL
	ORDER BY selected DESC, currency, payment_channel_id

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleAdd]
(
	@module_id varchar(10),
	@module_name varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Module

	EXEC spMasterModuleAdd @module_id='', @module_name='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime
		
	IF @module_id = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module ID empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @module_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module Name empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT module_id FROM dbo.master_module WITH(NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Already exists'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		INSERT INTO dbo.master_module(module_id, module_name, status_active, create_date)
		VALUES(@module_id, @module_name, 'Y', @getdate)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleAuthAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleAuthAdd]
(
	@module_id varchar(10),
	@menu_id varchar(10),
	@auth_id varchar(10)
)
AS
BEGIN
/*
	select * from master_module_menu
	[spMasterModuleMenuAdd] 'DEV','DEV', 'MN1', 1
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	------------------------------------------------------------------------
	DECLARE @result_code INT, @error_message VARCHAR(8000)
		, @user_group_id varchar(10)
		, @row int, @id_temp varchar(200), @web_name varchar(100), @action_name varchar(100)

	SELECT 	@user_group_id = '', @web_name = '', @action_name = ''

	------------------------------------------------------------------------

	IF @auth_id = '' OR @module_id = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'invalid parameters'
		SELECT @result_code, @error_message
		RETURN
	END
	IF NOT EXISTS(SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF NOT EXISTS(SELECT authorization_id FROM dbo.master_authorization WITH (NOLOCK) WHERE authorization_id = @auth_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Authorization not found'
		SELECT @result_code, @error_message
		RETURN
	END
	IF NOT EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION
		IF EXISTS(SELECT module_id FROM dbo.master_module_authorization WITH(NOLOCK) WHERE module_id = @module_id AND authorization_id = @auth_id)
		BEGIN
			UPDATE dbo.master_module_authorization
			SET status_active = 'Y',
				menu_id = @menu_id
			 WHERE module_id = @module_id AND authorization_id = @auth_id
		END
		ELSE
		BEGIN
			INSERT INTO dbo.master_module_authorization(module_id, authorization_id, menu_id, status_active, create_date)
			VALUES(@module_id, @auth_id, @menu_id, 'Y', dbo.fnGetDateGMT7())
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''

	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleAuthorizationAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleAuthorizationAdd]
(
	@module_id varchar(10),
	@menu_id varchar(10),
	@authorization_id varchar(10),
	@authorization_name varchar(10), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Module > Menu > Auth
	Desc : Add Auth ke Module

	select * from master_authorization

	rf_param spMasterModuleAuthorizationAdd

	EXEC spMasterModuleAuthorizationAdd @module_id='DEV', @menu_id='RSP', @authorization_id='RSP0000005', @authorization_name='', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@getdate datetime
	
	IF @module_id = '' OR @menu_id = '' OR @authorization_id = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameters'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF NOT EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT authorization_id FROM dbo.master_authorization WITH (NOLOCK) WHERE menu_id = @menu_id AND authorization_id = @authorization_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Authorization not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		IF NOT EXISTS(SELECT authorization_id FROM dbo.master_module_authorization WITH (NOLOCK) WHERE menu_id = @menu_id AND authorization_id = @authorization_id)
		BEGIN
			INSERT INTO dbo.master_module_authorization(module_id, menu_id, authorization_id, status_active, create_date)
			VALUES(@module_id, @menu_id, @authorization_id, 'Y', @getdate)
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleAuthorizationDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleAuthorizationDelete]
(
	@module_authorization_id int,
	@module_id varchar(10),
	@menu_id varchar(10),
	@authorization_id varchar(10),
	@authorization_name varchar(10), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Module > Menu > Auth
	Desc : Remove Auth from Module

	select * from master_module_authorization

	rf_param spMasterModuleAuthorizationDelete

	EXEC spMasterModuleAuthorizationDelete @module_authorization_id=2, @module_id='DEV', @menu_id='RSP', @authorization_id='RSP0000005', @authorization_name='', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@getdate datetime
	
	IF NOT EXISTS(SELECT module_authorization_id FROM dbo.master_module_authorization WITH (NOLOCK) WHERE module_authorization_id = @module_authorization_id AND module_id = @module_id
		AND menu_id = @menu_id AND authorization_id = @authorization_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Authorization already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT authorization_id FROM dbo.user_group_authorization WITH (NOLOCK) WHERE authorization_id = @authorization_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Authorization used in User Group'
		SELECT @result_code, @error_message
		RETURN
	END
	
	BEGIN TRY
		BEGIN TRANSACTION

		DELETE FROM dbo.master_module_authorization WHERE module_authorization_id = @module_authorization_id
	
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleDelete]
(
	@module_id varchar(10),
	@module_name varchar(50), --supaya masuk graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Module

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF @module_id = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module ID empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module WITH(NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT module_id FROM dbo.master_module_menu WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module has menu'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		DELETE FROM dbo.master_module
		WHERE module_id = @module_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleEdit]
(
	@module_id varchar(10),
	@module_name varchar(50),
	@stamp_user VARCHAR(20)
)
AS
BEGIN
/*
	Developer > Master > Module

	EXEC spMasterModuleAdd @module_id='', @module_name='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF @module_id = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module ID empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @module_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module Name empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
	BEGIN TRANSACTION
	
		UPDATE dbo.master_module
		SET	module_name = @module_name
		WHERE module_id = @module_id

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleEditStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleEditStatus]
(
	@module_id VARCHAR(10),
	@status_active VARCHAR(1)
)
AS
BEGIN
/*
	EXEC spMenuEditStatus @MenuID=1, @StatusActive='Y'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @error_code INT, @error_message VARCHAR(8000)

	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Status invalid'
		SELECT @error_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @error_code = 39999, @error_message = 'Menu not found'
		SELECT @error_code, @error_message
		RETURN
	END


	BEGIN TRY

	BEGIN TRANSACTION
			UPDATE dbo.master_module
			SET	status_active = @status_active
			WHERE module_id = @module_id

	COMMIT TRANSACTION

	SELECT @error_code = 1, @error_message = 'Success'
	SELECT @error_code, @error_message

	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @error_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @error_code, @error_message
	END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleEditStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleEditStatusActive]
(
	@module_id VARCHAR(10),
	@status_active VARCHAR(1),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Module

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
	BEGIN TRANSACTION

		UPDATE dbo.master_module
		SET	status_active = @status_active
		WHERE module_id = @module_id

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spMasterModuleList]
(
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Module

	EXEC spMasterModuleList @stamp_user=''

*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	;WITH cte_module_used
	AS
	(
		SELECT module_id FROM dbo.master_module_menu WITH (NOLOCK) GROUP BY module_id
	)

	SELECT m.module_id, m.module_name, show_delete = CASE WHEN c.module_id IS NOT NULL THEN 'N' ELSE 'Y' END
	FROM dbo.master_module m WITH (NOLOCK)
	LEFT JOIN cte_module_used c ON m.module_id = c.module_id
	ORDER BY m.module_name
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleMenuAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleMenuAdd]
(
	@module_id varchar(10),
	@menu_id varchar(10),
	@section_id varchar(10),
	@module_name varchar(50) = '', --graylog
	@menu_name varchar(50) = '',  --graylog
	@section_name varchar(50) = '',  --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Module > Menu
	Desc : Insert Menu ke Module di Section

	select * from user_group


	select * from dbo.master_module_menu WITH (NOLOCK)
	select * from dbo.master_module_section WITH (NOLOCK)
	EXEC PacmanMainDB.dbo.spMasterModuleMenuAdd @module_id='DEV', @module_name='Developer', @menu_id='CSP', @menu_name='Change Settlement Password', @section_id='DEV', @section_name='Developer', @stamp_user='developer15'
	EXEC spMasterModuleMenuAdd @module_id='', @menu_id='', @section_id='', @module_name='', @menu_name='', @section_name='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	------------------------------------------------------------------------
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@menu_order INT, @module_list varchar(500)
	
	SET @module_list = ''

	IF @module_id = '' OR @menu_id = '' OR @section_id = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameters'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF NOT EXISTS(SELECT section_id FROM dbo.master_module_section WITH (NOLOCK) WHERE module_id = @module_id AND section_id = @section_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Section not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu not found'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		SELECT @menu_order = MAX(menu_order) + 1 FROM dbo.master_module_menu WITH (NOLOCK)
		SET @menu_order = ISNULL(@menu_order,1)

		IF EXISTS(SELECT menu_id FROM dbo.master_module_menu WITH (NOLOCK) WHERE module_id = @module_id AND menu_id = @menu_id)
		BEGIN
			UPDATE dbo.master_module_menu
			SET section_id = @section_id,
				menu_order = @menu_order --pindah section dipindahin ke bawah
			WHERE module_id = @module_id
			AND menu_id = @menu_id

			/*UPDATE m
			SET m.section_id = @section_id
			FROM dbo.user_group_menu m INNER JOIN dbo.user_group u ON u.user_group_id = m.user_group_id
			WHERE u.module_id = @module_id
			AND m.menu_id = @menu_id*/
		END
		ELSE
		BEGIN
			INSERT INTO dbo.master_module_menu(module_id, menu_id, menu_order, section_id, status_active, create_date)
			VALUES(@module_id, @menu_id, @menu_order, @section_id, 'Y', dbo.fnGetDateGMT7())
		END

		--master_menu
		SELECT @module_list = @module_list+'  '+md.module_name
		FROM dbo.master_module_menu mn WITH (NOLOCK)
		LEFT JOIN dbo.master_module md WITH (NOLOCK) ON mn.module_id = md.module_id
		WHERE mn.menu_id = @menu_id
		ORDER BY md.module_name

		UPDATE dbo.master_menu
		SET module_list = @module_list
		WHERE menu_id = @menu_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleMenuAddListSection]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleMenuAddListSection]
(
	@module_id varchar(10),
	@menu_id varchar(10),
	@module_name varchar(50), --graylog
	@menu_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Module > Menu 
	List : section yang bisa dipilih untuk (Add / Edit section) (master_module_section)

	EXEC spMasterModuleMenuAddListSection @module_id='DEV', @menu_id='', @module_name='', @menu_name='', @stamp_user=''
	
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@section_id varchar(10)

	IF @menu_id <> '' AND NOT EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	--------------------------------------------------
	SELECT @section_id = section_id
	FROM dbo.master_module_menu WITH (NOLOCK)
	WHERE module_id = @module_id 
	AND menu_id = @menu_id

	SET @section_id = ISNULL(@section_id,'')

	--------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT module_section_id, section_id, section_name, selected = CASE WHEN section_id = @section_id THEN 'Y' ELSE 'N' END
	FROM dbo.master_module_section WITH (NOLOCK)
	WHERE module_id = @module_id
	ORDER BY section_order
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleMenuDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleMenuDelete]
(
	@module_menu_id INT,
	@module_name varchar(50) = '', --graylog
	@menu_name varchar(50) = '',  --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Module > Menu
	Desc : Menu di Module Delete

	select * from dbo.master_module_menu WITH (NOLOCK)
	
	EXEC spMasterModuleMenuDelete @module_menu_id=0, @module_name='', @menu_name='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@module_id VARCHAR(10), @menu_id VARCHAR(10), @module_list varchar(500)
		
	SET @module_list = ''

	IF @module_menu_id = 0
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameters'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT menu_id FROM dbo.master_module_menu WITH (NOLOCK) WHERE module_menu_id = @module_menu_id)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Menu not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @module_id = module_id, @menu_id = menu_id
	FROM dbo.master_module_menu WITH (NOLOCK) 
	WHERE module_menu_id = @module_menu_id

	IF EXISTS (SELECT module_id FROM dbo.user_group_menu WITH (NOLOCK) WHERE module_id = @module_id AND menu_id = @menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu used in User Group'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		DELETE FROM dbo.master_module_menu
		WHERE module_menu_id = @module_menu_id

		--master_menu
		SELECT @module_list = @module_list+'  '+md.module_name
		FROM dbo.master_module_menu mn WITH (NOLOCK)
		LEFT JOIN dbo.master_module md WITH (NOLOCK) ON mn.module_id = md.module_id
		WHERE mn.menu_id = @menu_id
		ORDER BY md.module_name

		UPDATE dbo.master_menu
		SET module_list = @module_list
		WHERE menu_id = @menu_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleMenuEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleMenuEdit]
(
	@module_menu_id INT,
	@section_id varchar(10),
	@module_name varchar(50) = '', --graylog
	@menu_name varchar(50) = '',  --graylog
	@section_name varchar(50) = '',  --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Desc : Menu di Module ganti Section

	select * from dbo.master_module WITH (NOLOCK)
	select * from dbo.master_module_menu WITH (NOLOCK)
	select * from dbo.master_module_section WITH (NOLOCK)

	EXEC spMasterModuleMenuEdit @module_menu_id=0, @section_id='DDEV', @module_name='', @menu_name='', @section_name='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	------------------------------------------------------------------------
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@module_id VARCHAR(10), @menu_id VARCHAR(10)
		
	IF @section_id = '' OR @module_menu_id = 0
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameters'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT section_id FROM dbo.master_module_menu WITH (NOLOCK) WHERE module_menu_id = @module_menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT section_id FROM dbo.master_module_section WITH (NOLOCK) WHERE section_id = @section_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Section not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @module_id = module_id, @menu_id = menu_id
	FROM dbo.master_module_menu WITH (NOLOCK) 
	WHERE module_menu_id = @module_menu_id
	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		UPDATE dbo.master_module_menu
		SET section_id = @section_id
		WHERE module_menu_id = @module_menu_id

		UPDATE dbo.user_group_menu
		SET section_id = @section_id
		WHERE module_id = @module_id AND menu_id = @menu_id
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleMenuList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleMenuList]
(
	@module_id varchar(10),
	@section_id varchar(10),
	@menu_name varchar(50),
	@section_name varchar(50), --graylog
	@module_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
/*
	Developer > Master > Module > Section

	select * from dbo.master_authorization WITH (NOLOCK)
	select * from dbo.master_menu WITH (NOLOCK) order by menu_name
	select * from dbo.master_module_section WITH (NOLOCK) order by module_id, section_order
	select * from dbo.master_module_menu WITH (NOLOCK) order by module_id, section_id, menu_order
	
	EXEC spMasterModuleMenuList @module_id='DEV', @section_id='', @menu_name='', @section_name='', @module_name='', @stamp_user=''

	Step :
	A. pilih section : module_menu muncul hanya section yang dipilih + menu yang lom dipakai di module ini
	B. section = empty : module_menu muncul semua section + menu yang lom dipakai di module ini
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(8000)
	
	SET @menu_name = CASE WHEN @menu_name = '' THEN '%' ELSE '%'+@menu_name+'%' END
	SET @section_id  =CASE WHEN @section_id = '' THEN '%' ELSE @section_id END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	--Menu
	SELECT mm.module_menu_id, mm.module_id, ms.module_name, mm.section_id, s.section_name, mm.menu_id, m.menu_name, s.section_order, mm.menu_order,
		menu_status_active = m.status_active, m.menu_note
	FROM dbo.master_module_menu mm WITH (NOLOCK)
	INNER JOIN dbo.master_menu m WITH (NOLOCK) ON mm.menu_id = m.menu_id
	INNER JOIN dbo.master_module ms WITH (NOLOCK) ON mm.module_id = ms.module_id
	INNER JOIN dbo.master_module_section s WITH (NOLOCK) ON mm.module_id = s.module_id AND mm.section_id = s.section_id
	WHERE mm.module_id = @module_id
	AND m.menu_name LIKE @menu_name
	AND mm.section_id LIKE @section_id

	UNION ALL

	SELECT module_menu_id = 0, module_id = '', module_name = '', section_id = '', section_name = '', m.menu_id, m.menu_name, section_order = 0, menu_order = 0,
		menu_status_active = m.status_active, m.menu_note
	FROM dbo.master_menu m WITH (NOLOCK)
	LEFT JOIN dbo.master_module_menu mm WITH (NOLOCK) ON mm.module_id = @module_id AND m.menu_id = mm.menu_id
	WHERE mm.module_id IS NULL --lom dipilih
	AND m.menu_name LIKE @menu_name
	AND m.status_active = 'Y'
	ORDER BY module_id DESC, section_order, section_name, menu_order, menu_name


	--Authorization
	SELECT ma.module_authorization_id, ma.module_id, ms.module_name, ma.menu_id, menu_name = ISNULL(m.menu_name,''), ma.authorization_id, a.authorization_name
	FROM dbo.master_module_authorization ma WITH (NOLOCK)
	INNER JOIN dbo.master_module_menu mn WITH (NOLOCK) ON ma.module_id = mn.module_id AND ma.menu_id = mn.menu_id
	INNER JOIN dbo.master_module ms WITH (NOLOCK) ON ma.module_id = ms.module_id
	INNER JOIN dbo.master_authorization a WITH (NOLOCK) ON ma.menu_id = a.menu_id AND ma.authorization_id = a.authorization_id
	LEFT JOIN dbo.master_menu m WITH (NOLOCK) ON ma.menu_id = m.menu_id
	WHERE ma.module_id = @module_id
	AND m.menu_name LIKE @menu_name
	AND mn.section_id LIKE @section_id

	UNION ALL

	SELECT module_authorization_id = 0, module_id = '', module_name = '', a.menu_id, menu_name = ISNULL(m.menu_name,''), a.authorization_id, a.authorization_name
	FROM dbo.master_authorization a WITH (NOLOCK)
	LEFT JOIN dbo.master_menu m WITH (NOLOCK) ON a.menu_id = m.menu_id
	LEFT JOIN dbo.master_module_authorization ma WITH (NOLOCK) ON ma.module_id = @module_id AND a.authorization_id = ma.authorization_id
	WHERE ma.module_id IS NULL --lom dipilih
	AND m.menu_name LIKE @menu_name
	AND a.status_active = 'Y'
	ORDER BY module_id DESC, menu_id, authorization_name
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleMenuOrder]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleMenuOrder]
(
	@module_menu_id int,
	@module_menu_id_new int,
	@module_name varchar(50), --graylog
	@menu_name varchar(50), --graylog
	@menu_name_new varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Module > Menu

	EXEC spMasterModuleMenuOrder @module_menu_id=3, @module_menu_id_new=4, @module_name='', @menu_name='', @menu_name_new='', @stamp_user=''
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@module_id varchar(10), @section_id varchar(10), @menu_order int, 
			@module_id_new varchar(10), @section_id_new varchar(10), @menu_order_new int,
			@last_menu_order int, @getdate datetime

	IF @module_menu_id = 0 OR @module_menu_id_new = 0
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Module Menu ID'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module_menu WITH (NOLOCK) WHERE module_menu_id = @module_menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module Menu ID not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @module_id = module_id, @section_id = section_id, @menu_order = menu_order FROM dbo.master_module_menu WITH (NOLOCK) WHERE module_menu_id = @module_menu_id
	SELECT @module_id_new = module_id, @section_id = section_id, @menu_order_new = menu_order FROM dbo.master_module_menu WITH (NOLOCK) WHERE module_menu_id = @module_menu_id_new

	IF @module_id <> @module_id_new
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module is difference'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF @section_id <> @section_id_new
	BEGIN
		SELECT @result_code = 1, @error_message = 'Section is difference'
		SELECT @result_code, @error_message
		RETURN
	END
	
	CREATE TABLE #tbl_order
	(
		module_menu_id int,
		menu_order int,
		row_id int PRIMARY KEY,
		row_id_new int,
		menu_order_new int
	)

	------------------------------------------------------------------------
	--Move Up
	IF @menu_order > @menu_order_new
	BEGIN
		;WITH cte_order
		AS
		(
			SELECT module_menu_id, menu_order, row_id = row_number() over(order by menu_order)
			FROM dbo.master_module_menu WITH (NOLOCK)
			WHERE module_id = @module_id
			AND section_id = @section_id
			AND menu_order BETWEEN @menu_order_new AND @menu_order
		)

		INSERT INTO #tbl_order(module_menu_id, menu_order, row_id, row_id_new, menu_order_new)
		SELECT module_menu_id, menu_order, row_id, row_id_new = row_id + 1, -1
		FROM cte_order
		ORDER BY row_id

		UPDATE t1
		SET menu_order_new = t2.menu_order
		FROM #tbl_order t1 WITH (NOLOCK)
		INNER JOIN #tbl_order t2 WITH (NOLOCK) ON t1.row_id_new = t2.row_id

		UPDATE #tbl_order
		SET menu_order_new = @menu_order_new
		WHERE menu_order_new = -1
	END
	ELSE --Move Down
	IF @menu_order < @menu_order_new
	BEGIN
		;WITH cte_order
		AS
		(
			SELECT module_menu_id, menu_order, row_id = row_number() over(order by menu_order)
			FROM dbo.master_module_menu WITH (NOLOCK)
			WHERE module_id = @module_id
			AND menu_order BETWEEN @menu_order AND @menu_order_new
		)

		INSERT INTO #tbl_order(module_menu_id, menu_order, row_id, row_id_new, menu_order_new)
		SELECT module_menu_id, menu_order, row_id, row_id_new = row_id - 1, -1
		FROM cte_order
		ORDER BY row_id

		UPDATE t1
		SET menu_order_new = t2.menu_order
		FROM #tbl_order t1 WITH (NOLOCK)
		INNER JOIN #tbl_order t2 WITH (NOLOCK) ON t1.row_id_new = t2.row_id

		UPDATE #tbl_order
		SET menu_order_new = @menu_order_new
		WHERE menu_order_new = -1

	END
		
	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'MENU_ORDER'

		UPDATE m
		SET menu_order = t.menu_order_new
		FROM dbo.master_module_menu m WITH (NOLOCK)
		INNER JOIN #tbl_order t WITH (NOLOCK) ON m.module_menu_id = t.module_menu_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleSectionEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleSectionEdit]
(
	@module_section_id int,
	@module_name varchar(50), --graylog
	@section_id varchar(10), --graylog
	@section_name varchar(50),
	@section_icon varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	select * from master_module with (nolock)
	select * from master_module_section with (nolock) order by module_id, section_order

	EXEC spMasterModuleSectionEdit @module_section_id=1, @module_name='', @section_id='DREPORT', @section_name='Report 1', @stamp_user=''
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF @module_section_id = 0
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Module ID'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @section_id = '' OR @section_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Section ID/Name'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module_section WITH (NOLOCK) WHERE module_section_id = @module_section_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module Section ID not found'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		UPDATE dbo.master_module_section
		SET section_name = @section_name,
			section_icon = @section_icon
		WHERE module_section_id = @module_section_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleSectionList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleSectionList]
(
	@module_id varchar(10),
	@module_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Module > Section

	EXEC spMasterModuleSectionList @module_id='MCG', @module_name='', @stamp_user=''
	
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF NOT EXISTS(SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @module_name = module_name
	FROM dbo.master_module WITH (NOLOCK)
	WHERE module_id = @module_id

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
	
	SELECT ms.module_section_id, ms.module_id, mm.module_name, ms.section_id, ms.section_name, ms.section_order, status_active = 'Y', order_number = 1
	FROM dbo.master_module_section ms WITH (NOLOCK)
	LEFT JOIN dbo.master_module mm WITH (NOLOCK) ON ms.module_id = mm.module_id
	WHERE ms.module_id = @module_id

	UNION 

	SELECT module_section_id = 0, module_id = @module_id, module_name = @module_name, s.section_id, s.section_name, section_order = 0, status_active = 'N', order_number = 2
	FROM dbo.master_section s WITH (NOLOCK)
	LEFT JOIN dbo.master_module_section mm WITH (NOLOCK) ON s.section_id = mm.section_id AND mm.module_id = @module_id
	WHERE mm.module_id IS NULL
	ORDER BY order_number, section_order, section_name
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleSectionOrder]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleSectionOrder]
(
	@module_section_id int,
	@module_section_id_new int,
	@module_name varchar(50), --graylog
	@section_name varchar(50), --graylog
	@section_name_new varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Module > Section

	EXEC spMasterModuleSectionOrder @module_section_id=3, @module_section_id_new=6, @module_name='', @section_name='', @section_name_new='', @stamp_user=''
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@module_id varchar(10), @section_order int, 
			@module_id_new varchar(10), @section_order_new int,
			@last_section_order int

	IF @module_section_id = 0 OR @module_section_id_new = 0
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Module Section ID'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module_section WITH (NOLOCK) WHERE module_section_id = @module_section_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module Section ID not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @module_id = module_id, @section_order = section_order FROM dbo.master_module_section WITH (NOLOCK)  WHERE module_section_id = @module_section_id
	SELECT @module_id_new = module_id, @section_order_new = section_order FROM dbo.master_module_section WITH (NOLOCK)  WHERE module_section_id = @module_section_id_new

	IF @module_id <> @module_id_new
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module is difference'
		SELECT @result_code, @error_message
		RETURN
	END
	
	CREATE TABLE #tbl_order(
		module_section_id int,
		section_order int,
		row_id int,
		row_id_new int,
		section_order_new int
	)

	------------------------------------------------------------------------
	--Move Up
	IF @section_order > @section_order_new  --Big to Small
	BEGIN
		/*
			row_id		row_id_new
				1			2
				2			3
				3			4
		*/
		;WITH cte_order
		AS
		(
			SELECT module_section_id, section_order, row_id = ROW_NUMBER() OVER(ORDER BY section_order)
			FROM dbo.master_module_section WITH (NOLOCK)
			WHERE module_id = @module_id
			AND section_order BETWEEN @section_order_new AND @section_order
		)

		INSERT INTO #tbl_order(module_section_id, section_order, row_id, row_id_new, section_order_new)
		SELECT module_section_id, section_order, row_id, row_id_new = row_id + 1, -1 --yang atas geser ke bawah
		FROM cte_order
		ORDER BY row_id
		
		UPDATE t1
		SET section_order_new = t2.section_order
		FROM #tbl_order t1 WITH (NOLOCK)
		INNER JOIN #tbl_order t2 WITH (NOLOCK) ON t1.row_id_new = t2.row_id

		UPDATE #tbl_order
		SET section_order_new = @section_order_new
		WHERE section_order_new = -1
	END
	--Move Down
	ELSE IF @section_order < @section_order_new -- Small to Big
	BEGIN
		/*
			row_id		row_id_new
				1			0
				2			1
				3			2
		*/
		;WITH cte_order
		AS
		(
			SELECT module_section_id, section_order, row_id = row_number() over(order by section_order)
			FROM dbo.master_module_section WITH (NOLOCK)
			WHERE module_id = @module_id
			AND section_order BETWEEN @section_order AND @section_order_new
		)

		INSERT INTO #tbl_order(module_section_id, section_order, row_id, row_id_new, section_order_new)
		SELECT module_section_id, section_order, row_id, row_id_new = row_id - 1, -1
		FROM cte_order
		ORDER BY row_id

		UPDATE t1
		SET section_order_new = t2.section_order
		FROM #tbl_order t1 WITH (NOLOCK)
		INNER JOIN #tbl_order t2 WITH (NOLOCK) ON t1.row_id_new = t2.row_id

		UPDATE #tbl_order
		SET section_order_new = @section_order_new
		WHERE section_order_new = -1
	END
	
	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'MENU_ORDER'

		UPDATE m
		SET section_order = t.section_order_new
		FROM dbo.master_module_section m WITH (NOLOCK)
		INNER JOIN #tbl_order t WITH (NOLOCK) ON m.module_section_id = t.module_section_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterModuleSectionStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterModuleSectionStatusActive]
(
	@module_section_id varchar(10),
	@status_active varchar(1), --Y/N
	@module_id varchar(10) = '',
	@module_name varchar(50), --graylog
	@section_id varchar(10) = '',
	@section_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Module > Section

	EXEC spMasterModuleSectionStatusActive @module_section_id=22, @status_active='Y', @module_id='', @module_name= '', @section_id='', @section_name='', @stamp_user=''
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@section_order_max int, @getdate datetime, @section_icon varchar(50)

	IF @module_id = '' AND @module_name <> ''
	BEGIN
		SELECT @module_id = module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_name = @module_name
	END

	IF @section_id = '' AND @section_name <> ''
	BEGIN
		SELECT @section_id = section_id FROM dbo.master_section WITH (NOLOCK) WHERE section_name = @section_name
	END
	
	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT section_id FROM dbo.master_section WITH (NOLOCK) WHERE section_id = @section_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Section not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF (@status_active = 'N') AND EXISTS(SELECT module_id FROM dbo.master_module_menu WITH (NOLOCK) WHERE module_id = @module_id AND section_id = @section_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module Section have Menu'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF (@status_active = 'N') AND NOT EXISTS(SELECT module_section_id FROM dbo.master_module_section WITH (NOLOCK) WHERE module_section_id = @module_section_id)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Module Section already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------------------------------------------------------

	SELECT @section_icon = section_icon FROM dbo.master_section WITH (NOLOCK) WHERE section_id = @section_id

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		IF @status_active = 'Y' AND @module_section_id = 0
		BEGIN
			SELECT @section_order_max = MAX(section_order) FROM dbo.master_module_section WITH (NOLOCK)
			SET @section_order_max = ISNULL(@section_order_max,0) + 1

			INSERT INTO dbo.master_module_section(module_id, section_id, section_name, section_order, create_date, section_icon, status_active)
			VALUES(@module_id, @section_id, @section_name, @section_order_max, @getdate, @section_icon, 'Y')
		END
		ELSE IF @status_active = 'N'
		BEGIN
			DELETE FROM dbo.master_module_section WHERE module_section_id = @module_section_id
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterOperatorAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterOperatorAdd]
(
	@company_id varchar(3),
	@operator_id varchar(2),
	@module_id varchar(10),
	@company_name nvarchar(50), --graylog
	@operator_name nvarchar(50), --graylog
	@module_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > operator

	select * from dbo.master_operator with (nolock) order by company_id, operator_id

	EXEC spMasterOperatorAdd @company_id='', @operator_id='', @module_id='', @company_name='', @operator_name='', @module_name='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF @company_id = '' OR @operator_id = '' OR @operator_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameters'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS (SELECT company_id FROM dbo.master_company WITH (NOLOCK) WHERE company_id = @company_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Company Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @module_id <> '' AND NOT EXISTS (SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT operator_id FROM dbo.master_operator WITH (NOLOCK) WHERE operator_id = @operator_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Operator already exists'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @company_name = company_name FROM dbo.company_master WITH (NOLOCK) WHERE company_id = @company_id

	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO dbo.master_operator(company_id, company_name, operator_id, operator_name, google_auth_status, module_id, status_active, date_created)
		VALUES(@company_id, @company_name, @operator_id, @operator_name, 'N', @module_id, 'Y', dbo.fnGetDateGMT7())

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterOperatorDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterOperatorDelete]
(
	@company_id varchar(3),
	@operator_id varchar(2),
	@company_name nvarchar(50), --graylog
	@operator_name nvarchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Operator

	EXEC spMasterOperatorDelete @company_id='', @operator_id='', @company_name='', @operator_name='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
		
	IF NOT EXISTS(SELECT operator_id FROM dbo.master_operator WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Operator Deleted'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT operator_id FROM dbo.master_operator WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id AND status_active = 'Y')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Operator is Active'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT [user_id] FROM dbo.master_user WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Operator has User'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		DELETE FROM dbo.master_operator
		WHERE company_id = @company_id
		AND operator_id = @operator_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterOperatorEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterOperatorEdit]
(
	@company_id varchar(3),
	@operator_id varchar(2),
	@module_id varchar(10),
	@company_name nvarchar(50), --graylog
	@operator_name nvarchar(50),
	@module_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Operator

	select * from dbo.master_module with (nolock) order by module_id
	select * from dbo.master_operator with (nolock) order by company_id, operator_id

	EXEC spMasterOperatorEdit @company_id='VTP', @operator_id='TP', @module_id='OPR', @company_name='', @operator_name='VertuPay', @module_name='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@module_id_old varchar(10)
			
	IF @operator_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Operator Name empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT operator_id FROM dbo.master_operator WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Operator not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module WITH (NOLOCK) WHERE module_id = @module_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Module not found'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------
	--Module Change
	SELECT @module_id_old = module_id FROM dbo.master_operator WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id
	
	IF @module_id_old <> '' AND @module_id_old <> @module_id
	BEGIN		
		IF EXISTS(SELECT module_id FROM dbo.user_group WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id AND module_id = @module_id_old)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Module used in User Group'
			SELECT @result_code, @error_message
			RETURN
		END
	END
	------------------------------------------------------------

	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.master_operator
		SET	operator_name = @operator_name,
			module_id = @module_id,
			date_updated = dbo.fnGetDateGMT7()
		WHERE company_id = @company_id
		AND operator_id = @operator_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterOperatorList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterOperatorList]
(
	@company_id varchar(3),
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Operator

	select * from dbo.master_operator with (nolock)

	EXEC spMasterOperatorList @company_id='', @page=1, @page_size=50, @stamp_user=''
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(100),
			@total_rows int
	
	SET @company_id = CASE @company_id WHEN '' THEN '%' ELSE @company_id END

	SELECT @total_rows = COUNT(1)
	FROM dbo.master_Operator WITH (NOLOCK) 
	WHERE company_id LIKE @company_id

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT @total_rows

	;WITH cte_operator_used
	AS
	(
		SELECT company_id, operator_id FROM dbo.master_user WITH (NOLOCK) GROUP BY company_id, operator_id
	)

	SELECT o.company_id, c.company_name, o.operator_id, o.operator_name, o.status_active, 
		o.module_id, module_name = ISNULL(m.module_name,''), o.company_operator_id,
		show_delete = CASE WHEN cte.operator_id IS NOT NULL THEN 'N' ELSE 'Y' END
	FROM dbo.master_operator o WITH (NOLOCK) 
	INNER JOIN dbo.master_company c WITH (NOLOCK) ON o.company_id = c.company_id
	LEFT JOIN dbo.master_module m WITH (NOLOCK) ON o.module_id = m.module_id
	LEFT JOIN cte_operator_used cte ON o.company_id = cte.company_id AND o.operator_id = cte.operator_id
	WHERE o.company_id LIKE @company_id
	ORDER BY c.company_name, o.operator_name
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterOperatorStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterOperatorStatusActive]
(
	@company_id varchar(3),
	@operator_id varchar(2),
	@status_active varchar(1), --Y/N
	@company_name nvarchar(50), --graylog
	@operator_name nvarchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Operator

	select * from dbo.master_operator with (nolock) order by company_id, operator_id

	EXEC spMasterOperatorStatusActive @company_id='', @operator_id='', @status_active='Y', @company_name='', @operator_name='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT operator_id FROM dbo.master_operator WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Operator not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.master_operator
		SET	status_active = @status_active,
			date_updated = dbo.fnGetDateGMT7()
		WHERE company_id = @company_id
		AND operator_id = @operator_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterPaymentChannelAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterPaymentChannelAdd]
(
	@channel_id varchar(20),
	@channel_name nvarchar(200),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Payment Channel

	select * from dbo.master_payment_channel with (nolock)

	EXEC spMasterPaymentChannelAdd @channel_id='ST', @channel_name='Start', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)

	IF EXISTS(SELECT channel_id FROM dbo.master_payment_channel WITH (NOLOCK) WHERE channel_id = @channel_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Channel ID already exists'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO dbo.master_payment_channel(channel_id, channel_name, status_active, date_created, date_updated)
		VALUES(@channel_id, @channel_name, 'Y', dbo.fnGetDateGMT7(), dbo.fnGetDateGMT7())

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterPaymentChannelDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterPaymentChannelDelete]
(
	@channel_id varchar(20),
	@channel_name nvarchar(200), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Payment Channel

	select * from dbo.master_payment_channel with (nolock)

	EXEC spMasterPaymentChannelDelete @channel_id='ST', @channel_name='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
		
	IF NOT EXISTS(SELECT channel_id FROM dbo.master_payment_channel WITH (NOLOCK) WHERE channel_id = @channel_id)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Channel Deleted'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		DELETE FROM dbo.master_payment_channel
		WHERE channel_id = @channel_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterPaymentChannelEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterPaymentChannelEdit]
(
	@channel_id varchar(20),
	@channel_name nvarchar(200),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Payment Channel

	select * from dbo.master_payment_channel with (nolock)

	EXEC spMasterPaymentChannelEdit @channel_id='ST', @channel_name='STARTUP', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF @channel_id = '' OR @channel_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Data'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT channel_id FROM dbo.master_payment_channel WITH (NOLOCK) WHERE channel_id = @channel_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Channel not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.master_payment_channel
		SET	channel_name = @channel_name,
			date_updated = dbo.fnGetDateGMT7()
		WHERE channel_id = @channel_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterPaymentChannelList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterPaymentChannelList]
(
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Payment Channel

	EXEC spMasterPaymentChannelList @stamp_user=''
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(100)

	------------------------------------------------------------------------------------------------------------------------------------------------------------
	CREATE TABLE #tbl_fundin (payment_channel_id varchar(20), gateway_list varchar(2000))

	;WITH cte_fundin_list_1 --data
	AS
	(
		SELECT payment_channel_id, pg_id, currency FROM dbo.master_payment_gateway_fundin_bank WITH (NOLOCK) GROUP BY payment_channel_id, pg_id, currency
	), cte_fundin_list_2 --(IDR, THB, VND)
	AS
	(
		SELECT payment_channel_id, pg_id, currency_list = STUFF((SELECT ','+c2.currency 
			FROM cte_fundin_list_1 c2 WHERE c1.payment_channel_id = c2.payment_channel_id AND c1.pg_id = c2.pg_id ORDER BY currency FOR XML PATH('')),1,1,'')
		FROM cte_fundin_list_1 c1
		GROUP BY payment_channel_id, pg_id
	), cte_fundin_list_3 --V2P(IDR, THB, VND), DST(IDR)
	AS
	(
		SELECT payment_channel_id, gateway_list = STUFF((SELECT ', '+c2.pg_id+'('+c2.currency_list+')'
			FROM cte_fundin_list_2 c2 WHERE c1.payment_channel_id = c2.payment_channel_id ORDER BY pg_id FOR XML PATH('')),1,2,'')
		FROM cte_fundin_list_2 c1
		GROUP BY payment_channel_id
	)

	INSERT INTO #tbl_fundin (payment_channel_id, gateway_list)
	SELECT payment_channel_id, gateway_list
	FROM cte_fundin_list_3
	
	------------------------------------------------------------------------------------------------------------------------------------------------------------
	CREATE TABLE #tbl_fundout (payment_channel_id varchar(20), gateway_list varchar(2000))

	;WITH cte_fundout_list_1 --data
	AS
	(
		SELECT payment_channel_id, pg_id, currency FROM dbo.master_payment_gateway_fundout_bank WITH (NOLOCK) GROUP BY payment_channel_id, pg_id, currency
	), cte_fundout_list_2 --(IDR, THB, VND)
	AS
	(
		SELECT payment_channel_id, pg_id, currency_list = STUFF((SELECT ','+c2.currency 
			FROM cte_fundout_list_1 c2 WHERE c1.payment_channel_id = c2.payment_channel_id AND c1.pg_id = c2.pg_id ORDER BY currency FOR XML PATH('')),1,1,'')
		FROM cte_fundout_list_1 c1
		GROUP BY payment_channel_id, pg_id
	), cte_fundout_list_3 --V2P(IDR, THB, VND), DST(IDR)
	AS
	(
		SELECT payment_channel_id, gateway_list = STUFF((SELECT ', '+c2.pg_id+'('+c2.currency_list+')'
			FROM cte_fundout_list_2 c2 WHERE c1.payment_channel_id = c2.payment_channel_id ORDER BY pg_id FOR XML PATH('')),1,2,'')
		FROM cte_fundout_list_2 c1
		GROUP BY payment_channel_id
	)
		
	INSERT INTO #tbl_fundout (payment_channel_id, gateway_list)
	SELECT payment_channel_id, gateway_list
	FROM cte_fundout_list_3
		
	------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	;WITH cte_payment_channel_used
	AS
	(
		SELECT payment_channel_id FROM dbo.master_payment_gateway_fundin_bank WITH (NOLOCK) GROUP BY payment_channel_id
		UNION
		SELECT payment_channel_id FROM dbo.master_payment_gateway_fundout_bank WITH (NOLOCK) GROUP BY payment_channel_id
	)

	SELECT b.channel_id, b.channel_name, b.status_active,
		show_delete = CASE WHEN cp.payment_channel_id IS NOT NULL THEN 'N' ELSE 'Y' END,
		fundin_list =ISNULL( fi.gateway_list,''), fundout_list = ISNULL(fo.gateway_list,'')
	FROM dbo.master_payment_channel b WITH (NOLOCK)
	LEFT JOIN cte_payment_channel_used cp ON b.channel_id = cp.payment_channel_id
	LEFT JOIN #tbl_fundin fi ON b.channel_id = fi.payment_channel_id
	LEFT JOIN #tbl_fundout fo ON b.channel_id = fo.payment_channel_id
	ORDER BY b.channel_name
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterPaymentChannelPatching]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterPaymentChannelPatching]
(
	@channel_id varchar(20),
	@patching_type varchar(20), --FUNDIN, FUNDOUT
	@stamp_user varchar(20),
	@gateway_id varchar(20)
)
AS
BEGIN
/*
	Desc : update master_channel fund_in_list, fund_out_list
	ex. fund_in_list = V2P(IDR,THB), DST(IDR)

	exec spMasterPaymentChannelPatching @channel_id='IB', @patching_type='FUNDIN', @stamp_user=''
	exec spMasterPaymentChannelPatching @channel_id='QR', @patching_type='FUNDOUT', @stamp_user=''
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime, @fundin_list varchar(4000), @fundout_list varchar(4000)
			
	IF @patching_type NOT IN ('FUNDIN','FUNDOUT')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Patching Type invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @patching_type = 'FUNDIN'
	BEGIN
		BEGIN TRY
		BEGIN TRANSACTION
			--currency_fundin	
			/*
			1.
			IB V2P IDR	
			IB V2P THB	
			IB DST IDR

			2.
			V2P(IDR,THB), DST(IDR)
			*/
			SET @fundin_list = ''

			;WITH cte_fundin_1
			AS
			(
				SELECT payment_channel_id, pg_id, currency
				FROM dbo.master_payment_gateway_fundin_bank pb WITH (NOLOCK)
				WHERE payment_channel_id = @channel_id
				GROUP BY pg_id, currency,payment_channel_id
			), cte_fundin_2 --IDR,THB
			AS
			(
				SELECT c1.pg_id, currency_list = '('+STUFF((SELECT ','+c2.currency FROM cte_fundin_1 c2 WHERE c1.pg_id = c2.pg_id FOR XML PATH ('')), 1, 1, '')+')'
				FROM cte_fundin_1 c1
				GROUP BY c1.pg_id, c1.currency, c1.payment_channel_id
			)
			
			SELECT @fundin_list = CASE WHEN @fundin_list <> '' THEN ', ' ELSE @fundin_list END + c2.pg_id+'('+c2.currency_list+')'
			FROM cte_fundin_2 c2
			GROUP BY pg_id,currency_list

			UPDATE dbo.master_channel
			SET fundin_list = @fundin_list
			WHERE channel_id = @channel_id

		COMMIT TRANSACTION
		END TRY
		BEGIN CATCH
			ROLLBACK TRANSACTION
			SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
			SELECT @result_code, @error_message
			RETURN
		END CATCH
	END
	---------------------------------------------------------------------------------
	--FUNDOUT
	---------------------------------------------------------------------------------
	ELSE IF @patching_type = 'FUNDOUT'
	BEGIN
		BEGIN TRY
		BEGIN TRANSACTION
			--currency_fundin	
			/*
			1.
			IDR	IB	Y	
			IDR	QR	Y
			VND IB	N
			VND VA	N

			2.
			IDR IB QR Y
			VND IB VA N

			3.
			[green]IDR - IB, QR [/green]
			[red]VND - IB, VA [/green]
			*/
			;WITH cte_fundout_1
			AS
			(
				SELECT pb.pg_id, pb.currency, pb.payment_channel_id
				FROM dbo.master_payment_gateway_fundout_bank pb WITH (NOLOCK)
				WHERE pb.pg_id = @gateway_id
				GROUP BY pb.pg_id, pb.currency, pb.payment_channel_id
			), cte_fundout_2
			AS
			(
				SELECT c1.pg_id, c1.currency, pg.status_active, currency_list = STUFF((SELECT ', '+c2.payment_channel_id FROM cte_fundout_1 c2 WHERE c1.pg_id = c2.pg_id AND c1.currency = c2.currency FOR XML PATH ('')), 1, 2, '') 
				FROM cte_fundout_1 c1
				LEFT JOIN dbo.master_payment_gateway_fundout pg WITH (NOLOCK) ON c1.pg_id = pg.pg_id AND c1.currency = pg.currency
				GROUP BY c1.pg_id, c1.currency, pg.status_active
			), cte_fundout_3
			AS
			(
				SELECT pg_id, currency_fundout = STUFF((SELECT '\n'+CASE c2.status_active WHEN 'Y' THEN '[green]' ELSE '[red]' END + 
						c2.currency + ' - ' + c2.currency_list+CASE c2.status_active WHEN 'Y' THEN '[/green]' ELSE '[/red]' END  FROM cte_fundout_2 c2 WHERE c1.pg_id = c2.pg_id FOR XML PATH ('')), 1, 2, '') 
				FROM cte_fundout_2 c1
				GROUP BY pg_id
			)
			
			UPDATE g
			SET currency_fundout = c.currency_fundout
			FROM dbo.master_gateway g WITH (NOLOCK)
			INNER JOIN cte_fundout_3 c ON g.gateway_id = c.pg_id
		
		COMMIT TRANSACTION
		END TRY
		BEGIN CATCH
			ROLLBACK TRANSACTION
			SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
			SELECT @result_code, @error_message
			RETURN
		END CATCH
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterPaymentChannelStatusActive]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterPaymentChannelStatusActive]
(
	@channel_id varchar(20),
	@status_active varchar(1), --Y/N
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Payment Channel

	select * from dbo.master_payment_channel with (nolock) order by currency, bank_code

	EXEC spMasterPaymentChannelStatusActive @channel_id='ST', @status_active='N', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	IF @status_active NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT channel_id FROM dbo.master_payment_channel WITH (NOLOCK) WHERE channel_id = @channel_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Channel not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.master_payment_channel
		SET	status_active = @status_active,
			date_updated = dbo.fnGetDateGMT7()
		WHERE channel_id = @channel_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterSectionAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterSectionAdd]
(
	@section_id varchar(10),
	@section_name varchar(50),
	@section_icon varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Section

	select 8 from dbo.master_section with (nolock)

	EXEC spMasterSectionAdd @section_id='', @section_name='', @section_icon='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	IF @section_id = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Section ID empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @section_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Section Name empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT section_id FROM dbo.master_section WITH (NOLOCK) WHERE section_id = @section_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Already exists'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO dbo.master_section(section_id, section_name, section_icon, create_date)
		VALUES(@section_id, @section_name, @section_icon, dbo.fnGetDateGMT7())

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterSectionDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterSectionDelete]
(
	@section_id varchar(10),
	@section_name varchar(50), --buat graylog
	@stamp_user VARCHAR(20)
)
AS
BEGIN
/*
	Developer > Master > Section

	EXEC spMasterSectionDelete @section_id='XXX', @section_name='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	IF NOT EXISTS(SELECT section_id FROM dbo.master_section WITH (NOLOCK) WHERE section_id = @section_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Section not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT section_id FROM dbo.master_module_section WITH (NOLOCK) WHERE section_id = @section_id AND status_active = 'Y')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Section used at Module'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT section_id FROM dbo.user_group_menu WITH (NOLOCK) WHERE section_id = @section_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Section used at User Group'
		SELECT @result_code, @error_message
		RETURN
	END
	
	BEGIN TRY
		BEGIN TRANSACTION
	
		DELETE FROM dbo.master_section
		WHERE section_id = @section_id

		DELETE FROM dbo.master_module_section
		WHERE section_id = @section_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterSectionEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterSectionEdit]
(
	@section_id varchar(10),
	@section_name varchar(50),
	@section_icon varchar(50),
	@stamp_user VARCHAR(20)
)
AS
BEGIN
/*
	Developer > Master > Section

	EXEC spMasterSectionEdit @section_id='XXX', @section_name='Sextion X2', @section_icon='fav x2', @stamp_user='' 
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000)
	
	IF @section_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Section Name empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT section_id FROM dbo.master_section WITH (NOLOCK) WHERE section_id = @section_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Section not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.master_section
		SET	section_name = @section_name,
			section_icon = @section_icon
		WHERE section_id = @section_id

		UPDATE dbo.master_module_section
		SET	section_name = @section_name
		WHERE section_id = @section_id

		--UPDATE dbo.user_group_menu
		--SET	section_name = @section_name
		--WHERE section_id = @section_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterSectionList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterSectionList]
(
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Section

	EXEC spMasterSectionList @stamp_user=''
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)
			
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	;WITH cte_section_used
	AS
	(
		SELECT section_id from dbo.master_module_section WITH (NOLOCK) WHERE status_active = 'Y' GROUP BY section_id
	)

	SELECT s.section_id, s.section_name, s.section_icon, show_delete = CASE WHEN c.section_id IS NOT NULL THEN 'N' ELSE 'Y' END
	FROM dbo.master_section s WITH (NOLOCK)
	LEFT JOIN cte_section_used c ON s.section_id = c.section_id
	ORDER BY s.section_name
END


GO
/****** Object:  StoredProcedure [dbo].[spMasterUserAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterUserAdd]
(
	@level_id varchar(1),
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@user_login varchar(20),
	@user_name nvarchar(100),
	@password varchar(255),
	@email varchar(100) = '',
	@status_manager varchar(1) = 'N', --hanya developer muncul
	@status_supervisor varchar(1) = 'N', --buat manager dan supervisor
	@status_hidden varchar(1) = 'N', --hanya developer muncul
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	SELECT * FROM dbo.master_user WITH (NOLOCK)
	
	EXEC spMasterUserAdd @level_id='D', @company_id='', @operator_id='', @merchant_group_id='', 
		@user_login='developer54', @user_name='developer', @password='482c811da5d5b4bc6d497ffa98491e38', @email='', @stamp_user='developer13'
	EXEC spMasterUserAdd @level_id='C', @company_id='000', @operator_id='', @merchant_group_id='', 
		@user_login='company54', @user_name='', @password='482c811da5d5b4bc6d497ffa98491e38', @email='', @stamp_user='developer13'
	EXEC spMasterUserAdd @level_id='O', @company_id='000', @operator_id='00', @merchant_group_id='', 
		@user_login='operator54', @user_name='', @password='482c811da5d5b4bc6d497ffa98491e38', @email='', @stamp_user='developer13'
	EXEC spMasterUserAdd @level_id='M', @company_id='000', @operator_id='00', @merchant_group_id='MGDEV', 
		@user_login='merchant54', @user_name='', @password='482c811da5d5b4bc6d497ffa98491e38', @email='', @stamp_user='developer13' 
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code int, @error_message varchar(1000),
			@user_guid varchar(20), @counter int,
			@getdate datetime, @merchant_group_code varchar(25), @merchant_group_name nvarchar(50),
			@user_level_id varchar(1), @user_company_id varchar(3), @user_operator_id varchar(2), @user_merchant_group_id varchar(20)

	IF @status_manager NOT IN ('Y','N') OR @status_hidden NOT IN ('Y','N') OR  @status_hidden NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 70010, @error_message = 'Invalid Status'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @level_id NOT IN ('D','C','O','M')
	BEGIN
		SELECT @result_code = 70010, @error_message = 'Invalid Level'
		SELECT @result_code, @error_message
		RETURN
	END

	IF ISNULL(@user_login,'') = ''
	BEGIN
		SELECT @result_code = 70009, @error_message = 'User cannot be empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF ISNULL(@password,'') = ''
	BEGIN
		SELECT @result_code = 70010, @error_message = 'Password cannot be empty'
		SELECT @result_code, @error_message
		RETURN
	END
 
	IF NOT EXISTS(SELECT user_login FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @stamp_user)
	BEGIN
		SELECT @result_code = 70010, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT	@user_level_id = level_id,
			@user_company_id = company_id,
			@user_operator_id = operator_id,
			@user_merchant_group_id = merchant_group_id
	FROM dbo.master_user WITH (NOLOCK)
	WHERE user_login = @stamp_user
	
	IF	(@user_level_id = 'C' AND @level_id NOT IN ('C','O','M'))
		OR (@user_level_id = 'O' AND @level_id NOT IN ('O','M'))
		OR (@user_level_id = 'M' AND @level_id NOT IN ('M'))
	BEGIN
		SELECT @result_code = 70010, @error_message = 'Invalid Level'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------
	--Page Add User
	SELECT 
		@company_id = CASE WHEN @level_id IN ('C','O','M') THEN @company_id ELSE '' END,
		@operator_id = CASE WHEN @level_id IN ('O','M') THEN @operator_id ELSE '' END,
		@merchant_group_id = CASE WHEN @level_id IN ('M') THEN @merchant_group_id ELSE '' END

	--Level User Login
	SELECT 
		@company_id = CASE WHEN @user_level_id IN ('C','O','M') THEN @user_company_id ELSE @company_id END,
		@operator_id = CASE WHEN @user_level_id IN ('O','M') THEN @user_operator_id ELSE @operator_id END,
		@merchant_group_id = CASE WHEN @user_level_id IN ('M') THEN @user_merchant_group_id ELSE @merchant_group_id END,
		@status_manager = CASE WHEN @user_level_id IN ('C','O','M') THEN 'N' ELSE @status_manager END, --Hanya developer bisa main Manager
		@status_hidden = CASE WHEN @user_level_id IN ('C','O','M') THEN 'N' ELSE @status_hidden END --Hanya developer bisa main Hidden

	IF @company_id <> ''
	BEGIN
		IF NOT EXISTS(SELECT company_id FROM dbo.master_company WITH (NOLOCK) WHERE company_id = @company_id)
		BEGIN
			SELECT @result_code = 70010, @error_message = 'Company not found'
			SELECT @result_code, @error_message
			RETURN
		END
	END

	IF @operator_id <> ''
	BEGIN
		IF NOT EXISTS(SELECT operator_id FROM dbo.master_operator WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id)
		BEGIN
			SELECT @result_code = 70010, @error_message = 'Operator not found'
			SELECT @result_code, @error_message
			RETURN
		END
	END

	IF @merchant_group_id <> ''
	BEGIN
		IF NOT EXISTS(SELECT merchant_group_id FROM dbo.master_merchant_group WITH (NOLOCK) 
			WHERE company_id = @company_id AND operator_id = @operator_id AND merchant_group_id = @merchant_group_id)
		BEGIN
			SELECT @result_code = 70010, @error_message = 'Merchant Group not found'
			SELECT @result_code, @error_message
			RETURN
		END

		SELECT	@merchant_group_code = merchant_group_code, 
				@merchant_group_name = merchant_group_name 
		FROM dbo.master_merchant_group WITH (NOLOCK) 
		WHERE merchant_group_id = @merchant_group_id
	END
	
	--* User Login is unique For All
	IF EXISTS(SELECT user_login FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @user_login)
	BEGIN
		SELECT @result_code = 70009, @error_message = 'User Login already exists, please try another User'
		SELECT @result_code, @error_message
		RETURN
	END

	---------------------------------------------------------------------
	--User GUID
	SET @counter = 0

	WHILE @counter < 10
	BEGIN
		SET @user_guid = LEFT(REPLACE(NEWID(),'-',''),20)

		IF NOT EXISTS(SELECT user_guid FROM dbo.master_user WITH (NOLOCK) WHERE user_guid = @user_guid)
		BEGIN
			SET @counter = 100
		END

		SET @counter = @counter + 1
	END

	IF @counter < 100
	BEGIN
		SELECT @result_code = 70018, @error_message = 'Please try again'
		SELECT @result_code, @error_message
		RETURN
	END

	---------------------------------------------------------------------

	SET @merchant_group_code = ISNULL(@merchant_group_code,'')
	SET @merchant_group_name = ISNULL(@merchant_group_name,'')

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()
		
		INSERT INTO dbo.master_user(
			user_guid, level_id, company_id, operator_id, merchant_group_id, merchant_group_name, merchant_group_code, 
			user_login, [password], [user_name], email, status_active, status_suspend, status_manager, status_supervisor, status_hidden, 
			login_fail, login_retry_date, status_first_login, last_login, first_set_authenticator, status_authenticator, key_authenticator, 
			finger_print, canvas_id, create_date, last_update)
		VALUES(@user_guid, @level_id, @company_id, @operator_id, @merchant_group_id, @merchant_group_name, '',
			@user_login, @password, @user_name, @email, 'Y', 'N', @status_manager, @status_supervisor, @status_hidden,
			0, @getdate, 'Y', NULL, 'N', 'N', '', 
			'', '', @getdate, NULL)

		COMMIT TRANSACTION 
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH 

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterUserAdd2]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterUserAdd2]
(
	@level_id varchar(1),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@user_login varchar(20),
	@password varchar(255),
	@status_manager varchar(1),  --show only developer
	@status_supervisor varchar(1),
	@status_hidden varchar(1), --show only developer
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Page : Add User Developer, Operator, Merchant

	SELECT * FROM dbo.master_user WITH (NOLOCK)

	EXEC spMasterUserAdd2 @level_id='D', @operator_id='', @merchant_group_id='', @user_login='developer38',
		@password='482c811da5d5b4bc6d497ffa98491e38', @status_manager='N', @status_supervisor='N', @status_hidden='N',
		@stamp_user='developer13'
 
	EXEC spMasterUserAdd2 @level_id='O', @operator_id='00', @merchant_group_id='', @user_login='opdem13',
		@password='482c811da5d5b4bc6d497ffa98491e38', @status_manager='Y', @status_supervisor='N', @status_hidden='N',
		@stamp_user='developer13'

	EXEC spMasterUserAdd2 @level_id='M', @operator_id='00', @merchant_group_id='MGDEV', @user_login='mgdem13',
		@password='482c811da5d5b4bc6d497ffa98491e38', @status_manager='Y', @status_supervisor='N', @status_hidden='N',
		@stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code int, @error_message varchar(8000),
			@getdate datetime, @user_guid varchar(20), @counter int, @company_id varchar(3),
			@level_id_user varchar(1), @merchant_group_name nvarchar(100)

	IF @user_login = '' OR @password = ''
	BEGIN
		SELECT @result_code = 70009, @error_message = 'Invalid Input Data'
		SELECT @result_code, @error_message
		RETURN
	END
 
	IF NOT EXISTS(SELECT user_login FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @stamp_user)
	BEGIN
		SELECT @result_code = 70009, @error_message = 'Invalid Login User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @level_id = 'O' AND NOT EXISTS(SELECT operator_id FROM dbo.master_operator WITH (NOLOCK) WHERE operator_id = @operator_id)
	BEGIN
		SELECT @result_code = 70010, @error_message = 'Operator not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @level_id = 'M' AND NOT EXISTS(SELECT merchant_group_id FROM dbo.master_merchant_group WITH (NOLOCK) WHERE merchant_group_id = @merchant_group_id)
	BEGIN
		SELECT @result_code = 70010, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT user_login FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @user_login)
	BEGIN
		SELECT @result_code = 70009, @error_message = 'User already in used'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT	@level_id_user = level_id FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @stamp_user
	
	IF @level_id = 'D'
	BEGIN
		IF @level_id_user <> 'D'
		BEGIN
			SELECT @result_code = 70010, @error_message = 'Invalid Login User'
			SELECT @result_code, @error_message
			RETURN
		END

		SELECT	@operator_id = '', @merchant_group_id = ''
	END
	ELSE IF @level_id = 'O'
	BEGIN
		IF @level_id_user NOT IN ('D','O')
		BEGIN
			SELECT @result_code = 70010, @error_message = 'Invalid Login User'
			SELECT @result_code, @error_message
			RETURN
		END

		SELECT	@merchant_group_id = '', @status_manager = 'N', @status_hidden = 'N'
	END
	ELSE IF @level_id = 'M'
	BEGIN
		IF @level_id_user NOT IN ('D','O','M')
		BEGIN
			SELECT @result_code = 70010, @error_message = 'Invalid Login User'
			SELECT @result_code, @error_message
			RETURN
		END

		SELECT @status_manager = 'N', @status_hidden = 'N'
	END

	---------------------------------------------------------------------
	SET @counter = 0

	WHILE @counter < 10
	BEGIN
		SET @user_guid = LEFT(REPLACE(NEWID(),'-',''),20)

		IF NOT EXISTS(SELECT user_guid FROM dbo.master_user WITH (NOLOCK) WHERE user_guid = @user_guid)
		BEGIN
			SET @counter = 100
		END

		SET @counter = @counter + 1
	END

	IF @counter < 100
	BEGIN
		SELECT @result_code = 70018, @error_message = 'Please try to add User again'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------

	SELECT @company_id = company_id FROM dbo.master_operator WITH (NOLOCK) WHERE operator_id = @operator_id
	SELECT @merchant_group_name = merchant_group_name FROM dbo.master_merchant_group WITH (NOLOCK) WHERE merchant_group_id = @merchant_group_id

	SET @company_id = ISNULL(@company_id,'')
	SET @merchant_group_name = ISNULL(@merchant_group_name,'')

	BEGIN TRY
		BEGIN TRANSACTION
		
		SET @getdate = dbo.fnGetDateGMT7()

		INSERT INTO dbo.master_user(user_guid, level_id, company_id, operator_id, merchant_group_id, merchant_group_name, merchant_group_code,
			user_login, [password], [user_name], email, status_active, status_suspend, status_manager, status_supervisor, status_hidden, 
			login_fail, login_retry_date, status_first_login, last_login, 
			first_set_authenticator, status_authenticator, key_authenticator, finger_print, canvas_id, create_date, last_update)
		VALUES(@user_guid, @level_id, @company_id, @operator_id, @merchant_group_id, @merchant_group_name, '',
			@user_login, @password, @user_login, '', 'Y', 'N', @status_manager, @status_supervisor, @status_hidden, 
			0, @getdate, 'Y', @getdate, 
			'N', 'N', '', '', '', @getdate, @getdate)
		
		COMMIT TRANSACTION 
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH 

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterUserChangePassword]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterUserChangePassword]
(
	@UserGUID VARCHAR(20),
	@OldPassword VARCHAR(255),
	@NewPassword VARCHAR(255)
)
AS
BEGIN
/*
	SELECT * FROM dbo.user WITH (NOLOCK)
	EXEC spUserChangePassword @UserID=1, @OldPassword='0192023a7bbd73250516f069df18b500', @NewPassword='0192023a7bbd73250516f069df18b500'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(8000)
	DECLARE @CurrentPassword VARCHAR(255)

	IF @OldPassword = ''
	BEGIN
		SELECT @result_code = 70005, @error_message = 'Old Password cannot empty'
		SELECT @result_code [Retval], @error_message [RetDesc]
		RETURN
	END

	IF @NewPassword = ''
	BEGIN
		SELECT @result_code = 70005, @error_message = 'New Password cannot empty'
		SELECT @result_code [Retval], @error_message [RetDesc]
		RETURN
	END

	SELECT @CurrentPassword = [password]
	FROM dbo.master_user WITH (NOLOCK)
	where user_guid = @UserGUID
	
	IF @@ROWCOUNT = 0
	BEGIN
		SELECT @result_code = 70005, @error_message = 'User Not Found'
		SELECT @result_code [Retval], @error_message [RetDesc]
		RETURN
	END
	ELSE IF @CurrentPassword <> @OldPassword
	BEGIN
		SELECT @result_code = 70003, @error_message = 'Old Password wrong'
		SELECT @result_code [Retval],  @error_message [RetDesc]
		RETURN
	END
	ELSE IF @CurrentPassword = @NewPassword
	BEGIN
		SELECT @result_code = 70004, @error_message = 'Old Password and New Password must be different'
		SELECT @result_code [Retval], @error_message [RetDesc]
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION

		UPDATE dbo.master_user
		SET [password] = @NewPassword,
			login_fail = 0,
			login_retry_date = GETDATE(),
			status_suspend = 'N',
			status_first_login = 'N'
		WHERE user_guid = @UserGUID

		COMMIT TRANSACTION

		SELECT @result_code = 1, @error_message = 'Success'
		SELECT @result_code [Retval], @error_message [RetDesc]
	 END TRY
	 BEGIN CATCH
		--User Change Password Failed
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code [Retval], @error_message [RetDesc]
		RETURN
	 END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterUserChangePassword2]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterUserChangePassword2]
(
	@user_login varchar(20),
	@password_old varchar(255),
	@password_new varchar(255),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	SELECT * FROM dbo.user WITH (NOLOCK)

	EXEC spUserChangePassword @user_login='', @password_old='', @password_new='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(8000),
			@password_current varchar(255), @getdate datetime

	IF @password_old = ''
	BEGIN
		SELECT @result_code = 70005, @error_message = 'Old Password cannot empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @password_new = ''
	BEGIN
		SELECT @result_code = 70005, @error_message = 'New Password cannot empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT user_login FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @user_login)
	BEGIN
		SELECT @result_code = 70005, @error_message = 'User Not Found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @password_current = [password] FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @user_login
	
	IF @password_current <> @password_old
	BEGIN
		SELECT @result_code = 70003, @error_message = 'Old Password wrong'
		SELECT @result_code,  @error_message
		RETURN
	END
	ELSE IF @password_current = @password_new
	BEGIN
		SELECT @result_code = 70004, @error_message = 'Old Password and New Password must be different'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		UPDATE dbo.master_user
		SET [password] = @password_new,
			login_fail = 0,
			login_retry_date = @getdate,
			status_suspend = 'N',
			status_first_login = 'N'
		WHERE user_login = @user_login

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterUserDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterUserDelete]
(
	@user_login varchar(20),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	SELECT * FROM dbo.user_master WITH (NOLOCK)
	
	EXEC spMasterUserDelete @user_login='xxx', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(8000)
		
	IF NOT EXISTS(SELECT user_login FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @user_login)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User not found'
		SELECT @result_code, @error_message
		RETURN
	END

	--IF NOT EXISTS(SELECT user_login FROM dbo.user_group_user WITH (NOLOCK) WHERE user_login = @user_login)
	--BEGIN
	--	SELECT @result_code = 39999, @error_message = 'User not found'
	--	SELECT @result_code, @error_message
	--	RETURN
	--END

	BEGIN TRY
		BEGIN TRANSACTION
	
		DELETE FROM dbo.master_user WHERE user_login = @user_login
				
		COMMIT TRANSACTION	
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterUserEditStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterUserEditStatus]
(
	@user_guid VARCHAR(20),
	@type varchar(10), -- ACTIVE,MANAGER,HIDDEN,SUSPEND
	@status VARCHAR(1)
)
AS
BEGIN
/*
	SELECT * FROM dbo.user_master WITH (NOLOCK)
	EXEC spUserEditStatus @user_guid='4E668E9EDA294207BAEA', @status_active='Y' ,@stamp_guid=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(8000)
	
	IF @status NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT user_guid FROM dbo.master_user WITH (NOLOCK) WHERE user_guid = @user_guid)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User not found'
		SELECT @result_code, @error_message
		RETURN
	END


	BEGIN TRY
	BEGIN TRANSACTION
		IF(@type = 'ACTIVE')
		BEGIN
		UPDATE dbo.master_user
			SET status_active = @status,
				last_update = dbo.fnGetDateGMT7()
			WHERE [user_guid] = @user_guid
		END
		ELSE IF (@type = 'MANAGER')
		BEGIN
		UPDATE dbo.master_user
			SET status_manager = @status,
				last_update = dbo.fnGetDateGMT7()
			WHERE [user_guid] = @user_guid
		END
		ELSE IF (@type = 'HIDDEN')
		BEGIN
		UPDATE dbo.master_user
			SET status_hidden = @status,
				last_update = dbo.fnGetDateGMT7()
			WHERE [user_guid] = @user_guid
		END
		ELSE IF (@type = 'SUSPEND')
		BEGIN
		UPDATE dbo.master_user
			SET status_suspend = @status,
				last_update = dbo.fnGetDateGMT7()
			WHERE [user_guid] = @user_guid
		END
				
		SELECT @result_code = 1, @error_message = 'Success'
		SELECT @result_code, @error_message

	COMMIT TRANSACTION	
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[spMasterUserEditStatus2]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterUserEditStatus2]
(
	@user_login varchar(20),
	@type varchar(20), -- ACTIVE, SUSPEND, MANAGER, SUPERVISOR, HIDDEN, AUTHENTICATOR
	@status varchar(1), --Y N
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Update Status User

	SELECT * FROM dbo.user_master WITH (NOLOCK)

	EXEC spUserEditStatus2 @user_login='developer01', @type='ACTIVE', @status='Y', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(8000),
			@getdate datetime
	
	IF @status NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT user_login FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @user_login)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF (@type = 'AUTHENTICATOR' AND @status = 'Y')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Authenticator not allow turn ON'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		IF (@type = 'ACTIVE')
		BEGIN
			UPDATE dbo.master_user SET status_active = @status, last_update = @getdate WHERE user_login = @user_login
		END
		ELSE IF (@type = 'MANAGER')
		BEGIN
			UPDATE dbo.master_user SET status_manager = @status, last_update = @getdate WHERE user_login = @user_login
		END
		ELSE IF (@type = 'SUPERVISOR')
		BEGIN
			UPDATE dbo.master_user SET status_supervisor = @status, last_update = @getdate WHERE user_login = @user_login
		END
		ELSE IF (@type = 'HIDDEN')
		BEGIN
			UPDATE dbo.master_user SET status_hidden = @status, last_update = @getdate WHERE user_login = @user_login
		END
		ELSE IF (@type = 'SUSPEND')
		BEGIN
			UPDATE dbo.master_user SET status_suspend = @status, last_update = @getdate WHERE user_login = @user_login
		END
		ELSE IF (@type = 'AUTHENTICATOR')
		BEGIN
			UPDATE dbo.master_user SET status_authenticator = @status, last_update = @getdate WHERE user_login = @user_login
		END

		COMMIT TRANSACTION	
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterUserEditStatusAutheticator]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterUserEditStatusAutheticator]
(
	@user_guid VARCHAR(20),
	@status_authenticator varchar(1),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	SELECT * FROM dbo.master_user WITH (NOLOCK)

	EXEC spMasterUserEditStatusAutheticator @user_guid='3362C627D2E94DAAB114', @status_authenticator='Y', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(8000)
	
	IF @status_authenticator NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Status'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT user_guid FROM dbo.master_user WITH (NOLOCK) WHERE user_guid = @user_guid)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User not found'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
	BEGIN TRANSACTION
		
		UPDATE dbo.master_user
		SET status_authenticator = @status_authenticator,
			last_update = dbo.fnGetDateGMT7()
		WHERE [user_guid] = @user_guid

	COMMIT TRANSACTION	
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
					
	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterUserList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterUserList]
(
	@level_id varchar(1), --D, C, O, M
	@company_id varchar(3) = '',
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@merchant_group_name nvarchar(50) = '', --remove
	@user_login varchar(20),
	@status_active varchar(1),
	@status_manager varchar(1),
	@status_supervisor varchar(1) = '',
	@status_hidden varchar(1),
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Page : User Provider, User Company, User Operator
	
	EXEC PacmanMainDB.dbo.spMasterUserList @level_id='D', @company_id = '', @operator_id='', @merchant_group_id='', @user_login='', 
		@status_active='', @status_manager='', @status_hidden='', @page=1, @page_size=25, @stamp_user='developer13'
	EXEC PacmanMainDB.dbo.spMasterUserList @level_id='C', @company_id = '', @operator_id='', @merchant_group_id='', @user_login='', 
		@status_active='', @status_manager='', @status_hidden='', @page=1, @page_size=25, @stamp_user='developer13'
	EXEC PacmanMainDB.dbo.spMasterUserList @level_id='O', @company_id = '', @operator_id='', @merchant_group_id='', @user_login='', 
		@status_active='', @status_manager='', @status_hidden='', @page=1, @page_size=25, @stamp_user='developer13'
	EXEC PacmanMainDB.dbo.spMasterUserList @level_id='M', @company_id = '', @operator_id='', @merchant_group_id='', @user_login='', 
		@status_active='', @status_manager='', @status_hidden='', @page=1, @page_size=25, @stamp_user='developer13'
		
*/	
	SET NOCOUNT ON

	DECLARE @result_code int, @error_message varchar(100), 
			@total_rows int, @user_level_id varchar(1), @user_company_id varchar(3), @user_operator_id varchar(2), 
			@user_merchant_group_id varchar(20), @user_status_manager varchar(1), @user_status_supervisor varchar(1)
	
	IF NOT EXISTS(SELECT user_login FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @stamp_user)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Login User'
		SELECT @result_code, @error_message
		RETURN
	END

	--------------------------------------------------------------------------------------

	SELECT	@user_level_id = level_id,
			@user_company_id = company_id,
			@user_operator_id = operator_id,
			@user_merchant_group_id = merchant_group_id,
			@user_status_manager = status_manager,
			@user_status_supervisor = status_supervisor
	FROM dbo.master_user WITH (NOLOCK) 
	WHERE user_login = @stamp_user

	SELECT 
		@company_id = CASE WHEN @user_level_id IN ('C','O','M') THEN @user_company_id ELSE @company_id END,
		@operator_id = CASE WHEN @user_level_id IN ('O','M') THEN @user_operator_id ELSE @operator_id END,
		@merchant_group_id = CASE WHEN @user_level_id IN ('M') THEN @user_merchant_group_id ELSE @merchant_group_id END,
		@status_manager = CASE WHEN @user_level_id = 'D' THEN @status_manager WHEN @user_status_manager = 'N' THEN 'N' ELSE @status_manager END, --umpetin user manager
		@status_supervisor = CASE WHEN @user_level_id = 'D' OR @user_status_manager = 'Y' OR @user_status_supervisor = 'Y' THEN @status_supervisor ELSE 'N' END,
		@status_hidden = CASE WHEN @user_level_id <> 'D' THEN 'N' ELSE @status_hidden END

	IF	(@user_level_id = 'D' AND @level_id NOT IN ('D','C','O','M')) 
		OR (@user_level_id = 'C' AND @level_id NOT IN ('C','O','M'))
		OR (@user_level_id = 'O' AND @level_id NOT IN ('O','M')) 
		OR (@user_level_id = 'M' AND @level_id NOT IN ('M'))
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Level'
		SELECT @result_code, @error_message
		RETURN
	END

	--------------------------------------------------------------------------------------

	SELECT	@company_id = CASE @company_id WHEN '' THEN '%' ELSE @company_id END,
			@operator_id = CASE @operator_id WHEN '' THEN '%' ELSE @operator_id END,
			@merchant_group_id = CASE @merchant_group_id WHEN '' THEN '%' ELSE @merchant_group_id END,
			@user_login = CASE @user_login WHEN '' THEN '%' ELSE '%'+@user_login+'%' END,
			@status_active = CASE @status_active WHEN '' THEN '%' ELSE @status_active END,
			@status_manager = CASE @status_manager WHEN '' THEN '%' ELSE @status_manager END,
			@status_supervisor = CASE @status_supervisor WHEN '' THEN '%' ELSE @status_supervisor END,
			@status_hidden = CASE @status_hidden WHEN '' THEN '%' ELSE @status_hidden END
			
	SELECT @total_rows = COUNT(1) 
	FROM dbo.master_user WITH (NOLOCK) 
	WHERE level_id = @level_id
	AND company_id LIKE @company_id
	AND operator_id LIKE @operator_id
	AND merchant_group_id LIKE @merchant_group_id
	AND user_login LIKE @user_login
	AND status_active LIKE @status_active
	AND status_manager LIKE @status_manager
	AND status_supervisor LIKE @status_supervisor
	AND status_hidden LIKE @status_hidden

--	SELECT @level_id, @company_id, @operator_id, @merchant_group_id, @user_login, @status_active, @status_manager, @status_hidden

	SET @total_rows = ISNULL(@total_rows,0)

	-------------------------------------------------------

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

	SELECT @total_rows

	;WITH cte_user
	AS
	(
		SELECT user_group_name, user_login 
		FROM dbo.user_group_user WITH (NOLOCK)
		WHERE level_id = @level_id
		AND company_id LIKE @company_id
		AND operator_id LIKE @operator_id
		AND merchant_group_id LIKE @merchant_group_id
	), cte_user_group_user
	AS
	(
		SELECT user_login, user_group_menu = STUFF((SELECT ', '+user_group_name FROM cte_user c2 WHERE c1.user_login = c2.user_login FOR XML PATH('')),1,2,'')
		FROM cte_user c1
		GROUP BY user_login
	), cte_merchant
	AS
	(
		SELECT user_merchant_group_name, user_login 
		FROM dbo.user_merchant_group_user WITH (NOLOCK)
		WHERE level_id = @level_id
		AND company_id LIKE @company_id
		AND operator_id LIKE @operator_id
		AND merchant_group_id LIKE @merchant_group_id
	), cte_user_group_merchant
	AS
	(
		SELECT user_login, user_group_merchant = STUFF((SELECT ', '+user_merchant_group_name FROM cte_merchant c2 WHERE c1.user_login = c2.user_login FOR XML PATH('')),1,2,'')
		FROM cte_merchant c1
		GROUP BY user_login
	)


	SELECT	u.[user_id], u.user_guid, u.user_login, u.company_id, company_name = ISNULL(comp.company_name,''), u.operator_id, operator_name = ISNULL(opr.operator_name,''),
			u.[user_name], u.email, u.status_active, u.status_suspend, u.status_manager, u.status_hidden, 
			isAllowedDelete = CASE WHEN u.user_login = @stamp_user THEN 'N' 
									WHEN u.status_manager = 'Y' AND @user_level_id <> 'D' THEN 'N' 
									ELSE 'Y' END,
			u.level_id, u.merchant_group_id, merchant_group_name = ISNULL(mg.merchant_group_name,''), u.status_authenticator, u.status_supervisor,
			user_group_menu = ISNULL(menu.user_group_menu,''),
			user_group_merchant = ISNULL(umc.user_group_merchant,'')
	FROM dbo.master_user u WITH (NOLOCK)
	LEFT JOIN dbo.master_company comp WITH (NOLOCK) ON u.company_id = comp.company_id
	LEFT JOIN dbo.master_operator opr WITH (NOLOCK) ON u.company_id = opr.company_id AND u.operator_id = opr.operator_id
	LEFT JOIN dbo.master_merchant_group mg WITH (NOLOCK) ON u.company_id = mg.company_id AND u.operator_id = mg.operator_id AND u.merchant_group_id = mg.merchant_group_id
	LEFT JOIN cte_user_group_user menu ON u.user_login = menu.user_login
	LEFT JOIN cte_user_group_merchant umc ON u.user_login = umc.user_login
	WHERE u.level_id = @level_id
	AND u.company_id LIKE @company_id
	AND u.operator_id LIKE @operator_id
	AND u.merchant_group_id LIKE @merchant_group_id
	AND u.user_login LIKE @user_login
	AND u.status_active LIKE @status_active
	AND u.status_manager LIKE @status_manager
	AND u.status_supervisor LIKE @status_supervisor
	AND u.status_hidden LIKE @status_hidden
	ORDER BY u.user_login
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterUserList2]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterUserList2] --DROP PROC spMasterUserList2
(
	@level_id varchar(1), --D, C, O, M
	@company_id varchar(3) = '',
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@merchant_group_name nvarchar(50) = '', --remove
	@user_login varchar(20),
	@status_active varchar(1),
	@status_manager varchar(1),
	@status_supervisor varchar(1) = '',
	@status_hidden varchar(1),
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Page : User Provider, User Company, User Operator
	
	EXEC PacmanMainDB.dbo.spMasterUserList2 @level_id='O', @operator_id='00', @merchant_group_id='', @merchant_group_name='NULL', @user_login='', 
		@status_active='', @status_manager='', @status_supervisor='', @status_hidden='N', @page=1, @page_size=25, @stamp_user='opdem13'

	EXEC PacmanMainDB.dbo.spMasterUserList @level_id='D', @company_id = '', @operator_id='', @merchant_group_id='', @user_login='', 
		@status_active='', @status_manager='', @status_hidden='', @page=1, @page_size=25, @stamp_user='developer13'
	EXEC PacmanMainDB.dbo.spMasterUserList @level_id='C', @company_id = '', @operator_id='', @merchant_group_id='', @user_login='', 
		@status_active='', @status_manager='', @status_hidden='', @page=1, @page_size=25, @stamp_user='developer13'
	EXEC PacmanMainDB.dbo.spMasterUserList @level_id='O', @company_id = '', @operator_id='', @merchant_group_id='', @user_login='', 
		@status_active='', @status_manager='', @status_hidden='', @page=1, @page_size=25, @stamp_user='developer13'
	EXEC PacmanMainDB.dbo.spMasterUserList @level_id='M', @company_id = '', @operator_id='', @merchant_group_id='', @user_login='', 
		@status_active='', @status_manager='', @status_hidden='', @page=1, @page_size=25, @stamp_user='developer13'
		
*/	
	SET NOCOUNT ON

	DECLARE @result_code int, @error_message varchar(100), 
			@total_rows int, @user_level_id varchar(1), @user_company_id varchar(3), @user_operator_id varchar(2), 
			@user_merchant_group_id varchar(20), @user_status_manager varchar(1), @user_status_supervisor varchar(1)
	
	IF NOT EXISTS(SELECT user_login FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @stamp_user)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Login User'
		SELECT @result_code, @error_message
		RETURN
	END

	--------------------------------------------------------------------------------------

	SELECT	@user_level_id = level_id,
			@user_company_id = company_id,
			@user_operator_id = operator_id,
			@user_merchant_group_id = merchant_group_id,
			@user_status_manager = status_manager,
			@user_status_supervisor = status_supervisor
	FROM dbo.master_user WITH (NOLOCK) 
	WHERE user_login = @stamp_user

	SELECT 
		@company_id = CASE WHEN @user_level_id IN ('C','O','M') THEN @user_company_id ELSE @company_id END,
		@operator_id = CASE WHEN @user_level_id IN ('O','M') THEN @user_operator_id ELSE @operator_id END,
		@merchant_group_id = CASE WHEN @user_level_id IN ('M') THEN @user_merchant_group_id ELSE @merchant_group_id END,
		@status_manager = CASE WHEN @user_level_id = 'D' THEN @status_manager WHEN @user_status_manager = 'N' THEN 'N' ELSE @status_manager END, --umpetin user manager
		@status_supervisor = CASE WHEN @user_level_id = 'D' OR @user_status_manager = 'Y' OR @user_status_supervisor = 'Y' THEN @status_supervisor ELSE 'N' END,
		@status_hidden = CASE WHEN @user_level_id <> 'D' THEN 'N' ELSE @status_hidden END

	IF	(@user_level_id = 'D' AND @level_id NOT IN ('D','C','O','M')) 
		OR (@user_level_id = 'C' AND @level_id NOT IN ('C','O','M'))
		OR (@user_level_id = 'O' AND @level_id NOT IN ('O','M')) 
		OR (@user_level_id = 'M' AND @level_id NOT IN ('M'))
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Level'
		SELECT @result_code, @error_message
		RETURN
	END

	--------------------------------------------------------------------------------------

	SELECT	@company_id = CASE @company_id WHEN '' THEN '%' ELSE @company_id END,
			@operator_id = CASE @operator_id WHEN '' THEN '%' ELSE @operator_id END,
			@merchant_group_id = CASE @merchant_group_id WHEN '' THEN '%' ELSE @merchant_group_id END,
			@user_login = CASE @user_login WHEN '' THEN '%' ELSE '%'+@user_login+'%' END,
			@status_active = CASE @status_active WHEN '' THEN '%' ELSE @status_active END,
			@status_manager = CASE @status_manager WHEN '' THEN '%' ELSE @status_manager END,
			@status_supervisor = CASE @status_supervisor WHEN '' THEN '%' ELSE @status_supervisor END,
			@status_hidden = CASE @status_hidden WHEN '' THEN '%' ELSE @status_hidden END
			
	SELECT @total_rows = COUNT(1) 
	FROM dbo.master_user WITH (NOLOCK) 
	WHERE level_id = @level_id
	AND company_id LIKE @company_id
	AND operator_id LIKE @operator_id
	AND merchant_group_id LIKE @merchant_group_id
	AND user_login LIKE @user_login
	AND status_active LIKE @status_active
	AND status_manager LIKE @status_manager
	AND status_supervisor LIKE @status_supervisor
	AND status_hidden LIKE @status_hidden

--	SELECT @level_id, @company_id, @operator_id, @merchant_group_id, @user_login, @status_active, @status_manager, @status_hidden

	SET @total_rows = ISNULL(@total_rows,0)

	-------------------------------------------------------

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

	SELECT @total_rows

	;WITH cte_user
	AS
	(
		SELECT user_group_name, user_login 
		FROM dbo.user_group_user WITH (NOLOCK)
		WHERE level_id = @level_id
		AND company_id LIKE @company_id
		AND operator_id LIKE @operator_id
		AND merchant_group_id LIKE @merchant_group_id
	), cte_user_group_user
	AS
	(
		SELECT user_login, user_group_menu = STUFF((SELECT ', '+user_group_name FROM cte_user c2 WHERE c1.user_login = c2.user_login FOR XML PATH('')),1,2,'')
		FROM cte_user c1
		GROUP BY user_login
	), cte_merchant
	AS
	(
		SELECT user_merchant_group_name, user_login 
		FROM dbo.user_merchant_group_user WITH (NOLOCK)
		WHERE level_id = @level_id
		AND company_id LIKE @company_id
		AND operator_id LIKE @operator_id
		AND merchant_group_id LIKE @merchant_group_id
	), cte_user_group_merchant
	AS
	(
		SELECT user_login, user_group_merchant = STUFF((SELECT ', '+user_merchant_group_name FROM cte_merchant c2 WHERE c1.user_login = c2.user_login FOR XML PATH('')),1,2,'')
		FROM cte_merchant c1
		GROUP BY user_login
	)


	SELECT	u.[user_id], u.user_guid, u.user_login, u.company_id, company_name = ISNULL(comp.company_name,''), u.operator_id, operator_name = ISNULL(opr.operator_name,''),
			u.[user_name], u.email, u.status_active, u.status_suspend, u.status_manager, u.status_hidden, 
			isAllowedDelete = CASE WHEN u.user_login = @stamp_user THEN 'N' 
									WHEN u.status_manager = 'Y' AND @user_level_id <> 'D' THEN 'N' 
									ELSE 'Y' END,
			u.level_id, u.merchant_group_id, merchant_group_name = ISNULL(mg.merchant_group_name,''), u.status_authenticator, u.status_supervisor,
			user_group_menu = ISNULL(menu.user_group_menu,''),
			user_group_merchant = ISNULL(umc.user_group_merchant,'')
	FROM dbo.master_user u WITH (NOLOCK)
	LEFT JOIN dbo.master_company comp WITH (NOLOCK) ON u.company_id = comp.company_id
	LEFT JOIN dbo.master_operator opr WITH (NOLOCK) ON u.company_id = opr.company_id AND u.operator_id = opr.operator_id
	LEFT JOIN dbo.master_merchant_group mg WITH (NOLOCK) ON u.company_id = mg.company_id AND u.operator_id = mg.operator_id AND u.merchant_group_id = mg.merchant_group_id
	LEFT JOIN cte_user_group_user menu ON u.user_login = menu.user_login
	LEFT JOIN cte_user_group_merchant umc ON u.user_login = umc.user_login
	WHERE u.level_id = @level_id
	AND u.company_id LIKE @company_id
	AND u.operator_id LIKE @operator_id
	AND u.merchant_group_id LIKE @merchant_group_id
	AND u.user_login LIKE @user_login
	AND u.status_active LIKE @status_active
	AND u.status_manager LIKE @status_manager
	AND u.status_supervisor LIKE @status_supervisor
	AND u.status_hidden LIKE @status_hidden
	ORDER BY u.user_login
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterUserMerchantAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterUserMerchantAdd]
(
	@CompanyID varchar(3),
	@OperatorID varchar(2),
	@merchant_group_id varchar(20),
	@UserLogin varchar(20),
	@Password varchar(255),
	@UserName Nvarchar(100),
	@Email varchar(100),
	@currency varchar(10)= '',
	@stamp_guid varchar(20)
)
AS
BEGIN
/*

	EXEC PacmanMainDB.dbo.spMasterUserMerchantAdd 
		@CompanyID='000', @OperatorID='00', @UserLogin='mm721', @Password='482c811da5d5b4bc6d497ffa98491e38', 
		@UserName='mm721', @Email='', @merchant_group_id='MGDEV', @stamp_guid='01877A35252E465ABE53', @currency=''
 
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @stamp_user varchar(20)

	SELECT @stamp_user = user_login FROM dbo.master_user WITH (NOLOCK) WHERE user_guid = @stamp_guid

	EXEC dbo.spMasterUserAdd @level_id='M', @company_id=@CompanyID, @operator_id=@OperatorID, @merchant_group_id=@merchant_group_id, 
		@user_login=@UserLogin, @user_name=@UserName, @password=@Password, @email=@Email, @status_manager='N', @status_supervisor='N', @status_hidden='N', @stamp_user=@stamp_user

	--DECLARE @result_code int, @error_message varchar(8000),
	--		@getdate datetime, @merchant_group_code varchar(25), merchant_group_name nvarchar(50),
	--		@user_guid varchar(20), @counter int

	--SET @CompanyID='000'

	--IF ISNULL(@UserLogin,'') = ''
	--BEGIN
	--	SELECT @result_code = 70009, @error_message = 'User cannot be empty'
	--	SELECT @result_code, @error_message
	--	RETURN
	--END

	--IF ISNULL(@Password,'') = ''
	--BEGIN
	--	SELECT @result_code = 70010, @error_message = 'Password cannot be empty'
	--	SELECT @result_code, @error_message
	--	RETURN
	--END

	--IF NOT EXISTS(SELECT merchant_group_id FROM dbo.master_merchant_group WITH (NOLOCK) WHERE merchant_group_id = @merchant_group_id)
	--BEGIN
	--	SELECT @result_code = 70011, @error_message = 'Merchant Group not found'
	--	SELECT @result_code, @error_message
	--	RETURN
	--END

	--SELECT	@merchant_group_code = merchant_group_code,
	--		@merchant_group_name = merchant_group_name
	--FROM dbo.master_merchant_group WITH (NOLOCK)
	--WHERE merchant_group_id = @merchant_group_id

	----* User Login is unique For All
	--IF EXISTS(SELECT user_login FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @UserLogin)
	--BEGIN
	--	SELECT @result_code = 70009, @error_message = 'User Login already exists, please try another User'
	--	SELECT @result_code, @error_message
	--	RETURN
	--END

	-----------------------------------------------------------------------
	----User Guid
	--SET @counter = 0

	--WHILE @counter < 10
	--BEGIN
	--	SET @user_guid = LEFT(REPLACE(NEWID(),'-',''),20)

	--	IF NOT EXISTS(SELECT user_guid FROM dbo.master_user WITH (NOLOCK) WHERE user_guid = @user_guid)
	--	BEGIN
	--		SET @counter = 100
	--	END

	--	SET @counter = @counter + 1
	--END

	--IF @counter < 100
	--BEGIN
	--	SELECT @result_code = 70018, @error_message = 'Please try to add User again'
	--	SELECT @result_code, @error_message
	--	RETURN
	--END

	-----------------------------------------------------------------------

	--BEGIN TRY
	--	BEGIN TRANSACTION

	--	SET @getdate = dbo.fnGetDateGMT7()

	--	INSERT INTO dbo.master_user(user_guid, level_id, company_id, operator_id, merchant_group_id, merchant_group_name, merchant_group_code, 
	--		user_login, [password], [user_name], email, status_active, status_suspend, status_manager, status_supervisor, status_hidden, 
	--		login_fail, login_retry_date, status_first_login, last_login, first_set_authenticator, status_authenticator, key_authenticator, 
	--		finger_print, canvas_id, create_date, last_update)
	--	VALUES(@user_guid, 'M', @CompanyID, @OperatorID, @merchant_group_id, @merchant_group_name, @merchant_group_code,
	--		@UserLogin, @Password, @UserName, @Email, 'Y', 'N', 'N', 'N', 'N', 
	--		0, @getdate, 'Y', NULL, 'N', 'N', '', 
	--		'', '', @getdate, @getdate)

	--	COMMIT TRANSACTION
	--END TRY
	--BEGIN CATCH
	--	ROLLBACK TRANSACTION
	--	SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
	--	SELECT @result_code, @error_message
	--	RETURN
	--END CATCH

	--SELECT @result_code = 1, @error_message = 'Success'
	--SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMasterUserOperatorAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMasterUserOperatorAdd]
(
	@CompanyID varchar(3),
	@OperatorID varchar(2),
	@UserLogin varchar(20),
	@Password varchar(255),
	@UserName nvarchar(100),
	@Email varchar(100),
	@currency varchar(10)= '',
	@stamp_guid varchar(20)
)
AS
BEGIN
/*
	SELECT * FROM dbo.master_user WITH (NOLOCK)
	EXEC spMasterUserAdd @level_id='D', @CompanyID='000', @OperatorID='00', @UserLogin='developer38', @Password='482c811da5d5b4bc6d497ffa98491e38', @UserName='developer38', @Email='developer38@realtechltd.com'
 
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code int, @error_message varchar(8000),
		@Getdate datetime

	SET @CompanyID='000'
	SET @Getdate = GETDATE()

	IF ISNULL(@UserLogin,'') = ''
	BEGIN
		SELECT @result_code = 70009, @error_message = 'User cannot be empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF ISNULL(@Password,'') = ''
	BEGIN
		SELECT @result_code = 70010, @error_message = 'Password cannot be empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT company_id FROM dbo.master_company WITH (NOLOCK) WHERE company_id = @CompanyID)
	BEGIN
		SELECT @result_code = 70010, @error_message = 'Company not found'
		SELECT @result_code, @error_message
		RETURN
	END

	--* User Login is unique For All
	IF EXISTS(SELECT user_login FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @UserLogin) --company_id = @CompanyID AND operator_id = @OperatorID AND )
	BEGIN
		SELECT @result_code = 70009, @error_message = 'User Login already exists, please try another User'
		SELECT @result_code, @error_message
		RETURN
	END

	---------------------------------------------------------------------
	--CompanyID
	DECLARE @UserGUID varchar(20), @Counter int
	SET @Counter = 0
	
	WHILE @Counter < 10
	BEGIN
		SET @UserGUID = LEFT(REPLACE(NEWID(),'-',''),20)

		IF NOT EXISTS(SELECT user_guid FROM dbo.master_user WITH (NOLOCK) WHERE user_guid = @UserGUID)
		BEGIN
			SET @Counter = 100
		END

		SET @Counter = @Counter + 1
	END

	IF @Counter < 100
	BEGIN
		SELECT @result_code = 70018, @error_message = 'Please try to add User again'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
	BEGIN TRANSACTION

		INSERT INTO dbo.master_user(user_guid, level_id, company_id, operator_id, merchant_group_id, merchant_group_code, 
			user_login, [password], [user_name], email, status_active, status_suspend, status_manager, status_supervisor, status_hidden, 
			login_fail, login_retry_date, status_first_login, last_login, first_set_authenticator, status_authenticator, key_authenticator, 
			finger_print, canvas_id, create_date, last_update)
		VALUES(@UserGUID, 'O', @CompanyID, @OperatorID, '', '',
			@UserLogin, @Password, @UserName, @Email, 'Y', 'N', 'N', 'N', 'N', 
			0, @getdate, 'Y', NULL, 'N', 'N', '', 
			'', '', @getdate, @getdate)

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
	ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END 
GO
/****** Object:  StoredProcedure [dbo].[spMerchantAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantAdd]
(
    @company_id varchar(3),
    @operator_id varchar(2),
	@merchant_group_id varchar(20),
	@payment_channel_id varchar(20),
	@currency varchar(10),
    @merchant_id varchar(10),
    @merchant_name nvarchar(50),
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant

	select * from merchant_list with (nolock)
	select * from merchant_setting with (nolock)
	select * from merchant_balance with (nolock)
	select * from merchant_master
	select * from merchant_master_balance with (nolock)
	select * from merchant_master_currency with (nolock)
	
	rf_column_list merchant_list
	rf_column_list merchant_setting,'@'
	rf_column_list merchant_balance
	rf_param spMerchantAdd 

	EXEC spMerchantAdd @company_id='000', @operator_id='00', @merchant_group_id='MGDEV', @payment_channel_id='QR', @currency='IDR', @merchant_id='DEVCOPY', @merchant_name='Merchant Name', @stamp_user=''

	EXEC PacmanMainDB.dbo.spMerchantAdd @company_id='000', @operator_id='00', @merchant_group_id='MGDEV', @payment_channel_id='QR', @currency='MYR', 
		@merchant_id='2F631C26E16', @merchant_name='XVP08', @stamp_user='developer14'

*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@payment_channel_name nvarchar(200), 
			@getdate datetime

	IF @company_id = '' OR @operator_id = '' OR @merchant_group_id = '' OR @payment_channel_id = '' OR @currency = '' OR @merchant_id = '' OR @merchant_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameter'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT merchant_id FROM dbo.merchant_list WITH (NOLOCK) WHERE merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant ID already exists'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------

	SELECT @payment_channel_name = channel_name 
	FROM dbo.master_payment_channel WITH (NOLOCK)
	WHERE channel_id = @payment_channel_id

	-----------------------------------------------------------

	SET @getdate = dbo.fnGetDateGMT7()

	IF @merchant_id = ''
	BEGIN
		SET @merchant_id = LEFT(REPLACE(NEWID(),'-','') , 10)
	END

	BEGIN TRY
		BEGIN TRANSACTION
		
		IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master WITH (NOLOCK) WHERE merchant_code = @merchant_name)
		BEGIN
			INSERT INTO dbo.merchant_master(company_id, operator_id, merchant_group_id, merchant_code, merchant_name, status_active, create_date)
			VALUES(@company_id, @operator_id, @merchant_group_id, @merchant_name, @merchant_name, 'Y', @getdate)
		END
		
		IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_name AND currency = @currency)
		BEGIN
			INSERT INTO dbo.merchant_master_currency(company_id, operator_id, merchant_group_id, merchant_code, merchant_name, currency, 
				status_active, settlement_min, settlement_max, settlement_fee_percent, settlement_fix_rate, 
				topup_fee_percent, topup_fix_rate, settlement_password, create_date)
			VALUES(@company_id, @operator_id, @merchant_group_id, @merchant_name, @merchant_name, @currency, 
				'Y', 0.00, 0.00, 0.00, 0.00, 
				0.00, 0.00, '', @getdate)

			INSERT INTO dbo.merchant_master_balance(company_id, operator_id, merchant_group_id, merchant_code, merchant_name, currency, 
				merchant_balance_fundin, merchant_balance_fundout, 
				merchant_outstanding_fundin, merchant_outstanding_fundout, 
				merchant_daily_fundin, merchant_daily_fundout, 
				date_updated)
			VALUES(@company_id, @operator_id, @merchant_group_id, @merchant_name, @merchant_name, @currency, 
				0.00, 0.00, 
				0.00, 0.00,
				0.00, 0.00,
				@getdate)			
		END

		INSERT INTO dbo.merchant_list(company_id, operator_id, merchant_group_id, merchant_code, merchant_id, merchant_name, currency, 
			payment_channel_id, payment_channel_name,
			merchant_pass_key, merchant_status, date_created, settlement_password)
		VALUES(@company_id, @operator_id, @merchant_group_id, @merchant_name, @merchant_id, @merchant_name, @currency,
			@payment_channel_id, @payment_channel_name,
			LEFT(REPLACE(NEWID(),'-','') , 10), 'Y', @getdate, '')

		INSERT INTO dbo.merchant_setting(company_id, operator_id, merchant_group_id, merchant_code, merchant_id, merchant_name, currency, 
			settlement_min, settlement_max, settlement_fee_percent, settlement_fix_rate, topup_fee_percent, topup_fix_rate, 
			pg_pool_id, gateway_fee_type, date_created, 
			fundin_status, fundin_amount_min, fundin_amount_max, fundin_fee_percent, fundin_fix_rate, fundin_referral_fee_percent, 
			fundout_status, fundout_amount_min, fundout_amount_max, fundout_fee_percent, fundout_fix_rate, fundout_referral_fee_percent)
		VALUES(@company_id, @operator_id, @merchant_group_id, @merchant_name, @merchant_id, @merchant_name, @currency, 
			0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 
			'', '', @getdate, 
			'N', 0.00, 0.00, 0.00, 0.00, 0.00, 
			'N', 0.00, 0.00, 0.00, 0.00, 0.00)

		INSERT INTO dbo.merchant_balance(merchant_id, merchant_name, currency, 
			merchant_balance, merchant_balance_fundin, merchant_balance_fundout, 
			merchant_outstanding_fundin, merchant_outstanding_fundout,
			merchant_total_fundin, merchant_total_fundout, merchant_statement_fundin, merchant_statement_fundout)
		VALUES(@merchant_id, @merchant_name, @currency, 
			0.00, 0.00, 0.00,
			0.00, 0.00,
			0.00, 0.00, 0.00, 0.00)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantCodeGetData]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantCodeGetData]
(
    @merchant_code varchar(20),
	@currency varchar(10),
	@stamp_user varchar(20)
)
AS
/*
	select * from merchant_master_currency with (nolock)
	
	rf_param spMerchantCodeGetData

	EXEC spMerchantCodeGetData @merchant_code='DEVCOPY', @currency='IDR', @stamp_user='developer13'

*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@getdate datetime, @merchant_balance_fundin decimal(18,4), @merchant_balance_fundout decimal(18,4)

	IF @merchant_code = '' OR @currency = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameter'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT	@merchant_balance_fundin = 0.00,
			@merchant_balance_fundout = 0.00
	-----------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT	@merchant_balance_fundin = ISNULL(merchant_balance_fundin,0.00), 
			@merchant_balance_fundout = ISNULL(merchant_balance_fundout,0.00)
	FROM dbo.merchant_master_balance WITH (NOLOCK)
	WHERE merchant_code = @merchant_code
	AND currency = @currency

	SELECT	company_id, operator_id, merchant_group_id, currency, merchant_name, settlement_password, 
			merchant_balance_fundin = @merchant_balance_fundin, merchant_balance_fundout = @merchant_balance_fundout
	FROM dbo.merchant_master_currency WITH (NOLOCK)
	WHERE merchant_code = @merchant_code
	AND currency = @currency
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantDelete]
(
    @company_id varchar(3),
    @operator_id varchar(2),
	@merchant_id varchar(10),
    @merchant_name nvarchar(50), --graylog
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant

	select * from merchant_list with (nolock)
	select * from merchant_setting with (nolock)
	
	rf_param spMerchantDelete

	EXEC spMerchantDelete @company_id='000', @operator_id='00', @merchant_id='DEVCOPY', @merchant_name='Merchant Name 2', @stamp_user=''

*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000)

	IF @company_id = '' OR @operator_id = '' OR @merchant_id = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameter'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_id FROM dbo.merchant_list WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------

	BEGIN TRY
		BEGIN TRANSACTION
		
		DELETE FROM dbo.merchant_list
		WHERE company_id = @company_id 
		AND operator_id = @operator_id 
		AND merchant_id = @merchant_id

		DELETE FROM dbo.merchant_setting
		WHERE company_id = @company_id 
		AND operator_id = @operator_id 
		AND merchant_id = @merchant_id

		DELETE FROM dbo.merchant_balance
		WHERE merchant_id = @merchant_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantEdit]
(
    @company_id varchar(3),
    @operator_id varchar(2),
	@merchant_id varchar(10),
    @merchant_name nvarchar(50),
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant

	select * from merchant_list with (nolock)
	select * from merchant_setting with (nolock)
	
	rf_param spMerchantEdit

	EXEC spMerchantEdit @company_id='000', @operator_id='00', @merchant_id='DEVCOPY', @merchant_name='Merchant Name 2', @stamp_user=''

*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@getdate datetime

	IF @company_id = '' OR @operator_id = '' OR @merchant_id = '' OR @merchant_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameter'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_id FROM dbo.merchant_list WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------

	SET @getdate = dbo.fnGetDateGMT7()

	BEGIN TRY
		BEGIN TRANSACTION
		
		UPDATE dbo.merchant_list
		SET merchant_name = @merchant_name,
			date_updated = @getdate
		WHERE company_id = @company_id 
		AND operator_id = @operator_id 
		AND merchant_id = @merchant_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantEditDeveloperSetting]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantEditDeveloperSetting]
(
    @company_id varchar(3),
    @operator_id varchar(2),
	@merchant_id varchar(10),
	@merchant_pass_key varchar(10),
	@pg_pool_id varchar(50),
	@gateway_fee_type varchar(50),
    @merchant_name nvarchar(50), --graylog
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant

	select * from merchant_list with (nolock)
	select * from merchant_setting with (nolock)
	select * from payment_gateway_merchant_list with (nolock)
	
	rf_column_list merchant_list,'@sp'
	rf_column_list merchant_list,'@update'
	rf_param spMerchantEditDeveloperSetting

	EXEC spMerchantEditDeveloperSetting @company_id='000', @operator_id='00', @merchant_pass_key='XXXXXXX', 
		@merchant_id='DEVCOPY', @pg_pool_id='DEF_POOL_IDR_IB', @gateway_fee_type='PERCENT', @merchant_name='', @stamp_user=''

*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@getdate datetime

	IF @company_id = '' OR @operator_id = '' OR @merchant_id = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameter'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_id FROM dbo.merchant_list WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------

	SET @getdate = dbo.fnGetDateGMT7()

	BEGIN TRY
		BEGIN TRANSACTION
		
		UPDATE dbo.merchant_list
		SET merchant_pass_key = @merchant_pass_key,
			date_updated = @getdate
		WHERE company_id = @company_id 
		AND operator_id = @operator_id 
		AND merchant_id = @merchant_id

		UPDATE dbo.merchant_setting
		SET pg_pool_id = @pg_pool_id,
			gateway_fee_type = @gateway_fee_type,
			date_updated = @getdate
		WHERE company_id = @company_id 
		AND operator_id = @operator_id 
		AND merchant_id = @merchant_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantEditFundSetting]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantEditFundSetting]
(
    @company_id varchar(3),
    @operator_id varchar(2),
	@merchant_id varchar(10),
	@fundin_status varchar(1),
	@fundin_amount_min decimal(18,4),
	@fundin_amount_max decimal(18,4),
	@fundin_fee_percent decimal(18,4),
	@fundin_fix_rate decimal(18,4),
	@fundin_referral_fee_percent decimal(18,4),
	@fundout_status varchar(1),
	@fundout_amount_min decimal(18,4),
	@fundout_amount_max decimal(18,4),
	@fundout_fee_percent decimal(18,4),
	@fundout_fix_rate decimal(18,4),
	@fundout_referral_fee_percent decimal(18,4),
    @merchant_name nvarchar(50), --graylog
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant

	select * from merchant_list with (nolock)
	select * from merchant_setting with (nolock)
	
	rf_column_list merchant_setting,'@sp'
	rf_column_list merchant_setting,'@update'
	rf_param spMerchantEditFundSetting

	EXEC spMerchantEditFundSetting @company_id='000', @operator_id='00', @merchant_id='DEVCOPY', 
		@fundin_status='Y', @fundin_amount_min=10000.00, @fundin_amount_max=10000.00, @fundin_fee_percent=3.00, @fundin_fix_rate=5000.00, @fundin_referral_fee_percent=0.50, 
		@fundout_status='Y', @fundout_amount_min=10000.00, @fundout_amount_max=10000.00, @fundout_fee_percent=3.00, @fundout_fix_rate=5000.00, @fundout_referral_fee_percent=0.50, 
		@merchant_name='', @stamp_user=''

*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@getdate datetime, @merchant_code varchar(20), @currency varchar(3)

	IF @company_id = '' OR @operator_id = '' OR @merchant_id = '' OR @fundin_status NOT IN ('Y','N') OR @fundout_status NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameter'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_id FROM dbo.merchant_list WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @merchant_code = merchant_code, @currency = currency FROM dbo.merchant_setting WITH (NOLOCK) WHERE merchant_id = @merchant_id

	--Fund Out hanya boleh ada 1
	IF @fundout_status = 'Y'
	BEGIN
		IF EXISTS(SELECT merchant_id FROM dbo.merchant_setting WITH (NOLOCK) 
			WHERE merchant_code = @merchant_code AND currency = @currency AND merchant_id <> @merchant_id AND fundout_status = 'Y')
		BEGIN
			SELECT @merchant_id = merchant_id 
			FROM dbo.merchant_setting WITH (NOLOCK) 
			WHERE merchant_code = @merchant_code 
			AND currency = @currency 
			AND merchant_id <> @merchant_id 
			AND fundout_status = 'Y'

			SELECT @result_code = 39999, @error_message = 'Merchant Fund Out already exists '+@merchant_id
			SELECT @result_code, @error_message
			RETURN
		END
	END

	-----------------------------------------------------------

	SET @getdate = dbo.fnGetDateGMT7()

	BEGIN TRY
		BEGIN TRANSACTION
		
		UPDATE dbo.merchant_setting
		SET fundin_status = @fundin_status,
			fundin_amount_min = @fundin_amount_min,
			fundin_amount_max = @fundin_amount_max,
			fundin_fee_percent = @fundin_fee_percent,
			fundin_fix_rate = @fundin_fix_rate,
			fundin_referral_fee_percent = @fundin_referral_fee_percent,
			fundout_status = @fundout_status,
			fundout_amount_min = @fundout_amount_min,
			fundout_amount_max = @fundout_amount_max,
			fundout_fee_percent = @fundout_fee_percent,
			fundout_fix_rate = @fundout_fix_rate,
			fundout_referral_fee_percent = @fundout_referral_fee_percent,
			date_updated = @getdate
		WHERE company_id = @company_id 
		AND operator_id = @operator_id 
		AND merchant_id = @merchant_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantEditSettlement]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantEditSettlement]
(
	@merchant_code varchar(20),
	@currency varchar(10),
	@settlement_min decimal(18,4),
	@settlement_max decimal(18,4),
	@settlement_fee_percent decimal(18,4) = 0.00,
	@settlement_fix_rate decimal(18,4),
	@topup_fee_percent decimal(18,4) = 0.00,
	@topup_fix_rate decimal(18,4) = 0.00,
    @stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant

	select * from merchant_list with (nolock)
	select * from merchant_setting with (nolock)
	
	rf_param spMerchantEditSettlement

	EXEC spMerchantEditSettlement @merchant_code='DEVCOPY', @currency='', @settlement_min=10000000.00, @settlement_max=10000000000.00, 
		@settlement_fee_percent=0.00, @settlement_fix_rate=500000.00, @topup_fee_percent=0.00, @topup_fix_rate=5000.00, @stamp_user=''

*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@getdate datetime

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------

	SET @getdate = dbo.fnGetDateGMT7()

	BEGIN TRY
		BEGIN TRANSACTION
		
		UPDATE dbo.merchant_master_currency
		SET settlement_min = @settlement_min,
			settlement_max = @settlement_max,
			settlement_fee_percent = @settlement_fee_percent,
			settlement_fix_rate = @settlement_fix_rate,
			topup_fee_percent = @topup_fee_percent,
			topup_fix_rate = @topup_fix_rate,
			last_update = @getdate
		WHERE merchant_code = @merchant_code
		AND currency = @currency

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantEditStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantEditStatus]
(
	@company_id varchar(3),
    @operator_id varchar(2),
	@merchant_id varchar(10),
	@merchant_status varchar(1), --Y/N
	@merchant_name nvarchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	Developer > Master > Merchant

	select * from dbo.merchant_list with (nolock)

	EXEC spMerchantEditStatus @company_id='000', @operator_id='00', @merchant_id='DEVCOPY', @merchant_status='Y', ='', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@getdate datetime
			
	IF @merchant_status NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status Invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_id FROM dbo.merchant_list WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	------------------------------------------------------------------------------------
	SET @getdate = dbo.fnGetDateGMT7()

	BEGIN TRY
		BEGIN TRANSACTION
	
		UPDATE dbo.merchant_list
		SET	merchant_status = @merchant_status,
			date_updated = @getdate
		WHERE company_id = @company_id 
		AND operator_id = @operator_id 
		AND merchant_id = @merchant_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantFundOutRequestAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantFundOutRequestAdd]
(
	@merchant_id varchar(50),	--(backoffice	merchant_id) ??
	--@merchant_pass_key varchar(50),
	@merchant_transaction_id varchar(50), --Merchant trx ID
	@amount decimal(18, 4), --Amount
	@request_date datetime,
	@request_url varchar(2000), --Callback URL
	@currency varchar(10), --(backoffice) ??
	@language varchar(10), --Language
	@bank_code varchar(10),	--Bank Name
	@ip_address varchar(15),  --(backoffice ip_address)
	@bank_account_no varchar(50), --Bank Account No
	@bank_account_name nvarchar(100), --Bank Account Name
	@bank_branch varchar(50), --Branch
	@bank_city varchar(50), --City
	@bank_province varchar(50), --Provice
	@remark nvarchar(500) --Remark
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50), @generator_no bigint, @date_stamp datetime
		, @merchant_name nvarchar(200), @pg_id varchar(50), @pg_name nvarchar(200)
		, @merchant_status varchar(1), @payment_channel_id varchar(20), @payment_channel_name varchar(200)
		, @pg_pool_id varchar(50), @pg_merchant_id varchar(50), @pg_status varchar(1)
		, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4)
		, @gateway_fee_type varchar(50), @merchant_balance_fundout decimal(18,4)
		, @payment_channel_id_vendor varchar(20)
		, @pg_pool_weight decimal(18,4), @pg_pool_score_current decimal(18,4)
		, @merchant_code varchar(50), @bank_name nvarchar(50)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	IF @currency <> 'IDR'
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Currency Not Supported'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF dbo.fnCheckDateInterval(@request_date) = 'N'
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Date Time'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT merchant_transaction_id FROM dbo.merchant_transaction_fundout_idr_check WITH(NOLOCK)
		WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 30003, @error_message = 'Merchant Transaction ID Exists'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_name = merchant_name, @merchant_status = merchant_status
		, @payment_channel_id = payment_channel_id, @payment_channel_name = payment_channel_name
		, @merchant_code = merchant_code
	FROM dbo.merchant_list WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @merchant_status = 'N'
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Not Exists or Disabled'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @bank_name = bank_name
	FROM dbo.master_bank WITH(NOLOCK)
	WHERE bank_code = @bank_code
	---------------------------------------------------------------------------------------------
	-- Pool of PG
	---------------------------------------------------------------------------------------------
	SELECT @pg_pool_id = pg_pool_id, @gateway_fee = fundout_fix_rate
		, @gateway_percent = fundout_fee_percent, @gateway_fee_type = gateway_fee_type
	FROM dbo.merchant_setting WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @gateway_fee_type = 'FIXED'
	BEGIN
		SELECT @gateway_percent = 0
	END
	ELSE IF @gateway_fee_type = 'PERCENT'
	BEGIN
		SELECT @gateway_fee = (@amount * @gateway_percent)/100
	END
	ELSE
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Not Ready'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT TOP 1 @pg_id = pg_id, @pg_merchant_id = pg_merchant_id, @pg_name = pg_name
		, @pg_status = pg_status, @payment_channel_id_vendor = pg_payment_channel_id_vendor
		, @pg_pool_weight =  pg_pool_weight, @pg_pool_score_current = pg_pool_score_current
	FROM dbo.fnGetPaymentGatewayMerchantFundOut(@pg_pool_id, @payment_channel_id, @bank_code, @amount)
	---------------------------------------------------------------------------------------------
	IF @pg_status = 'N'
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Not Ready'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		SELECT @date_stamp = dbo.fnGetDateGMT7()

		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @transaction_id = generator_code + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'FUND_OUT' AND currency = 'IDR'

		UPDATE dbo.merchant_master_balance
        SET merchant_outstanding_fundout = merchant_outstanding_fundout + @amount + @gateway_fee
        WHERE merchant_code = @merchant_code
        AND currency = @currency

		INSERT INTO dbo.merchant_transaction_fundout_idr_check(merchant_transaction_id, merchant_id, date_stamp
			, transaction_id)
		VALUES(@merchant_transaction_id, @merchant_id, @date_stamp
			, @transaction_id)

		INSERT INTO dbo.merchant_transaction_pending_fundout_idr(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, amount, request_date, request_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp
			, bank_name, bank_account_no, bank_account_name, bank_branch
			, bank_city, bank_province, payment_channel_id, payment_channel_name
			, pg_merchant_id, gateway_fee, gateway_percent, gateway_fee_type
			, payment_channel_id_vendor, pg_pool_id, pg_pool_weight, pg_pool_score
			, merchant_code)
		VALUES(@transaction_id, @merchant_transaction_id
			, @merchant_id, @merchant_name, @amount, @request_date, @request_url
			, @currency, @language, @bank_code, @ip_address, @pg_id, @pg_name
			, 'PENDING', @date_stamp
			, @bank_name, @bank_account_no, @bank_account_name, @bank_branch
			, @bank_city, @bank_province, @payment_channel_id, @payment_channel_name
			, @pg_merchant_id, @gateway_fee, @gateway_percent, @gateway_fee_type
			, @payment_channel_id_vendor, @pg_pool_id, @pg_pool_weight, @pg_pool_score_current
			, @merchant_code)

		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		SELECT @pg_id, @pg_merchant_id, @transaction_id, @gateway_fee_type, @gateway_fee
			, @payment_channel_id, @payment_channel_id_vendor
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantGetData]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantGetData]
(
    @merchant_id varchar(10),
	@merchant_name nvarchar(50), --graylog
	@stamp_user varchar(20)
)
AS
/*
	select * from merchant_list with (nolock)
	
	rf_param spMerchantGetData

	EXEC spMerchantGetData @merchant_id='DEVCOPY', @merchant_name='', @stamp_user=''

*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@getdate datetime, @merchant_balance_fundin decimal(18,4), @merchant_balance_fundout decimal(18,4)

	IF @merchant_id = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid parameter'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_id FROM dbo.merchant_list WITH (NOLOCK) WHERE merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT	@merchant_balance_fundin = 0.00,
			@merchant_balance_fundout = 0.00
	-----------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT	@merchant_balance_fundin = ISNULL(merchant_balance_fundin,0.00), 
			@merchant_balance_fundout = ISNULL(merchant_balance_fundout,0.00)
	FROM dbo.merchant_balance WITH (NOLOCK)
	WHERE merchant_id = @merchant_id

	SELECT	company_id, operator_id, merchant_group_id, currency, merchant_name, settlement_password, 
			merchant_balance_fundin = @merchant_balance_fundin, merchant_balance_fundout = @merchant_balance_fundout
	FROM dbo.merchant_list WITH (NOLOCK)
	WHERE merchant_id = @merchant_id
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantList]
(
	@page int,
	@page_size int,
	@company_id varchar(3),
	@operator_id varchar(2),
	@currency varchar(10),
	@merchant_group_id varchar(20),
	@merchant_name nvarchar(50),
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant
	
	selcet * from dbo.merchant_list with (nolock)

	EXEC PacmanMainDB.dbo.spMerchantList @page=1, @page_size=70, @company_id='', @operator_id='', @currency='', @merchant_group_id='', @merchant_name='', @stamp_user=''
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@total_rows int
	
	SELECT	@company_id = CASE @company_id WHEN '' THEN '%' ELSE @company_id END,
			@operator_id = CASE @operator_id WHEN '' THEN '%' ELSE @operator_id END,
			@currency = CASE @currency WHEN '' THEN '%' ELSE @currency END,
			@merchant_group_id = CASE @merchant_group_id WHEN '' THEN '%' ELSE @merchant_group_id END,
			@merchant_name = CASE @merchant_name WHEN '' THEN '%' ELSE '%'+@merchant_name+'%' END
	
	SELECT @total_rows = COUNT(1)
	FROM dbo.merchant_list WITH (NOLOCK) 
	WHERE company_id LIKE @company_id
	AND operator_id LIKE @operator_id
	AND currency LIKE @currency
	AND merchant_group_id LIKE @merchant_group_id
	AND merchant_name LIKE @merchant_name
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows

	SELECT ml.company_id, c.company_name, ml.operator_id, o.operator_name, ml.merchant_group_id, mg.merchant_group_name, ml.merchant_id, ml.merchant_name, ml.currency, 
		ml.merchant_status, ml.payment_channel_id, payment_channel_name = pc.channel_name, ml.date_created, show_delete = 'Y',
		m.settlement_min, m.settlement_max, m.settlement_fix_rate,
		m.fundin_status, m.fundin_amount_min, m.fundin_amount_max, m.fundin_fee_percent, m.fundin_fix_rate, m.fundin_referral_fee_percent,
		m.fundout_status, m.fundout_amount_min, m.fundout_amount_max, m.fundout_fee_percent, m.fundout_fix_rate, m.fundout_referral_fee_percent,
		m.pg_pool_id, p.pg_pool_name, m.date_created, m.date_updated, m.gateway_fee_type, ml.merchant_pass_key, m.settlement_fee_percent, m.topup_fee_percent, m.topup_fix_rate 
	FROM dbo.merchant_list ml WITH (NOLOCK)
	INNER JOIN dbo.merchant_setting m WITH (NOLOCK) ON ml.merchant_id = m.merchant_id
	LEFT JOIN dbo.master_company c WITH (NOLOCK) ON ml.company_id = c.company_id
	LEFT JOIN dbo.master_operator o WITH (NOLOCK) ON ml.operator_id = o.operator_id
	LEFT JOIN dbo.master_merchant_group mg WITH (NOLOCK) ON ml.company_id = mg.company_id AND ml.operator_id = mg.operator_id AND ml.merchant_group_id = mg.merchant_group_id
	LEFT JOIN dbo.master_payment_channel pc WITH (NOLOCK) ON ml.payment_channel_id = pc.channel_id
	LEFT JOIN dbo.master_payment_gateway_pool p WITH (NOLOCK) ON m.pg_pool_id = p.pg_pool_id
	WHERE ml.company_id LIKE @company_id
	AND ml.operator_id LIKE @operator_id
	AND ml.currency LIKE @currency
	AND ml.merchant_group_id LIKE @merchant_group_id
	AND ml.merchant_name LIKE @merchant_name
	ORDER BY ml.merchant_name
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantList2]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantList2]
(
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@merchant_code nvarchar(20),
	@currency varchar(10),
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant
	
	selcet * from dbo.merchant_list with (nolock)

	EXEC PacmanMainDB.dbo.spMerchantList2 @company_id='', @operator_id='', @merchant_group_id='', @merchant_code='', @currency='', @page=1, @page_size=70, @stamp_user='developer13'
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@total_rows int
	
	SELECT	@company_id = CASE @company_id WHEN '' THEN '%' ELSE @company_id END,
			@operator_id = CASE @operator_id WHEN '' THEN '%' ELSE @operator_id END,
			@merchant_group_id = CASE @merchant_group_id WHEN '' THEN '%' ELSE @merchant_group_id END,
			@merchant_code = CASE @merchant_code WHEN '' THEN '%' ELSE @merchant_code END,
			@currency = CASE @currency WHEN '' THEN '%' ELSE @currency END
	
	----------------------------------------------------------------------------------

	CREATE TABLE #tbl_merchant_code (merchant_code varchar(20), currency varchar(10))

	--user developer
	--user company 
	--user operator
	--user merchant group
	--user normal (user group merchant)

	----------------------------------------------------------------------------------
	INSERT INTO #tbl_merchant_code (merchant_code, currency)
	SELECT merchant_code, currency
	FROM dbo.merchant_master_currency WITH (NOLOCK) 
	WHERE company_id LIKE @company_id
	AND operator_id LIKE @operator_id
	AND merchant_group_id LIKE @merchant_group_id
	AND merchant_code LIKE @merchant_code
	AND currency LIKE @currency
	AND status_active = 'Y'
	GROUP BY merchant_code, currency
	
	SELECT @total_rows = COUNT(1) FROM #tbl_merchant_code WITH (NOLOCK)

	----------------------------------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows

	--Merchant Code
	SELECT m.company_id, c.company_name, m.operator_id, o.operator_name, m.merchant_group_id, mg.merchant_group_name, m.merchant_code, m.merchant_name, m.currency, 
		m.status_active, show_delete = 'Y',
		m.settlement_min, m.settlement_max, m.settlement_fix_rate, m.settlement_fee_percent,
		m.topup_fee_percent, m.topup_fix_rate
	FROM dbo.merchant_master_currency m WITH (NOLOCK)
	INNER JOIN #tbl_merchant_code tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
	LEFT JOIN dbo.master_company c WITH (NOLOCK) ON m.company_id = c.company_id
	LEFT JOIN dbo.master_operator o WITH (NOLOCK) ON m.operator_id = o.operator_id
	LEFT JOIN dbo.master_merchant_group mg WITH (NOLOCK) ON m.merchant_group_id = mg.merchant_group_id
	ORDER BY m.merchant_code
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY

	--Payment Channel
	SELECT ml.company_id, ml.operator_id, ml.merchant_code, ml.currency, ml.merchant_id, ml.payment_channel_id, payment_channel_name = pc.channel_name, 
		m.fundin_status, m.fundin_amount_min, m.fundin_amount_max, m.fundin_fee_percent, m.fundin_fix_rate, m.fundin_referral_fee_percent,
		m.fundout_status, m.fundout_amount_min, m.fundout_amount_max, m.fundout_fee_percent, m.fundout_fix_rate, m.fundout_referral_fee_percent,
		m.pg_pool_id, p.pg_pool_name, m.date_created, m.date_updated, m.gateway_fee_type, ml.merchant_pass_key
	FROM dbo.merchant_list ml WITH (NOLOCK)
	INNER JOIN #tbl_merchant_code tbl WITH (NOLOCK) ON ml.merchant_code = tbl.merchant_code AND ml.currency = tbl.currency
	INNER JOIN dbo.merchant_setting m WITH (NOLOCK) ON ml.merchant_id = m.merchant_id
	LEFT JOIN dbo.master_payment_channel pc WITH (NOLOCK) ON ml.payment_channel_id = pc.channel_id
	LEFT JOIN dbo.master_payment_gateway_pool p WITH (NOLOCK) ON m.pg_pool_id = p.pg_pool_id
	ORDER BY ml.merchant_code, ml.currency, ml.payment_channel_id
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantResetSettlementPassword]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantResetSettlementPassword]
(
    @merchant_code varchar(20),
	@currency varchar(10),
	@settlement_password varchar(255),
	@stamp_user varchar(20)
)
AS
/*
	Page : Developer > Master > Merchant

	rf_param spMerchantResetSettlementPassword

	EXEC spMerchantResetSettlementPassword @merchant_code='DEVCOPY', @currency='', @settlement_password='', @stamp_user='developer13'

*/
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@getdate datetime

	IF @settlement_password = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Password is Empty'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------

	SET @getdate = dbo.fnGetDateGMT7()

	BEGIN TRY
		BEGIN TRANSACTION
		
		UPDATE dbo.merchant_master_currency
		SET settlement_password = @settlement_password,
			last_update = @getdate
		WHERE merchant_code = @merchant_code
		AND currency = @currency

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantSettlementAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantSettlementAdd]
(
    @merchant_code varchar(20) = '',
	@currency varchar(10) = '',
	@bank_code varchar(10),
	@bank_account_no varchar(50),
	@bank_account_name nvarchar(50),
	@bank_province nvarchar(50),
	@bank_city nvarchar(50),
	@bank_branch nvarchar(50),
	@settlement_amount decimal(18,4),
	@settlement_request_remark varchar(200),
	@ip_address varchar(50),
	@stamp_user varchar(20),
	@merchant_id varchar(50) = '',
	@merchant_name nvarchar(50) = '' --graylog	
)
AS
BEGIN
/*
	[Merchant] > Settlement > Settlement Request

	rf_param spMerchantSettlementAdd
	rf_column_list merchant_settlement_list,'@type'
	
	EXEC spMerchantSettlementAdd @merchant_code='Merchant Name 2', @currency='IDR', @bank_code='BCA', @bank_account_no='287361927362', @bank_account_name='ANGKASA PURA', 
		@bank_province='', @bank_city='', @bank_branch='', @settlement_amount=10000.00, @settlement_request_remark='Withdraw', @ip_address='127.0.0.1', @stamp_user='developer13'

	select * from merchant_settlement_list
	select * from merchant_settlement_pending
	-----------------------------------------------------------------------------------
	single
		add merchant_settlement_pending
		add merchant_statement_request (statement_fundin--) (buat validasi)
			job : 
			add merchant_statement (SETTLE PENDING) (fundin--, statement_fundin++)
	operator failed
		add merchant_settlement_list (FAILED)
		delete merchant_settlement_pending
		add merchant_statement_request (statement_fundin++) (buat validasi)
			job : 
			add merchant_statement (SETTLE FAILED) (fundin++, statement_fundin--)
	operator success (add gateway)
		gateway 1 : add merchant_settlement_payment_temp
		gateway 2 : add merchant_settlement_payment_temp
		submit : 
			add merchant_settlement_list (SUCCESS)
			add merchant_settlement_payment
			delete merchant_settlement_pending
			delete merchant_settlement_payment_temp	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20), @getdate datetime,
			@settlement_min decimal(18,4), @settlement_max decimal(18,4), @settlement_fee_percent decimal(18,4), @settlement_fix_rate decimal(18,4),
			@generator_no bigint, @settlement_id varchar(50), @settlement_net_amount decimal(18,4), @settlement_fee_amount decimal(18,4),			 
			@merchant_balance_fundin decimal(18,4), @merchant_balance_before decimal(18,4), @merchant_balance_after decimal(18,4), @merchant_amount_debit decimal(18,4)
	
	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Merchant'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @settlement_amount < 0.00
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Amount'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------

	SELECT	@merchant_name = merchant_name, 
			@company_id = company_id, 
			@operator_id = operator_id, 
			@merchant_group_id = merchant_group_id
	FROM dbo.merchant_master WITH(NOLOCK)
	WHERE merchant_code = @merchant_code

	-----------------------------------------------------------------------------
	
	SELECT @merchant_balance_fundin = merchant_balance_fundin + merchant_outstanding_fundin
	FROM dbo.merchant_master_balance WITH (NOLOCK)
	WHERE merchant_code = @merchant_code
	AND currency = @currency
	
	SELECT	@settlement_min = settlement_min,
			@settlement_max = settlement_max,
			@settlement_fee_percent = settlement_fee_percent,
			@settlement_fix_rate = settlement_fix_rate
	FROM dbo.merchant_master_currency WITH (NOLOCK)
	WHERE merchant_code = @merchant_code
	AND currency = @currency

	SELECT 
		@settlement_fee_amount = @settlement_amount * @settlement_fee_percent / 100.00,
		@settlement_fee_amount = CASE WHEN @currency IN ('IDR','VND') THEN CEILING(@settlement_fee_amount) ELSE @settlement_fee_amount END,
		@settlement_fee_amount = CASE WHEN @settlement_fee_amount < @settlement_fix_rate THEN @settlement_fix_rate ELSE @settlement_fee_amount END

	SET @settlement_net_amount = @settlement_amount + @settlement_fee_amount

	IF @merchant_balance_fundin < @settlement_net_amount
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Balance Not Enough!!'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @settlement_amount > @settlement_max
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Maximum Settlement = '+FORMAT(@settlement_max,'#,##0.##')
		SELECT @result_code, @error_message
		RETURN
	END

	IF @settlement_amount < @settlement_min
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Minimum Settlement = '+FORMAT(@settlement_min,'#,##0.##')
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @settlement_id = generator_code + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'SETTLEMENT'
		AND currency = @currency

		INSERT INTO dbo.merchant_settlement_pending(settlement_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, 
			currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
			settlement_request_date, settlement_request_user, settlement_request_remark, settlement_status, 
			settlement_payment_amount, bank_code, bank_account_no, bank_account_name, bank_province, bank_city, bank_branch, create_date)
		VALUES(@settlement_id, @company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_name, 
			@currency, @settlement_amount, @settlement_fee_amount, @settlement_net_amount, 
			@getdate, @stamp_user, @settlement_request_remark, 'PENDING', 
			0.00, @bank_code, @bank_account_no, @bank_account_name, @bank_branch, @bank_city, @bank_province, @getdate)

		UPDATE dbo.merchant_master_balance
		SET @merchant_amount_debit = @settlement_net_amount,
			@merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
			@merchant_balance_after = @merchant_balance_before - @merchant_amount_debit,
			merchant_balance_fundin = merchant_balance_fundin - @merchant_amount_debit,
			date_updated = @getdate
		WHERE merchant_code = @merchant_code
		AND currency = @currency

		IF @currency = 'IDR'
		BEGIN
			INSERT INTO dbo.merchant_statement_idr(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT 'SETTLE', 'SETTLE', @settlement_id, @settlement_id
				, merchant_code, '', merchant_name, settlement_amount, settlement_request_date, '', currency
				, '', bank_code, '', '', bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, '', '', 'SUCCESS', @getdate, '', '', ''
				, '', @getdate, settlement_fee_amount, 0.00, ''
				, @merchant_balance_before, @merchant_amount_debit, 0.00, @merchant_balance_after, 0.00
			FROM dbo.merchant_settlement_pending WITH(NOLOCK)
			WHERE settlement_id = @settlement_id
		END
		ELSE IF @currency = 'VND'
		BEGIN
			INSERT INTO dbo.merchant_statement_vnd(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT 'SETTLE', 'SETTLE', @settlement_id, @settlement_id
				, merchant_code, '', merchant_name, settlement_amount, settlement_request_date, '', currency
				, '', bank_code, '', '', bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, '', '', 'SUCCESS', @getdate, '', '', ''
				, '', @getdate, settlement_fee_amount, 0.00, ''
				, @merchant_balance_before, @merchant_amount_debit, 0.00, @merchant_balance_after, 0.00
			FROM dbo.merchant_settlement_pending WITH(NOLOCK)
			WHERE settlement_id = @settlement_id
		END
		ELSE IF @currency = 'THB'
		BEGIN
			INSERT INTO dbo.merchant_statement_thb(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT 'SETTLE', 'SETTLE', @settlement_id, @settlement_id
				, merchant_code, '', merchant_name, settlement_amount, settlement_request_date, '', currency
				, '', bank_code, '', '', bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, '', '', 'SUCCESS', @getdate, '', '', ''
				, '', @getdate, settlement_fee_amount, 0.00, ''
				, @merchant_balance_before, @merchant_amount_debit, 0.00, @merchant_balance_after, 0.00
			FROM dbo.merchant_settlement_pending WITH(NOLOCK)
			WHERE settlement_id = @settlement_id
		END
		ELSE IF @currency = 'MYR'
		BEGIN
			INSERT INTO dbo.merchant_statement_myr(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT 'SETTLE', 'SETTLE', @settlement_id, @settlement_id
				, merchant_code, '', merchant_name, settlement_amount, settlement_request_date, '', currency
				, '', bank_code, '', '', bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, '', '', 'SUCCESS', @getdate, '', '', ''
				, '', @getdate, settlement_fee_amount, 0.00, ''
				, @merchant_balance_before, @merchant_amount_debit, 0.00, @merchant_balance_after, 0.00
			FROM dbo.merchant_settlement_pending WITH(NOLOCK)
			WHERE settlement_id = @settlement_id
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantSettlementAddUpload]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantSettlementAddUpload]
(
    @merchant_code varchar(20) = '',
	@currency varchar(10) = '',
	@stamp_user varchar(20),
	@merchant_id varchar(50) = '', --remove
	@merchant_name nvarchar(50) = '' --remove
)
AS
BEGIN
/*
	[Merchant] > Settlement > Settlement Request

	rf_param spMerchantSettlementAddUpload
	rf_column_list merchant_settlement_temp,'@table'
	
	EXEC spMerchantSettlementAddUpload @merchant_code='Merchant Name 2', @currency='IDR', @stamp_user='developer13'

	select * from merchant_settlement_temp
	select * from merchant_settlement_list
	
	ambil total
	apakah duitnya cukup
	kalau ga cukup failed

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@getdate datetime, @generator_no bigint, @count int, @settlement_id varchar(50),
			@merchant_balance_fundin decimal(18,4), @merchant_balance_before decimal(18,4), @merchant_balance_after decimal(18,4), @merchant_amount_debit decimal(18,4),			
			@settlement_min decimal(18,4), @settlement_max decimal(18,4), @settlement_fee_percent decimal(18,4), @settlement_fix_rate decimal(18,4),
			@settlement_amount decimal(18,4), @settlement_fee_amount decimal(18,4), @settlement_net_amount decimal(18,4), @settlement_fee_amount_new decimal(18,4)			
	
	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Merchant'
		SELECT @result_code, @error_message
		RETURN
	END

	IF (SELECT COUNT(DISTINCT merchant_code) FROM dbo.merchant_settlement_temp WITH (NOLOCK) WHERE stamp_user = @stamp_user) > 1
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Data Merchant Temp'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF (SELECT COUNT(DISTINCT currency) FROM dbo.merchant_settlement_temp WITH (NOLOCK) WHERE stamp_user = @stamp_user) > 1
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Data Currency Temp'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF EXISTS(
		SELECT stamp_user 
		FROM dbo.merchant_settlement_temp WITH (NOLOCK) 
		WHERE stamp_user = @stamp_user 
		AND (bank_code = '' OR bank_account_no = '' OR bank_account_name = '' OR settlement_amount <= 0.00)
	)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Data Temp'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------
	--check settlement_amount		
	SELECT	@settlement_min = settlement_min,
			@settlement_max = settlement_max,
			@settlement_fee_percent = settlement_fee_percent,
			@settlement_fix_rate = settlement_fix_rate
	FROM dbo.merchant_master_currency WITH (NOLOCK)
	WHERE merchant_code = @merchant_code
	AND currency = @currency

	IF EXISTS(SELECT stamp_user FROM dbo.merchant_settlement_temp WITH (NOLOCK) WHERE stamp_user = @stamp_user AND settlement_amount < @settlement_min)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Settlement amount minimum = '+FORMAT(@settlement_min,'#,##0.##')
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT stamp_user FROM dbo.merchant_settlement_temp WITH (NOLOCK) WHERE stamp_user = @stamp_user AND settlement_amount > @settlement_max)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Settlement amount maximum = '+FORMAT(@settlement_max,'#,##0.##')
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------
	CREATE TABLE #tbl_settlement
	(
		row_no bigint identity(1,1),
		table_row_no bigint,
		company_id varchar(3),
		operator_id varchar(2),
		merchant_group_id varchar(20),
		merchant_code varchar(20),
		merchant_name nvarchar(50),
		currency varchar(10),
		settlement_amount decimal(18,4),
		settlement_fee_amount decimal(18,4),
		settlement_fee_amount_new decimal(18,4),
		settlement_net_amount decimal(18,4),
		settlement_request_date datetime,
		settlement_request_user varchar(20),
		settlement_request_remark varchar(200),
		bank_code varchar(10),
		bank_account_no varchar(50),
		bank_account_name nvarchar(100),
		bank_province nvarchar(100),
		bank_city nvarchar(100),
		bank_branch nvarchar(100),
		create_date datetime,
		stamp_user varchar(20),
		settlement_id varchar(50)
	)
		
	INSERT INTO #tbl_settlement (table_row_no, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, currency, 
		settlement_amount, settlement_fee_amount, settlement_fee_amount_new, settlement_net_amount, settlement_request_date, settlement_request_user, settlement_request_remark, 
		bank_code, bank_account_no, bank_account_name, bank_province, bank_city, bank_branch, create_date, stamp_user,
		settlement_id)
	SELECT row_no, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, currency, 
		settlement_amount, settlement_fee_amount, 0.00, settlement_net_amount, settlement_request_date, settlement_request_user, settlement_request_remark, 
		bank_code, bank_account_no, bank_account_name, bank_province, bank_city, bank_branch, create_date, stamp_user,
		''
	FROM dbo.merchant_settlement_temp WITH (NOLOCK)
	WHERE stamp_user = @stamp_user
	ORDER BY row_no

	SELECT TOP 1 @currency = currency FROM #tbl_settlement WITH (NOLOCK)

	-----------------------------------------------------------------------------
	--Fee Amount change
	UPDATE #tbl_settlement
	SET @settlement_fee_amount_new = settlement_amount * @settlement_fee_percent / 100.00,
		@settlement_fee_amount_new = CASE WHEN currency IN ('IDR','VND') THEN CEILING(@settlement_fee_amount_new) ELSE @settlement_fee_amount_new END,
		@settlement_fee_amount_new = CASE WHEN @settlement_fee_amount_new < @settlement_fix_rate THEN @settlement_fix_rate ELSE @settlement_fee_amount_new END,
		settlement_fee_amount_new = @settlement_fee_amount_new,
		settlement_net_amount = settlement_amount + settlement_fee_amount_new

	IF EXISTS(SELECT settlement_fee_amount FROM #tbl_settlement WITH (NOLOCK) WHERE settlement_fee_amount <> settlement_fee_amount_new)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Settlement Fee changed'
		SELECT @result_code, @error_message

		UPDATE m
		SET settlement_fee_amount = t.settlement_fee_amount_new,
			settlement_net_amount = t.settlement_net_amount
		FROM dbo.merchant_settlement_temp m WITH (NOLOCK)
		INNER JOIN #tbl_settlement t WITH (NOLOCK) ON m.row_no = t.table_row_no
		WHERE m.stamp_user = @stamp_user

		RETURN
	END
	-----------------------------------------------------------------------------
	--check balance enough
	SELECT	@settlement_amount = ISNULL(SUM(settlement_amount),0.00),
			@settlement_fee_amount = ISNULL(SUM(settlement_fee_amount),0.00),
			@settlement_net_amount = ISNULL(SUM(settlement_net_amount),0.00)
	FROM dbo.merchant_settlement_temp WITH (NOLOCK)
	WHERE stamp_user = @stamp_user
	AND merchant_code = @merchant_code
	AND currency = @currency

	SELECT @merchant_balance_fundin = merchant_balance_fundin --+ merchant_statement_fundin
	FROM dbo.merchant_master_balance WITH (NOLOCK)
	WHERE merchant_code = @merchant_code
	AND currency = @currency

	IF @merchant_balance_fundin < @settlement_net_amount
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Balance Fund In Not Enough!!'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------

	BEGIN TRY
	BEGIN TRANSACTION
		SET @getdate = dbo.fnGetDateGMT7()

		SELECT @count = COUNT(1) FROM #tbl_settlement WITH (NOLOCK) 

		--order 7 nomor
		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, generator_no = generator_no + @count
		WHERE generator_id = 'SETTLEMENT'
		AND currency = @currency
		
		UPDATE #tbl_settlement
		SET settlement_id = 'S' + @currency + CAST((@generator_no + row_no - 1) AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
		
		INSERT INTO dbo.merchant_settlement_pending(
			settlement_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, 
			currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
			settlement_request_date, settlement_request_user, settlement_request_remark, settlement_status, settlement_payment_amount, 
			bank_code, bank_account_no, bank_account_name, bank_province, bank_city, bank_branch, create_date)
		SELECT settlement_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, 
			currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
			@getdate, @stamp_user, settlement_request_remark, 'PENDING', 0.00, 
			bank_code, bank_account_no, bank_account_name, bank_branch, bank_city, bank_province, @getdate
		FROM #tbl_settlement WITH (NOLOCK) 
		ORDER BY row_no

		DELETE FROM dbo.merchant_settlement_temp 
		WHERE stamp_user = @stamp_user

		DECLARE list CURSOR FOR
		SELECT settlement_id, settlement_net_amount FROM #tbl_settlement WITH (NOLOCK) ORDER BY row_no
		OPEN list
		FETCH NEXT FROM list INTO @settlement_id, @settlement_net_amount
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @getdate = dbo.fnGetDateGMT7()

			UPDATE dbo.merchant_master_balance
			SET @merchant_amount_debit = @settlement_net_amount,
				@merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
				@merchant_balance_after = @merchant_balance_before - @merchant_amount_debit,
				merchant_balance_fundin = merchant_balance_fundin - @merchant_amount_debit,
				date_updated = @getdate
			WHERE merchant_code = @merchant_code
			AND currency = @currency

			IF @currency = 'IDR'
			BEGIN
				INSERT INTO dbo.merchant_statement_idr(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				SELECT 'SETTLE', 'SETTLE', @settlement_id, @settlement_id
					, merchant_code, '', merchant_name, settlement_amount, settlement_request_date, '', currency
					, '', bank_code, '', '', bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, '', '', 'SUCCESS', @getdate, '', '', ''
					, '', @getdate, settlement_fee_amount, 0.00, ''
					, @merchant_balance_before, @merchant_amount_debit, 0.00, @merchant_balance_after, 0.00
				FROM dbo.merchant_settlement_pending WITH(NOLOCK)
				WHERE settlement_id = @settlement_id
			END
			ELSE IF @currency = 'VND'
			BEGIN
				INSERT INTO dbo.merchant_statement_vnd(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				SELECT 'SETTLE', 'SETTLE', @settlement_id, @settlement_id
					, merchant_code, '', merchant_name, settlement_amount, settlement_request_date, '', currency
					, '', bank_code, '', '', bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, '', '', 'SUCCESS', @getdate, '', '', ''
					, '', @getdate, settlement_fee_amount, 0.00, ''
					, @merchant_balance_before, @merchant_amount_debit, 0.00, @merchant_balance_after, 0.00
				FROM dbo.merchant_settlement_pending WITH(NOLOCK)
				WHERE settlement_id = @settlement_id
			END
			ELSE IF @currency = 'THB'
			BEGIN
				INSERT INTO dbo.merchant_statement_thb(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				SELECT 'SETTLE', 'SETTLE', @settlement_id, @settlement_id
					, merchant_code, '', merchant_name, settlement_amount, settlement_request_date, '', currency
					, '', bank_code, '', '', bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, '', '', 'SUCCESS', @getdate, '', '', ''
					, '', @getdate, settlement_fee_amount, 0.00, ''
					, @merchant_balance_before, @merchant_amount_debit, 0.00, @merchant_balance_after, 0.00
				FROM dbo.merchant_settlement_pending WITH(NOLOCK)
				WHERE settlement_id = @settlement_id
			END
			ELSE IF @currency = 'MYR'
			BEGIN
				INSERT INTO dbo.merchant_statement_myr(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				SELECT 'SETTLE', 'SETTLE', @settlement_id, @settlement_id
					, merchant_code, '', merchant_name, settlement_amount, settlement_request_date, '', currency
					, '', bank_code, '', '', bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, '', '', 'SUCCESS', @getdate, '', '', ''
					, '', @getdate, settlement_fee_amount, 0.00, ''
					, @merchant_balance_before, @merchant_amount_debit, 0.00, @merchant_balance_after, 0.00
				FROM dbo.merchant_settlement_pending WITH(NOLOCK)
				WHERE settlement_id = @settlement_id
			END

			FETCH NEXT FROM list INTO @settlement_id, @settlement_net_amount
		END
		CLOSE list
		DEALLOCATE list

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantSettlementList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantSettlementList]
(
	@merchant_code varchar(20) = '',
	@currency varchar(10) = '',
	@date_from datetime,
	@date_to datetime,
	@settlement_id varchar(50),
	@settlement_status varchar(20), --'', PENDING, SUCCESS, FAILED
	@bank_code varchar(10),
	@bank_account_no varchar(50),
	@bank_account_name nvarchar(100),
	@page int,
	@page_size int,
	@stamp_user varchar(20),
	@merchant_id varchar(50) = '', --remove
	@merchant_name nvarchar(50) = '' --remove
)
AS
BEGIN
/*
	[Merchant] > Settlement > Settlement List

	rf_param spMerchantSettlementList

	EXEC spMerchantSettlementList @merchant_code='', @currency='', @date_from='2020-01-01', @date_to='2020-01-01', @settlement_id='', @settlement_status='PENDING', 
		@bank_code='', @bank_account_no='', @bank_account_name='', @page=1, @page_size=50, @stamp_user=''

	EXEC spMerchantSettlementList @merchant_code='', @currency='', @date_from='2023-01-01', @date_to='2024-01-01', @settlement_id='', @settlement_status='', 
		@bank_code='', @bank_account_no='', @bank_account_name='', @page=1, @page_size=50, @stamp_user=''

	merchant_settlement_pending
	merchant_settlement_list
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@total_rows int, @top int, @total_pending_ticket int
	
	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997'),
		@settlement_id = CASE WHEN @settlement_id = '' THEN '%' ELSE @settlement_id+'%' END,
		@bank_code = CASE WHEN @bank_code = '' THEN '%' ELSE @bank_code END,
		@bank_account_no = CASE WHEN @bank_account_no = '' THEN '%' ELSE '%'+@bank_account_no+'%' END,
		@bank_account_name = CASE WHEN @bank_account_name = '' THEN '%' ELSE '%'+@bank_account_name+'%' END
	
	SELECT 
		@total_rows = 0,
		@top = @page * @page_size,
		@total_pending_ticket = 0

	------------------------------

	CREATE TABLE #tbl_merchant (
		merchant_code varchar(20), 
		currency varchar(10)
	)

	INSERT INTO #tbl_merchant (merchant_code, currency)
	SELECT merchant_code, currency
	FROM dbo.fnUserMerchant(@stamp_user, '', '', '', @currency, '', @merchant_code)
	GROUP BY merchant_code, currency

	------------------------------
	
	CREATE TABLE #tbl_settlement (
		row_no int identity(1,1),
		settlement_id varchar(50),
		merchant_code varchar(20),
		merchant_name nvarchar(200),
		currency varchar(10),
		settlement_amount decimal(18,4),
		settlement_fee_amount decimal(18,4),
		settlement_net_amount decimal(18,4),
		settlement_request_date datetime,
		settlement_request_remark varchar(200),
		settlement_process_date datetime,
		settlement_status varchar(20),
		bank_code varchar(10),
		bank_account_no varchar(50),
		bank_account_name nvarchar(100)
	)

	SELECT @total_pending_ticket = COUNT(1)
	FROM dbo.merchant_settlement_pending m WITH (NOLOCK)
	INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
	WHERE m.settlement_id LIKE @settlement_id
	AND m.bank_code LIKE @bank_code
	AND m.bank_account_no LIKE @bank_account_no
	AND m.bank_account_name LIKE @bank_account_name

	IF @settlement_status = 'PENDING'
	BEGIN
		INSERT INTO #tbl_settlement (
			settlement_id, merchant_code, merchant_name, currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
			settlement_request_date, settlement_request_remark, settlement_process_date,
			settlement_status, bank_code, bank_account_no, bank_account_name)
		SELECT m.settlement_id, m.merchant_code, m.merchant_name, m.currency, m.settlement_amount, m.settlement_fee_amount, m.settlement_net_amount, 
			m.settlement_request_date, m.settlement_request_remark, NULL,
			m.settlement_status, m.bank_code, m.bank_account_no, m.bank_account_name
		FROM dbo.merchant_settlement_pending m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
		WHERE m.settlement_id LIKE @settlement_id
		AND m.bank_code LIKE @bank_code
		AND m.bank_account_no LIKE @bank_account_no
		AND m.bank_account_name LIKE @bank_account_name
		ORDER BY m.row_no DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
		
		SELECT @total_rows = @total_pending_ticket
	END
	ELSE
	BEGIN
		SET @settlement_status = CASE WHEN @settlement_status = '' THEN '%' ELSE @settlement_status END
	
		INSERT INTO #tbl_settlement (
			settlement_id, merchant_code, merchant_name, currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
			settlement_request_date, settlement_request_remark, settlement_process_date,
			settlement_status, bank_code, bank_account_no, bank_account_name)
		SELECT m.settlement_id, m.merchant_code, m.merchant_name, m.currency, m.settlement_amount, m.settlement_fee_amount, m.settlement_net_amount, 
			m.settlement_request_date, m.settlement_request_remark, m.settlement_process_date,
			m.settlement_status, m.bank_code, m.bank_account_no, m.bank_account_name
		FROM dbo.merchant_settlement_list m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
		WHERE m.settlement_request_date BETWEEN @date_from AND @date_to
		AND m.settlement_id LIKE @settlement_id
		AND m.settlement_status LIKE @settlement_status
		AND m.bank_code LIKE @bank_code
		AND m.bank_account_name LIKE @bank_account_name
		AND m.bank_account_no LIKE @bank_account_no
		ORDER BY m.row_no DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
		
		SELECT @total_rows = @total_rows + COUNT(1)
		FROM dbo.merchant_settlement_list m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
		WHERE m.settlement_request_date BETWEEN @date_from AND @date_to
		AND m.settlement_id LIKE @settlement_id
		AND m.settlement_status LIKE @settlement_status
		AND m.bank_code LIKE @bank_code
		AND m.bank_account_name LIKE @bank_account_name
		AND m.bank_account_no LIKE @bank_account_no
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows, total_pending_ticket = @total_pending_ticket

	SELECT merchant_code, merchant_name, settlement_request_date, settlement_id, bank_code, bank_account_no, bank_account_name, 
		currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
		settlement_request_remark, settlement_status
	FROM #tbl_settlement
	ORDER BY row_no
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantSettlementListSummary]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantSettlementListSummary]
(
	@merchant_code varchar(20) = '',
	@currency varchar(10) = '',
	@date_from datetime,
	@date_to datetime,
	@stamp_user varchar(20),
	@merchant_id varchar(50) = '' --remove
)
AS
BEGIN
/*
	[Merchant] > Settlement > Settlement List

	rf_param spMerchantSettlementListSummary
	
	select * from merchant_settlement_list

	EXEC spMerchantSettlementListSummary @merchant_code='', @currency='', @date_from='2022-01-01', @date_to='2023-12-01', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
			
	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997')
	
	------------------------------

	CREATE TABLE #tbl_merchant (
		merchant_code varchar(20), 
		currency varchar(10)
	)

	INSERT INTO #tbl_merchant (merchant_code, currency)
	SELECT merchant_code, currency
	FROM dbo.fnUserMerchant(@stamp_user, '', '', '', @currency, '', @merchant_code)
	GROUP BY merchant_code, currency

	------------------------------
	CREATE TABLE #tbl_amount (
		merchant_code varchar(20), 
		currency varchar(10),
		total_pending int default(0), 
		total_pending_amount decimal(18,4) default(0.00),
		total_success int default(0), 
		total_failed int default(0), 
		total_amount decimal(18,4) default(0.00),
		total_fee decimal(18,4) default(0.00)
	)

	INSERT INTO #tbl_amount(merchant_code, currency, total_pending, total_pending_amount)
	SELECT m.merchant_code, m.currency, ISNULL(COUNT(1),0), ISNULL(SUM(m.settlement_amount + m.settlement_fee_amount),0.00)
	FROM dbo.merchant_settlement_pending m WITH (NOLOCK)
	INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
	GROUP BY m.merchant_code, m.currency
	
	INSERT INTO #tbl_amount(merchant_code, currency, total_success, total_failed, total_amount, total_fee)
	SELECT	m.merchant_code, m.currency, 
			total_success = ISNULL(SUM(CASE settlement_status WHEN 'SUCCESS' THEN 1 ELSE 0 END),0),
			total_failed = ISNULL(SUM(CASE settlement_status WHEN 'FAILED' THEN 1 ELSE 0 END),0),
			total_amount = ISNULL(SUM(CASE settlement_status WHEN 'SUCCESS' THEN settlement_amount ELSE 0.00 END),0.00),
			total_fee = ISNULL(SUM(CASE settlement_status WHEN 'SUCCESS' THEN settlement_fee_amount ELSE 0.00 END),0.00)
	FROM dbo.merchant_settlement_list m WITH (NOLOCK)
	INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
	WHERE m.settlement_request_date BETWEEN @date_from AND @date_to
	GROUP BY m.merchant_code, m.currency

	---------------------------------------------------------
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	;WITH cte_sum
	AS
	(
		SELECT	tbl.merchant_code, tbl.currency, m.merchant_name, 
				total_success = SUM(tbl.total_success),
				total_failed = SUM(tbl.total_failed),
				total_pending = SUM(tbl.total_pending),
				total_amount = SUM(tbl.total_amount),
				total_fee = SUM(tbl.total_fee),
				total_pending_amount = SUM(tbl.total_pending_amount)
		FROM #tbl_amount tbl WITH (NOLOCK)
		LEFT JOIN dbo.merchant_master m WITH (NOLOCK) ON tbl.merchant_code = m.merchant_code
		GROUP BY tbl.merchant_code, tbl.currency, m.merchant_name
	)

	SELECT	cte.merchant_name,
			cte.currency,
			cte.total_success,
			cte.total_failed,
			cte.total_pending,
			total_transaction = cte.total_success + cte.total_failed,
			cte.total_amount,
			cte.total_fee,
			total_net_amount = cte.total_amount + cte.total_fee,
			cte.total_pending_amount,
			cte.merchant_code
	FROM cte_sum cte
	ORDER BY cte.currency, cte.merchant_code
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantSettlementTempAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantSettlementTempAdd]
(
    @merchant_code varchar(20) = '',
	@currency varchar(10) = '',
	@bank_code varchar(10),
	@bank_account_no varchar(50),
	@bank_account_name nvarchar(50),
	@bank_province nvarchar(50),
	@bank_city nvarchar(50),
	@bank_branch nvarchar(50),
	@settlement_amount decimal(18,4),
	@settlement_request_remark varchar(200),
	@stamp_user varchar(20),
	@merchant_id varchar(50) = '', --remove
	@merchant_name nvarchar(50) = '' --remove
)
AS
BEGIN
/*
	[Merchant] > Settlement > Settlement Request [Upload]

	rf_param spMerchantSettlementTempAdd
	rf_column_list merchant_settlement_list,'@type'
	
	EXEC spMerchantSettlementTempAdd @merchant_code='Merchant Name 2', @currency='IDR', @bank_code='BCA', @bank_account_no='2233634573', @bank_account_name='PANTAI UTARA', 
		@bank_province='Jakarta', @bank_city='Jakarta Barat', @bank_branch='Kampung Rambutan', @settlement_amount=10000.00, @settlement_request_remark='Tambahan', 
		@stamp_user='developer13'

	select * from merchant_master
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20),
			@getdate datetime, @settlement_fee_percent decimal(18,4), @settlement_fix_rate decimal(18,4), 
			@settlement_fee_amount decimal(18,4), @settlement_net_amount decimal(18,4)
	
	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Merchant'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------

	SELECT	@merchant_name = merchant_name, 
			@company_id = company_id, 
			@operator_id = operator_id, 
			@merchant_group_id = merchant_group_id
	FROM dbo.merchant_master WITH (NOLOCK)
	WHERE merchant_code = @merchant_code
	
	-----------------------------------------------------------------------------

	SELECT	@settlement_fee_percent = ISNULL(settlement_fee_percent,0.00),
			@settlement_fix_rate = ISNULL(settlement_fix_rate,0.00)
	FROM dbo.merchant_master_currency WITH (NOLOCK)
	WHERE merchant_code = @merchant_code
	AND currency = @currency

	SELECT 
		@settlement_fee_amount = @settlement_amount * @settlement_fee_percent / 100.00,
		@settlement_fee_amount = CASE WHEN @currency IN ('IDR','VND') THEN CEILING(@settlement_fee_amount) ELSE @settlement_fee_amount END,
		@settlement_fee_amount = CASE WHEN @settlement_fee_amount < @settlement_fix_rate THEN @settlement_fix_rate ELSE @settlement_fee_amount END

	SET @settlement_net_amount = @settlement_amount + @settlement_fee_amount

	-----------------------------------------------------------------------------

	BEGIN TRY
	BEGIN TRANSACTION
		SET @getdate = dbo.fnGetDateGMT7()

		IF EXISTS(SELECT merchant_code FROM dbo.merchant_settlement_temp WITH (NOLOCK) WHERE stamp_user = @stamp_user AND merchant_code <> @merchant_code)
		BEGIN
			DELETE FROM dbo.merchant_settlement_temp WHERE stamp_user = @stamp_user AND merchant_code <> @merchant_code
		END
		
		INSERT INTO dbo.merchant_settlement_temp(company_id, operator_id, merchant_group_id, merchant_code, merchant_name, currency, 
			settlement_amount, settlement_fee_amount, settlement_net_amount, 
			settlement_request_date, settlement_request_user, settlement_request_remark, 
			bank_code, bank_account_no, bank_account_name, bank_province, bank_city, bank_branch, create_date, stamp_user)
		VALUES(@company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_name, @currency, 
			@settlement_amount, @settlement_fee_amount, @settlement_net_amount,
			@getdate, @stamp_user, @settlement_request_remark,
			@bank_code, @bank_account_no, @bank_account_name, @bank_province, @bank_city, @bank_branch, @getdate, @stamp_user)

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantSettlementTempDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantSettlementTempDelete]
(
	@row_no bigint,
    @merchant_code varchar(20) = '',
	@currency varchar(10) = '',
	@bank_code varchar(10), --graylog
	@bank_account_no varchar(50), --graylog
	@bank_account_name nvarchar(50), --graylog
	@settlement_amount decimal(18,4), --graylog
	@stamp_user varchar(20),
	@merchant_id varchar(50) = '', --remove
	@merchant_name nvarchar(50) = '' --remove
)
AS
BEGIN
/*
	[Merchant] > Settlement > Settlement Request [Upload]

	rf_param spMerchantSettlementTempDelete
	rf_column_list merchant_settlement_list,'@type'
	
	EXEC spMerchantSettlementTempDelete @row_no=1, @merchant_code='Merchant Name 2', @currency='IDR', @bank_code='', @bank_account_no='', @bank_account_name='', 
		@settlement_amount=0.00, @stamp_user='developer13'

	select * from merchant_settlement_temp
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	
	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT row_no FROM dbo.merchant_settlement_temp WITH (NOLOCK) WHERE row_no = @row_no AND stamp_user = @stamp_user)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------
	
	BEGIN TRY
	BEGIN TRANSACTION
	
		DELETE FROM dbo.merchant_settlement_temp 
		WHERE row_no = @row_no
		AND stamp_user = @stamp_user

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantSettlementTempDeleteAll]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantSettlementTempDeleteAll]
(
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Merchant] > Settlement > Settlement Request [Upload]

	rf_param spMerchantSettlementTempDeleteAll
	
	EXEC spMerchantSettlementTempDeleteAll @stamp_user='developer13'

	select * from merchant_settlement_temp
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	
	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------
	
	BEGIN TRY
	BEGIN TRANSACTION
	
		DELETE FROM dbo.merchant_settlement_temp 
		WHERE stamp_user = @stamp_user

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantSettlementTempList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantSettlementTempList]
(
    @merchant_code varchar(20) = '',
	@currency varchar(10) = '',
	@stamp_user varchar(20),
	@merchant_id varchar(50) = '', --remove
	@merchant_name nvarchar(50) = '' --remove
)
AS
BEGIN
/*
	[Merchant] > Settlement > Settlement Request [Upload]

	rf_param spMerchantSettlementTempList
	rf_column_list merchant_settlement_list,'@type'
	
	EXEC spMerchantSettlementTempList @merchant_code='Merchant Name 2', @currency='IDR', @stamp_user='developer13'

	select * from merchant_settlement_temp
	
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@merchant_balance_fundin decimal(18,4), @settlement_amount_total decimal(18,4), @settlement_fee_total decimal(18,4),
			@settlement_net_total decimal(18,4), @settlement_min decimal(18,4), @settlement_max decimal(18,4)
	
	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Merchant'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------
	SELECT @merchant_balance_fundin = merchant_balance_fundin
	FROM dbo.merchant_master_balance WITH (NOLOCK)
	WHERE merchant_code = @merchant_code 
	AND currency = @currency

	SELECT	@settlement_min = settlement_min,
			@settlement_max = settlement_max
	FROM dbo.merchant_master_currency WITH (NOLOCK)
	WHERE merchant_code = @merchant_code 
	AND currency = @currency

	SELECT	@settlement_amount_total = ISNULL(SUM(settlement_amount),0.00),
			@settlement_fee_total = ISNULL(SUM(settlement_fee_amount),0.00),
			@settlement_net_total = ISNULL(SUM(settlement_net_amount),0.00)
	FROM dbo.merchant_settlement_temp WITH (NOLOCK)
	WHERE stamp_user = @stamp_user
	AND merchant_code = @merchant_code
	AND currency = @currency

	-----------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT	merchant_balance_fundin = @merchant_balance_fundin, 
			settlement_amount_total = @settlement_amount_total, 
			settlement_fee_total = @settlement_fee_total, 
			settlement_net_total = @settlement_net_total

	SELECT row_no, merchant_code, merchant_name, bank_code, bank_account_no, bank_account_name, bank_province, bank_city, bank_branch, 
		currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
		settlement_request_remark, stamp_user, 
		status_valid = CASE WHEN merchant_code = '' THEN 'N' 
			WHEN bank_code = '' THEN 'N' 
			WHEN bank_account_no = '' THEN 'N' 
			WHEN bank_account_name = '' THEN 'N' 
			WHEN settlement_amount <= 0 THEN 'N' 
			WHEN @settlement_min > 0.00 AND settlement_amount < @settlement_min THEN 'N'
			WHEN @settlement_max > 0.00 AND settlement_amount > @settlement_max THEN 'N'
			ELSE 'Y' END,
		status_description = CASE WHEN merchant_code = '' THEN 'Invalid Merchant' 
			WHEN bank_code = '' THEN 'Invalid Bank' 
			WHEN bank_account_no = '' THEN 'Invalid Account No' 
			WHEN bank_account_name = '' THEN 'Invalid Account Name' 
			WHEN settlement_amount <= 0 THEN 'Invalid Amount' 
			WHEN @settlement_min > 0.00 AND settlement_amount < @settlement_min THEN 'Min Settlement = '+FORMAT(@settlement_min,'#,##0.##')
			WHEN @settlement_max > 0.00 AND settlement_amount > @settlement_max THEN 'Max Settlement = '+FORMAT(@settlement_max,'#,##0.##')
			ELSE '' END
	FROM dbo.merchant_settlement_temp WITH (NOLOCK)
	WHERE stamp_user = @stamp_user
	ORDER BY row_no
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantTopUpAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantTopUpAdd]
(
	@merchant_code varchar(20) = '', --to
	@merchant_code_from varchar(20) = '', --from (lom active)
	@currency varchar(10) = '',
	@topup_amount decimal(18,4),
	@ip_address varchar(50),
	@stamp_user varchar(20),
	@merchant_id varchar(50) = '', --remove
	@merchant_name nvarchar(50) = '', --remove
	@merchant_id_from varchar(50) = '', --remove
	@merchant_name_from nvarchar(50) = '' --remove
)
AS
BEGIN
/*
	[Merchant] > Fund Out > Top Up List [Add]

	Desc : TopUp From FundIn Balance

	rf_param spMerchantTopUpAdd
	rf_column_list merchant_list,'@type'
	
	EXEC spMerchantTopUpAdd @merchant_code='Merchant Name 2', @merchant_code_from='Merchant Name 2', @currency='IDR', @topup_amount=50000, @ip_address='127.0.0.1', @stamp_user='developer13'

	select * from merchant_topup_list
	select * from merchant_topup_bank
	select * from merchant_balance
	exec sp_helptext spPGMerchantTransactionFundInInsertVND
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20),
			@currency_from varchar(3), @company_id_from varchar(3), @operator_id_from varchar(2), @merchant_group_id_from varchar(20),
			@merchant_balance_fundin decimal(18,4), @merchant_balance_before decimal(18,4), @merchant_balance_after decimal(18,4), @merchant_amount_debit decimal(18,4),
			@topup_id varchar(50), @generator_no bigint, @getdate datetime,
			@topup_fee_amount decimal(18,4), @topup_net_amount decimal(18,4), @topup_fix_rate decimal(18,4), @topup_fee_percent decimal(18,4),
			@transaction_note varchar(500)
	
	SET @merchant_code_from = CASE WHEN @merchant_code_from = '' THEN @merchant_code ELSE @merchant_code_from END

	--Merchant To
	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Merchant To'
		SELECT @result_code, @error_message
		RETURN
	END
	
	--Merchant From
	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code_from AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Merchant From'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_balance WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Merchant Balance'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------------------------------------

	SELECT	@merchant_name = merchant_name, 
			@company_id = company_id, 
			@operator_id = operator_id, 
			@merchant_group_id = merchant_group_id
	FROM dbo.merchant_master WITH (NOLOCK)
	WHERE merchant_code = @merchant_code
	
	SELECT	@merchant_name_from = merchant_name, 
			@company_id_from = company_id, 
			@operator_id_from = operator_id, 
			@merchant_group_id_from = merchant_group_id
	FROM dbo.merchant_master WITH (NOLOCK)
	WHERE merchant_code = @merchant_code_from

	IF (@company_id <> @company_id_from AND @operator_id <> @operator_id_from AND @merchant_group_id <> @merchant_group_id_from)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Merchant Target'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @merchant_balance_fundin = merchant_balance_fundin
	FROM dbo.merchant_master_balance WITH(NOLOCK)
	WHERE merchant_code = @merchant_code_from
	AND currency = @currency

	SET @topup_fee_percent = 0.00
	SET @topup_fix_rate = 0.00
	SET @topup_fee_amount = 0.00

	SET @topup_net_amount = @topup_amount + @topup_fee_amount

	IF @merchant_balance_fundin < @topup_net_amount
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Fund In Balance not enough, Top Up Amount = ['+FORMAT(@topup_net_amount,'#,##0.####')+']'
		SELECT @result_code, @error_message
		RETURN
	END

	SET @transaction_note = CASE WHEN @merchant_code <> @merchant_code_from THEN 'Top Up To '+@merchant_code ELSE 'Top Up (Fund In)' END
	-----------------------------------------------------------------------------

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()

		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @topup_id = 'TI' + @currency + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'TOPUP'
		AND currency = @currency

		INSERT INTO dbo.merchant_topup_list(topup_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, merchant_code_from, merchant_name_from, currency, 
			topup_amount_total, topup_fee_amount_total, topup_net_amount_total, topup_approved_amount, 
			topup_request_date, topup_request_user, topup_type, topup_status, ip_address, create_date, stamp_user)
		VALUES(@topup_id, @company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_name, @merchant_code_from, @merchant_name_from, @currency, 
			@topup_amount, @topup_fee_amount, @topup_net_amount, 0.00, 
			@getdate, @stamp_user, 'FUND IN', 'SUCCESS', @ip_address, @getdate, @stamp_user)

		INSERT INTO dbo.merchant_topup_bank(topup_id, transaction_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, merchant_code_from, merchant_name_from, currency, 
			topup_amount, topup_fee_amount, topup_net_amount, topup_fix_rate, topup_fee_percent, 
			topup_request_date, topup_request_user, topup_process_date, topup_process_user, topup_type, topup_status, 
			bank_code, bank_account_no, bank_account_name, ip_address, create_date, failed_reason, stamp_user)
		VALUES(@topup_id, @topup_id, @company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_name, @merchant_code_from, @merchant_name_from, @currency, 
			@topup_amount, @topup_fee_amount, @topup_net_amount, @topup_fix_rate, @topup_fee_percent, 
			@getdate, @stamp_user, @getdate, @stamp_user, 'FUND IN', 'SUCCESS', 
			'', '', '', @ip_address, @getdate, '', @stamp_user)

		UPDATE dbo.merchant_master_balance
		SET @merchant_amount_debit = @topup_net_amount,
			@merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
			@merchant_balance_after = @merchant_balance_before - @topup_net_amount,
			merchant_balance_fundin = merchant_balance_fundin - @topup_net_amount,
			date_updated = @getdate
		WHERE merchant_code = @merchant_code_from
		AND currency = @currency

		IF @currency = 'IDR'
		BEGIN
			UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_IDR'

			--Fund In
			INSERT INTO dbo.merchant_statement_idr(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT 'TOPIN', 'TOPUP', transaction_id, transaction_id
				, merchant_code_from, '', merchant_name_from, topup_amount, @getdate, '', currency
				, '', bank_code, @ip_address, '', bank_account_no, bank_account_name
				, '', '', ''
				, '', '', 'SUCCESS', topup_request_date, '', '', ''
				, @transaction_note, @getdate, topup_fee_amount, 0.00, ''
				, @merchant_balance_before, topup_net_amount, 0.00, @merchant_balance_after, 0.00
			FROM dbo.merchant_topup_bank WITH(NOLOCK)
			WHERE transaction_id = @topup_id
		END
		ELSE IF @currency = 'VND'
		BEGIN
			UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_VND'

			--Fund In
			INSERT INTO dbo.merchant_statement_vnd(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT 'TOPIN', 'TOPUP', transaction_id, transaction_id
				, merchant_code_from, '', merchant_name_from, topup_amount, @getdate, '', currency
				, '', bank_code, @ip_address, '', bank_account_no, bank_account_name
				, '', '', ''
				, '', '', 'SUCCESS', topup_request_date, '', '', ''
				, @transaction_note, @getdate, topup_fee_amount, 0.00, ''
				, @merchant_balance_before, topup_net_amount, 0.00, @merchant_balance_after, 0.00
			FROM dbo.merchant_topup_bank WITH(NOLOCK)
			WHERE transaction_id = @topup_id
		END
		ELSE IF @currency = 'THB'
		BEGIN
			UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_THB'

			--Fund In
			INSERT INTO dbo.merchant_statement_thb(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT 'TOPIN', 'TOPUP', transaction_id, transaction_id
				, merchant_code_from, '', merchant_name_from, topup_amount, @getdate, '', currency
				, '', bank_code, @ip_address, '', bank_account_no, bank_account_name
				, '', '', ''
				, '', '', 'SUCCESS', topup_request_date, '', '', ''
				, @transaction_note, @getdate, topup_fee_amount, 0.00, ''
				, @merchant_balance_before, topup_net_amount, 0.00, @merchant_balance_after, 0.00
			FROM dbo.merchant_topup_bank WITH(NOLOCK)
			WHERE transaction_id = @topup_id
		END
		ELSE IF @currency = 'MYR'
		BEGIN
			UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_THB'

			--Fund In
			INSERT INTO dbo.merchant_statement_myr(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT 'TOPIN', 'TOPUP', transaction_id, transaction_id
				, merchant_code_from, '', merchant_name_from, topup_amount, @getdate, '', currency
				, '', bank_code, @ip_address, '', bank_account_no, bank_account_name
				, '', '', ''
				, '', '', 'SUCCESS', topup_request_date, '', '', ''
				, @transaction_note, @getdate, topup_fee_amount, 0.00, ''
				, @merchant_balance_before, topup_net_amount, 0.00, @merchant_balance_after, 0.00
			FROM dbo.merchant_topup_bank WITH(NOLOCK)
			WHERE transaction_id = @topup_id
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spMerchantTopUpList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spMerchantTopUpList]
(
	@date_from datetime,
	@date_to datetime,
	@merchant_code varchar(20) = '',
	@currency varchar(3) = '',
	@topup_id varchar(50),
	@transaction_id varchar(50),
	@topup_type varchar(20), --'', FUND IN, BANK TRANSFER
	@topup_status varchar(20), --'', PENDING, APPROVED, FAILED
	@bank_code varchar(10),
	@bank_account_no varchar(50),
	@bank_account_name nvarchar(100),
	@page int,
	@page_size int,
	@stamp_user varchar(20),
	@merchant_id varchar(50) = '', --remove
	@merchant_name nvarchar(50) = '' --remove
)
AS
BEGIN
/*
	[Merchant] > Top Up > Top Up List

	rf_param spMerchantTopUpList
	
	EXEC spMerchantTopUpList @date_from='2020-01-01', @date_to='2023-01-01', @merchant_code='Merchant Name 2', @currency = 'IDR', @topup_id='', @transaction_id='', @topup_type='', @topup_status='PENDING', 
		@bank_code='', @bank_account_no='', @bank_account_name='', @page=1, @page_size=50, @stamp_user='developer13'

	EXEC spMerchantTopUpList @date_from='2023-01-01', @date_to='2024-01-01', @merchant_code='Merchant Name 2', @currency = 'IDR', @topup_id='', @transaction_id='', @topup_type='', @topup_status='', 
		@bank_code='', @bank_account_no='', @bank_account_name='', @page=1, @page_size=50, @stamp_user='developer13'

	select * from merchant_topup_bank
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@total_rows int, @top int, @total_pending_ticket int

	------------------------------

	CREATE TABLE #tbl_merchant (
		merchant_code varchar(20), 
		currency varchar(3)
	)

	INSERT INTO #tbl_merchant (merchant_code, currency)
	SELECT merchant_code, currency
	FROM dbo.fnUserMerchant(@stamp_user, '', '', '', @currency, '', @merchant_code)
	GROUP BY merchant_code, currency
	------------------------------
	
	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997'),
		@topup_id = CASE WHEN @topup_id = '' THEN '%' ELSE @topup_id+'%' END,
		@transaction_id = CASE WHEN @transaction_id = '' THEN '%' ELSE @transaction_id+'%' END,
		@topup_type = CASE WHEN @topup_type = '' THEN '%' ELSE @topup_type END,
		@bank_code = CASE WHEN @bank_code = '' THEN '%' ELSE @bank_code END,
		@bank_account_name = CASE WHEN @bank_account_name = '' THEN '%' ELSE '%'+@bank_account_name+'%' END,
		@bank_account_no = CASE WHEN @bank_account_no = '' THEN '%' ELSE '%'+@bank_account_no+'%' END
	
	SELECT 
		@total_rows = 0,
		@top = @page * @page_size,
		@total_pending_ticket = 0

	CREATE TABLE #tbl_topup_bank (
		row_no int identity(1,1),
		topup_id varchar(50),
		transaction_id varchar(50),
		merchant_code varchar(20),
		merchant_name nvarchar(50),
		merchant_code_from varchar(20),
		merchant_name_from nvarchar(50),
		currency varchar(10),
		topup_amount decimal(18,4),
		topup_fee_amount decimal(18,4),
		topup_net_amount decimal(18,4),
		topup_request_date datetime,
		topup_process_date datetime,
		topup_type varchar(20),
		topup_status varchar(20),
		bank_code varchar(10),
		bank_account_no varchar(50),
		bank_account_name nvarchar(100)
	)

	SELECT @total_pending_ticket = COUNT(1)
	FROM dbo.merchant_topup_bank m WITH (NOLOCK)
	INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
	WHERE m.topup_id LIKE @topup_id
	AND m.transaction_id LIKE @transaction_id
	AND m.topup_type LIKE @topup_type
	AND m.topup_status = 'PENDING'
	AND m.bank_code LIKE @bank_code
	AND m.bank_account_name LIKE @bank_account_name
	AND m.bank_account_no LIKE @bank_account_no

	IF @topup_status = 'PENDING'
	BEGIN
		INSERT INTO #tbl_topup_bank (
			topup_id, transaction_id, merchant_code, merchant_name, merchant_code_from, merchant_name_from, currency, 
			topup_amount, topup_fee_amount, topup_net_amount, topup_request_date, topup_process_date,
			topup_type, topup_status, bank_code, bank_account_no, bank_account_name)
		SELECT m.topup_id, m.transaction_id, m.merchant_code, m.merchant_name, m.merchant_code_from, m.merchant_name_from, m.currency, 
			m.topup_amount, m.topup_fee_amount, m.topup_net_amount, m.topup_request_date, m.topup_process_date,
			m.topup_type, m.topup_status, m.bank_code, m.bank_account_no, m.bank_account_name
		FROM dbo.merchant_topup_bank m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
		WHERE m.topup_id LIKE @topup_id
		AND m.transaction_id LIKE @transaction_id
		AND m.topup_type LIKE @topup_type
		AND m.topup_status = 'PENDING'
		AND m.bank_code LIKE @bank_code
		AND m.bank_account_name LIKE @bank_account_name
		AND m.bank_account_no LIKE @bank_account_no
		ORDER BY m.topup_request_date DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
		
		SELECT @total_rows = @total_pending_ticket
	END
	ELSE
	BEGIN
		SET @topup_status = CASE WHEN @topup_status = '' THEN '%' ELSE @topup_status END

		INSERT INTO #tbl_topup_bank (
			topup_id, transaction_id, merchant_code, merchant_name, merchant_code_from, merchant_name_from, currency, 
			topup_amount, topup_fee_amount, topup_net_amount, topup_request_date, topup_process_date,
			topup_type, topup_status, bank_code, bank_account_no, bank_account_name)
		SELECT m.topup_id, m.transaction_id, m.merchant_code, m.merchant_name, m.merchant_code_from, m.merchant_name_from, m.currency, 
			m.topup_amount, m.topup_fee_amount, m.topup_net_amount, m.topup_request_date, m.topup_process_date,
			m.topup_type, m.topup_status, m.bank_code, m.bank_account_no, m.bank_account_name
		FROM dbo.merchant_topup_bank m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
		WHERE m.topup_request_date BETWEEN @date_from AND @date_to
		AND m.topup_id LIKE @topup_id
		AND m.transaction_id LIKE @transaction_id
		AND m.topup_type LIKE @topup_type
		AND m.topup_status LIKE @topup_status
		AND m.topup_status <> 'PENDING'
		AND m.bank_code LIKE @bank_code
		AND m.bank_account_name LIKE @bank_account_name
		AND m.bank_account_no LIKE @bank_account_no
		ORDER BY m.topup_request_date DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
		
		SELECT @total_rows = @total_rows + COUNT(1)
		FROM dbo.merchant_topup_bank m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
		WHERE m.topup_request_date BETWEEN @date_from AND @date_to
		AND m.topup_id LIKE @topup_id
		AND m.transaction_id LIKE @transaction_id
		AND m.topup_type LIKE @topup_type
		AND m.topup_status LIKE @topup_status
		AND m.topup_status <> 'PENDING'
		AND m.bank_code LIKE @bank_code
		AND m.bank_account_name LIKE @bank_account_name
		AND m.bank_account_no LIKE @bank_account_no
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows, total_pending_ticket = @total_pending_ticket

	SELECT topup_request_date, topup_id, transaction_id, merchant_code, merchant_name, bank_code, bank_account_no, bank_account_name,
		currency, topup_amount, topup_type, topup_status, topup_fee_amount, topup_net_amount
	FROM #tbl_topup_bank WITH (NOLOCK)
	ORDER BY row_no
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorAdjustmentAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorAdjustmentAdd]
(
	@merchant_code varchar(20),
	@currency varchar(10),
	@adjustment_type varchar(20), --FUNDIN, FUNDOUT
	@adjustment_action varchar(20), --ADD, SUBTRACT
	@adjustment_amount decimal(18,4),
	@adjustment_note nvarchar(500),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Settlement > Adjustment

	Desc : Adjustment

	rf_param spOperatorAdjustmentAdd
	rf_column_list merchant_adjustment_list,'@type'
	
	EXEC spOperatorAdjustmentAdd @merchant_code='Merchant Global', @currency='IDR', @adjustment_type='FUNDIN', @adjustment_action='ADD', @adjustment_amount=123000.00, @adjustment_note='Test Fund In Add', @stamp_user='developer13'

	select * from merchant_adjustment_list

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20), @merchant_name nvarchar(50),
			@merchant_balance_before decimal(18,4), @merchant_balance_after decimal(18,4), @merchant_amount_debit decimal(18,4), @merchant_amount_credit decimal(18,4),
			@adjustment_id varchar(50), @generator_no bigint, @getdate datetime,
			@transaction_note varchar(500), @statement_type varchar(20)
	
	IF @adjustment_type NOT IN ('FUNDIN', 'FUNDOUT')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Adjustment Group invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @adjustment_action NOT IN ('ADD', 'SUBTRACT')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Adjustment Type invalid'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_balance WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Merchant Balance'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------------------------------------

	SELECT	@company_id = company_id, 
			@operator_id = operator_id, 
			@merchant_group_id = merchant_group_id,
			@merchant_name = merchant_name
	FROM dbo.merchant_master WITH (NOLOCK)
	WHERE merchant_code = @merchant_code
	
	SET @transaction_note = 'Adjustment '+CASE @adjustment_type WHEN 'FUNDIN' THEN 'Fund In' ELSE 'Fund Out' END+' '+CASE @adjustment_action WHEN 'ADD' THEN 'Add' ELSE 'Subtract' END

	SET @merchant_amount_debit = CASE @adjustment_action WHEN 'ADD' THEN 0.00 ELSE @adjustment_amount END
	SET @merchant_amount_credit = CASE @adjustment_action WHEN 'ADD' THEN @adjustment_amount ELSE 0.00 END
	SET @statement_type = CASE @adjustment_type WHEN 'FUNDIN' THEN 'ADJFI' ELSE 'ADJFO' END

	-----------------------------------------------------------------------------

	BEGIN TRY
		BEGIN TRANSACTION

		SET @getdate = dbo.fnGetDateGMT7()
		
		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @adjustment_id = generator_code + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'ADJUSTMENT'
		AND currency = @currency

		INSERT INTO dbo.merchant_adjustment_list(adjustment_id, adjustment_date, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, currency, 
			adjustment_type, adjustment_action, adjustment_amount, adjustment_debit, adjustment_credit, process_date, process_status, adjustment_note, create_date)
		VALUES(@adjustment_id, @getdate, @company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_name, @currency, 
			@adjustment_type, @adjustment_action, @adjustment_amount, @merchant_amount_debit, @merchant_amount_credit, @getdate, 'SUCCESS', @adjustment_note, @getdate)

		---------------------------------------------------------------------------------------------------------

		IF @currency = 'IDR'
		BEGIN	
			UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_IDR'
		END
		ELSE IF @currency = 'VND'
		BEGIN	
			UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_VND'
		END
		ELSE IF @currency = 'THB'
		BEGIN	
			UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_THB'
		END
		ELSE IF @currency = 'MYR'
		BEGIN	
			UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_MYR'
		END

		UPDATE dbo.merchant_master_balance
		SET @merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
			@merchant_balance_after = @merchant_balance_before + @merchant_amount_credit - @merchant_amount_debit,
			merchant_balance_fundin = CASE @adjustment_type WHEN 'FUNDIN' THEN merchant_balance_fundin + @merchant_amount_credit - @merchant_amount_debit ELSE merchant_balance_fundin END,
			merchant_balance_fundout = CASE @adjustment_type WHEN 'FUNDOUT' THEN merchant_balance_fundout + @merchant_amount_credit - @merchant_amount_debit ELSE merchant_balance_fundout END,
			date_updated = @getdate
		WHERE merchant_code = @merchant_code
		AND currency = @currency

		IF @currency = 'IDR'
		BEGIN
			INSERT INTO dbo.merchant_statement_idr(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT @statement_type, 'ADJ', @adjustment_id, @adjustment_id
				, @merchant_code, '', @merchant_name, @adjustment_amount, @getdate, '', @currency
				, '', '', '', '', '', ''
				, '', '', ''
				, '', '', 'SUCCESS', @getdate, '', '', ''
				, @adjustment_note, @getdate, 0.00, 0.00, ''
				, @merchant_balance_before, @merchant_amount_debit, @merchant_amount_credit, @merchant_balance_after, 0.00
		END
		ELSE IF @currency = 'VND'
		BEGIN
			INSERT INTO dbo.merchant_statement_vnd(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT @statement_type, 'ADJ', @adjustment_id, @adjustment_id
				, @merchant_code, '', @merchant_name, @adjustment_amount, @getdate, '', @currency
				, '', '', '', '', '', ''
				, '', '', ''
				, '', '', 'SUCCESS', @getdate, '', '', ''
				, @adjustment_note, @getdate, 0.00, 0.00, ''
				, @merchant_balance_before, @merchant_amount_debit, @merchant_amount_credit, @merchant_balance_after, 0.00
		END
		ELSE IF @currency = 'THB'
		BEGIN
			INSERT INTO dbo.merchant_statement_thb(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT @statement_type, 'ADJ', @adjustment_id, @adjustment_id
				, @merchant_code, '', @merchant_name, @adjustment_amount, @getdate, '', @currency
				, '', '', '', '', '', ''
				, '', '', ''
				, '', '', 'SUCCESS', @getdate, '', '', ''
				, @adjustment_note, @getdate, 0.00, 0.00, ''
				, @merchant_balance_before, @merchant_amount_debit, @merchant_amount_credit, @merchant_balance_after, 0.00
		END
		ELSE IF @currency = 'MYR'
		BEGIN
			INSERT INTO dbo.merchant_statement_myr(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT @statement_type, 'ADJ', @adjustment_id, @adjustment_id
				, @merchant_code, '', @merchant_name, @adjustment_amount, @getdate, '', @currency
				, '', '', '', '', '', ''
				, '', '', ''
				, '', '', 'SUCCESS', @getdate, '', '', ''
				, @adjustment_note, @getdate, 0.00, 0.00, ''
				, @merchant_balance_before, @merchant_amount_debit, @merchant_amount_credit, @merchant_balance_after, 0.00
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorAdjustmentList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorAdjustmentList]
(
	@date_from datetime,
	@date_to datetime,
	@merchant_code varchar(20),
	@currency varchar(10),
	@adjustment_type varchar(20), --'', FUND IN, FUND OUT
	@adjustment_action varchar(20), --'', ADD, SUBTRACT
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Settlement > Settlement List

	rf_param spOperatorAdjustmentList

	EXEC spOperatorAdjustmentList @date_from='2020-01-01', @date_to='2020-01-01', @merchant_code='Merchant Name 2', @currency='IDR', @adjustment_type='', @adjustment_action='', 
		@page=1, @page_size=50, @stamp_user='developer13'

	select * from merchant_adjustment_list
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@total_rows int, @top int
	
	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997'),
		@adjustment_type = CASE WHEN @adjustment_type = '' THEN '%' ELSE @adjustment_type END,
		@adjustment_action = CASE WHEN @adjustment_action = '' THEN '%' ELSE @adjustment_action END

	SELECT 
		@total_rows = 0,
		@top = @page * @page_size

	------------------------------

	CREATE TABLE #tbl_merchant (
		merchant_code varchar(20), 
		currency varchar(10)
	)

	INSERT INTO #tbl_merchant (merchant_code, currency)
	SELECT merchant_code, currency
	FROM dbo.fnUserMerchant(@stamp_user, '', '', '', @currency, '', @merchant_code)
	GROUP BY merchant_code, currency

	------------------------------
	
	SELECT @total_rows = @total_rows + COUNT(1)
	FROM dbo.merchant_adjustment_list m WITH (NOLOCK)
	INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
	WHERE m.adjustment_date BETWEEN @date_from AND @date_to
	AND m.adjustment_type LIKE @adjustment_type
	AND m.adjustment_action LIKE @adjustment_action

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows
	
	SELECT m.adjustment_id, m.adjustment_date, m.company_id, cp.company_name, m.operator_id, op.operator_name, m.merchant_group_id, mg.merchant_group_name, 
		m.merchant_code, ms.merchant_name, m.adjustment_type, m.adjustment_action,
		m.currency, m.adjustment_amount, m.adjustment_debit, m.adjustment_credit, 
		m.adjustment_note
	FROM dbo.merchant_adjustment_list m WITH (NOLOCK)
	INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
	INNER JOIN dbo.master_company cp WITH (NOLOCK) ON m.company_id = cp.company_id
	INNER JOIN dbo.master_operator op WITH (NOLOCK) ON m.company_id = op.company_id AND m.operator_id = op.operator_id
	INNER JOIN dbo.master_merchant_group mg WITH (NOLOCK) ON m.merchant_group_id = mg.merchant_group_id
	INNER JOIN dbo.merchant_master ms WITH (NOLOCK) ON m.merchant_code = ms.merchant_code
	WHERE m.adjustment_date BETWEEN @date_from AND @date_to
	AND m.adjustment_type LIKE @adjustment_type
	AND m.adjustment_action LIKE @adjustment_action
	ORDER BY m.row_no DESC
	OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY		
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorFundInCallback]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorFundInCallback]
(
    @transaction_id varchar(50),
	@currency varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Fund In > Fund In List (Callback)

	rf_param spOperatorFundInCallback
	rf_column_list merchant_transaction_notify_fundin_idr,'@type'
	
	EXEC spOperatorFundInCallback 
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
			, @merchant_transaction_id varchar(50), @merchant_id varchar(50), @merchant_name nvarchar(200), @amount decimal(18,4)
			, @transaction_status varchar(20), @request_url varchar(2000), @date_stamp datetime
			, @payment_channel_id varchar(20), @trigger_by varchar(20), @transaction_hash varchar(50)

	IF @currency = 'IDR'
	BEGIN
		IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundin_idr WITH(NOLOCK) WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Transaction'
			SELECT @result_code, @error_message
			RETURN
		END

		SELECT @merchant_transaction_id = merchant_transaction_id
			, @merchant_id = merchant_id
			, @merchant_name = merchant_name
			, @currency = currency
			, @amount = amount
			, @transaction_status = transaction_status
			, @request_url = request_url
			, @payment_channel_id = payment_channel_id
			, @transaction_hash = transaction_hash
		FROM dbo.merchant_transaction_history_fundin_idr WITH(NOLOCK) 
		WHERE transaction_id = @transaction_id	
	END
	ELSE IF @currency = 'THB'
	BEGIN
		IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundin_thb WITH(NOLOCK) WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Transaction'
			SELECT @result_code, @error_message
			RETURN
		END

		SELECT @merchant_transaction_id = merchant_transaction_id
			, @merchant_id = merchant_id
			, @merchant_name = merchant_name
			, @currency = currency
			, @amount = amount
			, @transaction_status = transaction_status
			, @request_url = request_url
			, @payment_channel_id = payment_channel_id
			, @transaction_hash = transaction_hash
		FROM dbo.merchant_transaction_history_fundin_thb WITH(NOLOCK) 
		WHERE transaction_id = @transaction_id	
	END
	ELSE IF @currency = 'VND'
	BEGIN
		IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundin_vnd WITH(NOLOCK) WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Transaction'
			SELECT @result_code, @error_message
			RETURN
		END

		SELECT @merchant_transaction_id = merchant_transaction_id
			, @merchant_id = merchant_id
			, @merchant_name = merchant_name
			, @currency = currency
			, @amount = amount
			, @transaction_status = transaction_status
			, @request_url = request_url
			, @payment_channel_id = payment_channel_id
			, @transaction_hash = transaction_hash
		FROM dbo.merchant_transaction_history_fundin_vnd WITH(NOLOCK) 
		WHERE transaction_id = @transaction_id	
	END
	ELSE IF @currency = 'MYR'
	BEGIN
		IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundin_myr WITH(NOLOCK) WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Transaction'
			SELECT @result_code, @error_message
			RETURN
		END

		SELECT @merchant_transaction_id = merchant_transaction_id
			, @merchant_id = merchant_id
			, @merchant_name = merchant_name
			, @currency = currency
			, @amount = amount
			, @transaction_status = transaction_status
			, @request_url = request_url
			, @payment_channel_id = payment_channel_id
			, @transaction_hash = transaction_hash
		FROM dbo.merchant_transaction_history_fundin_myr WITH(NOLOCK) 
		WHERE transaction_id = @transaction_id	
	END

	-----------------------------------------------------------------------------

	SET @trigger_by = @stamp_user

	BEGIN TRY
		BEGIN TRANSACTION

		SET @date_stamp = dbo.fnGetDateGMT7()

		IF @currency = 'IDR'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_notify_fundin_idr WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				INSERT INTO dbo.merchant_transaction_notify_fundin_idr(transaction_id, merchant_transaction_id
					, merchant_id, merchant_name, currency, amount, transaction_status
					, request_url, date_stamp, payment_channel_id, trigger_by, transaction_hash)
				VALUES (@transaction_id, @merchant_transaction_id
					, @merchant_id, @merchant_name, @currency, @amount, @transaction_status
					, @request_url, @date_stamp, @payment_channel_id, @trigger_by, @transaction_hash)
			END
		END
		ELSE IF @currency = 'THB'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_notify_fundin_thb WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				INSERT INTO dbo.merchant_transaction_notify_fundin_thb(transaction_id, merchant_transaction_id
					, merchant_id, merchant_name, currency, amount, transaction_status
					, request_url, date_stamp, payment_channel_id, trigger_by, transaction_hash)
				VALUES (@transaction_id, @merchant_transaction_id
					, @merchant_id, @merchant_name, @currency, @amount, @transaction_status
					, @request_url, @date_stamp, @payment_channel_id, @trigger_by, @transaction_hash)
			END
		END
		ELSE IF @currency = 'VND'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_notify_fundin_vnd WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				INSERT INTO dbo.merchant_transaction_notify_fundin_vnd(transaction_id, merchant_transaction_id
					, merchant_id, merchant_name, currency, amount, transaction_status
					, request_url, date_stamp, payment_channel_id, trigger_by, transaction_hash)
				VALUES (@transaction_id, @merchant_transaction_id
					, @merchant_id, @merchant_name, @currency, @amount, @transaction_status
					, @request_url, @date_stamp, @payment_channel_id, @trigger_by, @transaction_hash)
			END
		END
		ELSE IF @currency = 'MYR'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_notify_fundin_myr WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				INSERT INTO dbo.merchant_transaction_notify_fundin_myr(transaction_id, merchant_transaction_id
					, merchant_id, merchant_name, currency, amount, transaction_status
					, request_url, date_stamp, payment_channel_id, trigger_by, transaction_hash)
				VALUES (@transaction_id, @merchant_transaction_id
					, @merchant_id, @merchant_name, @currency, @amount, @transaction_status
					, @request_url, @date_stamp, @payment_channel_id, @trigger_by, @transaction_hash)
			END
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorFundOutCallback]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorFundOutCallback]
(
    @transaction_id varchar(50),
	@currency varchar(10),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Fund Out > Fund Out List (Callback)

	rf_param spOperatorFundOutCallback
	rf_column_list merchant_transaction_notify_fundout_idr,'@type'
	
	EXEC spOperatorFundOutCallback 
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
			, @merchant_transaction_id varchar(50), @merchant_id varchar(50), @merchant_name nvarchar(200), @amount decimal(18,4)
			, @transaction_status varchar(20), @request_url varchar(2000), @date_stamp datetime
			, @trigger_by varchar(20), @transaction_hash varchar(50)

	IF @currency = 'IDR'
	BEGIN
		IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundout_idr WITH(NOLOCK) WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Transaction'
			SELECT @result_code, @error_message
			RETURN
		END

		SELECT @merchant_transaction_id = merchant_transaction_id
			, @merchant_id = merchant_id
			, @merchant_name = merchant_name
			, @currency = currency
			, @amount = amount
			, @transaction_status = transaction_status
			, @request_url = request_url
			, @transaction_hash = transaction_hash
		FROM dbo.merchant_transaction_history_fundout_idr WITH(NOLOCK) 
		WHERE transaction_id = @transaction_id	
	END
	ELSE IF @currency = 'THB'
	BEGIN
		IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundout_thb WITH(NOLOCK) WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Transaction'
			SELECT @result_code, @error_message
			RETURN
		END

		SELECT @merchant_transaction_id = merchant_transaction_id
			, @merchant_id = merchant_id
			, @merchant_name = merchant_name
			, @currency = currency
			, @amount = amount
			, @transaction_status = transaction_status
			, @request_url = request_url
			, @transaction_hash = transaction_hash
		FROM dbo.merchant_transaction_history_fundout_thb WITH(NOLOCK) 
		WHERE transaction_id = @transaction_id	
	END
	ELSE IF @currency = 'VND'
	BEGIN
		IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundout_vnd WITH(NOLOCK) WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Transaction'
			SELECT @result_code, @error_message
			RETURN
		END

		SELECT @merchant_transaction_id = merchant_transaction_id
			, @merchant_id = merchant_id
			, @merchant_name = merchant_name
			, @currency = currency
			, @amount = amount
			, @transaction_status = transaction_status
			, @request_url = request_url
			, @transaction_hash = transaction_hash
		FROM dbo.merchant_transaction_history_fundout_vnd WITH(NOLOCK) 
		WHERE transaction_id = @transaction_id	
	END
	ELSE IF @currency = 'MYR'
	BEGIN
		IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundout_myr WITH(NOLOCK) WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Transaction'
			SELECT @result_code, @error_message
			RETURN
		END

		SELECT @merchant_transaction_id = merchant_transaction_id
			, @merchant_id = merchant_id
			, @merchant_name = merchant_name
			, @currency = currency
			, @amount = amount
			, @transaction_status = transaction_status
			, @request_url = request_url
			, @transaction_hash = transaction_hash
		FROM dbo.merchant_transaction_history_fundout_myr WITH(NOLOCK) 
		WHERE transaction_id = @transaction_id	
	END

	-----------------------------------------------------------------------------

	SET @trigger_by = @stamp_user

	BEGIN TRY
		BEGIN TRANSACTION

		SET @date_stamp = dbo.fnGetDateGMT7()

		IF @currency = 'IDR'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_notify_fundout_idr WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				INSERT INTO dbo.merchant_transaction_notify_fundout_idr(transaction_id, merchant_transaction_id
					, merchant_id, merchant_name, currency, amount, transaction_status
					, request_url, date_stamp, trigger_by, transaction_hash)
				VALUES (@transaction_id, @merchant_transaction_id
					, @merchant_id, @merchant_name, @currency, @amount, @transaction_status
					, @request_url, @date_stamp, @trigger_by, @transaction_hash)
			END
		END
		ELSE IF @currency = 'THB'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_notify_fundout_thb WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				INSERT INTO dbo.merchant_transaction_notify_fundout_thb(transaction_id, merchant_transaction_id
					, merchant_id, merchant_name, currency, amount, transaction_status
					, request_url, date_stamp, trigger_by, transaction_hash)
				VALUES (@transaction_id, @merchant_transaction_id
					, @merchant_id, @merchant_name, @currency, @amount, @transaction_status
					, @request_url, @date_stamp, @trigger_by, @transaction_hash)
			END
		END
		ELSE IF @currency = 'VND'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_notify_fundout_vnd WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				INSERT INTO dbo.merchant_transaction_notify_fundout_vnd(transaction_id, merchant_transaction_id
					, merchant_id, merchant_name, currency, amount, transaction_status
					, request_url, date_stamp, trigger_by, transaction_hash)
				VALUES (@transaction_id, @merchant_transaction_id
					, @merchant_id, @merchant_name, @currency, @amount, @transaction_status
					, @request_url, @date_stamp, @trigger_by, @transaction_hash)
			END
		END
		ELSE IF @currency = 'MYR'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_notify_fundout_myr WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				INSERT INTO dbo.merchant_transaction_notify_fundout_myr(transaction_id, merchant_transaction_id
					, merchant_id, merchant_name, currency, amount, transaction_status
					, request_url, date_stamp, trigger_by, transaction_hash)
				VALUES (@transaction_id, @merchant_transaction_id
					, @merchant_id, @merchant_name, @currency, @amount, @transaction_status
					, @request_url, @date_stamp, @trigger_by, @transaction_hash)
			END
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorSettlementFailed]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorSettlementFailed]
(
	@settlement_id varchar(50),
	@merchant_name nvarchar(50), --graylog
	@settlement_process_remark nvarchar(200),
	@stamp_user varchar(20)	
)
AS
BEGIN
/*
	[Operator] > Settlement > Settlement List [Process] = Failed

	rf_param spOperatorSettlementFailed
	rf_column_list merchant_settlement_list,'@type'
	
	EXEC spOperatorSettlementFailed @settlement_id='', @merchant_name='', @settlement_process_remark='Ga Jadi', @stamp_user=''

	select * from merchant_settlement_pending
	select * from merchant_settlement_list
	
	-----------------------------------------------------------------
	single
		add merchant_settlement_pending
		add merchant_statement_request (statement_fundin--) (buat validasi)
			job : 
			add merchant_statement (SETTLE PENDING) (fundin--, statement_fundin++)
	operator failed
		add merchant_settlement_list (FAILED)
		delete merchant_settlement_pending
		add merchant_statement_request (statement_fundin++) (buat validasi)
			job : 
			add merchant_statement (SETTLE FAILED) (fundin++, statement_fundin--)
	operator success (add gateway)
		gateway 1 : add merchant_settlement_payment_temp
		gateway 2 : add merchant_settlement_payment_temp
		submit : 
			add merchant_settlement_list (SUCCESS)
			add merchant_settlement_payment
			delete merchant_settlement_pending
			delete merchant_settlement_payment_temp
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@merchant_code varchar(20), @settlement_net_amount decimal(18,4), @currency varchar(10), @getdate datetime,
			@generator_no bigint, @transaction_id varchar(50),
			@merchant_amount_credit decimal(18,4), @merchant_balance_before decimal(18,4), @merchant_balance_after decimal(18,4)
			
	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT settlement_id FROM dbo.merchant_settlement_pending WITH (NOLOCK) WHERE settlement_id = @settlement_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Settlement not found'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------

	SELECT	@merchant_code = merchant_code,
			@currency = currency,
			@settlement_net_amount = settlement_net_amount
	FROM dbo.merchant_settlement_pending WITH (NOLOCK)
	WHERE settlement_id = @settlement_id

	BEGIN TRY
	BEGIN TRANSACTION
		SET @getdate = dbo.fnGetDateGMT7()

		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @transaction_id = generator_code + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'SETTLEMENT'
		AND currency = @currency

		DELETE FROM dbo.operator_settlement_payment_temp WHERE stamp_user = @stamp_user

		INSERT INTO dbo.merchant_settlement_list(settlement_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, 
			currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
			settlement_request_date, settlement_request_user, settlement_request_remark, 
			settlement_payment_amount, settlement_process_date, settlement_process_user, settlement_process_remark, settlement_status, 
			bank_code, bank_account_no, bank_account_name, bank_province, bank_city, bank_branch, create_date)
		SELECT settlement_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, 
			currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
			settlement_request_date, settlement_request_user, settlement_request_remark, 
			0.00, @getdate, @stamp_user, @settlement_process_remark, 'FAILED', 
			bank_code, bank_account_no, bank_account_name, bank_province, bank_city, bank_branch, @getdate
		FROM dbo.merchant_settlement_pending WITH (NOLOCK)
		WHERE settlement_id = @settlement_id

		--duit dibalikin
		UPDATE dbo.merchant_master_balance
		SET @merchant_amount_credit = @settlement_net_amount,
			@merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
			@merchant_balance_after = @merchant_balance_before + @merchant_amount_credit,
			merchant_balance_fundin = merchant_balance_fundin + @merchant_amount_credit,
			date_updated = @getdate
		WHERE merchant_code = @merchant_code
		AND currency = @currency

		IF @currency = 'IDR'
		BEGIN
			INSERT INTO dbo.merchant_statement_idr(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT 'SETTLE-REFUND', 'SETTLE', @transaction_id, @settlement_id
				, merchant_code, '', merchant_name, settlement_amount, settlement_request_date, '', currency
				, '', bank_code, '', '', bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, '', '', 'SUCCESS', @getdate, '', '', ''
				, '', @getdate, settlement_fee_amount, 0.00, ''
				, @merchant_balance_before, 0.00, @merchant_amount_credit, @merchant_balance_after, 0.00
			FROM dbo.merchant_settlement_pending WITH(NOLOCK)
			WHERE settlement_id = @settlement_id
		END
		ELSE IF @currency = 'VND'
		BEGIN
			INSERT INTO dbo.merchant_statement_vnd(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT 'SETTLE-REFUND', 'SETTLE', @transaction_id, @settlement_id
				, merchant_code, '', merchant_name, settlement_amount, settlement_request_date, '', currency
				, '', bank_code, '', '', bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, '', '', 'SUCCESS', @getdate, '', '', ''
				, '', @getdate, settlement_fee_amount, 0.00, ''
				, @merchant_balance_before, 0.00, @merchant_amount_credit, @merchant_balance_after, 0.00
			FROM dbo.merchant_settlement_pending WITH(NOLOCK)
			WHERE settlement_id = @settlement_id
		END
		ELSE IF @currency = 'THB'
		BEGIN
			INSERT INTO dbo.merchant_statement_thb(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT 'SETTLE-REFUND', 'SETTLE', @transaction_id, @settlement_id
				, merchant_code, '', merchant_name, settlement_amount, settlement_request_date, '', currency
				, '', bank_code, '', '', bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, '', '', 'SUCCESS', @getdate, '', '', ''
				, '', @getdate, settlement_fee_amount, 0.00, ''
				, @merchant_balance_before, 0.00, @merchant_amount_credit, @merchant_balance_after, 0.00
			FROM dbo.merchant_settlement_pending WITH(NOLOCK)
			WHERE settlement_id = @settlement_id
		END
		ELSE IF @currency = 'MYR'
		BEGIN
			INSERT INTO dbo.merchant_statement_myr(statement_type, statement_group, transaction_id, merchant_transaction_id
				, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
				, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
				, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
				, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
			SELECT 'SETTLE-REFUND', 'SETTLE', @transaction_id, @settlement_id
				, merchant_code, '', merchant_name, settlement_amount, settlement_request_date, '', currency
				, '', bank_code, '', '', bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
				, '', '', 'SUCCESS', @getdate, '', '', ''
				, '', @getdate, settlement_fee_amount, 0.00, ''
				, @merchant_balance_before, 0.00, @merchant_amount_credit, @merchant_balance_after, 0.00
			FROM dbo.merchant_settlement_pending WITH(NOLOCK)
			WHERE settlement_id = @settlement_id
		END

		DELETE FROM dbo.merchant_settlement_pending WHERE settlement_id = @settlement_id

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorSettlementList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorSettlementList]
(
	@date_from datetime,
	@date_to datetime,
	@merchant_code varchar(20) = '',
	@currency varchar(10) = '', 
	@settlement_id varchar(50),
	@settlement_status varchar(20), --'', PENDING, SUCCESS, FAILED
	@bank_code varchar(10),
	@bank_account_no varchar(50),
	@bank_account_name nvarchar(100),
	@page int,
	@page_size int,
	@stamp_user varchar(20),
	@merchant_id varchar(50) = '',
	@merchant_name nvarchar(50) = ''
)
AS
BEGIN
/*
	[Operator] > Settlement > Settlement List

	rf_param spOperatorSettlementList

	EXEC spOperatorSettlementList @date_from='2020-01-01', @date_to='2020-01-01', @merchant_code='Merchant Name 2', @currency = 'IDR', @settlement_id='', @settlement_status='PENDING', 
		@bank_code='', @bank_account_no='', @bank_account_name='', @page=1, @page_size=50, @stamp_user=''

	EXEC spOperatorSettlementList @date_from='2023-01-01', @date_to='2024-01-01', @merchant_code='Merchant Name 2', @currency = 'IDR', @settlement_id='', @settlement_status='', 
		@bank_code='', @bank_account_no='', @bank_account_name='', @page=1, @page_size=50, @stamp_user=''

	merchant_settlement_pending
	merchant_settlement_list
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@total_rows int, @top int, @total_pending_ticket int
	
	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997'),
		@settlement_id = CASE WHEN @settlement_id = '' THEN '%' ELSE @settlement_id+'%' END,
		@bank_code = CASE WHEN @bank_code = '' THEN '%' ELSE @bank_code END,
		@bank_account_no = CASE WHEN @bank_account_no = '' THEN '%' ELSE '%'+@bank_account_no+'%' END,
		@bank_account_name = CASE WHEN @bank_account_name = '' THEN '%' ELSE '%'+@bank_account_name+'%' END
		
	SELECT 
		@total_rows = 0,
		@top = @page * @page_size,
		@total_pending_ticket = 0

	------------------------------

	CREATE TABLE #tbl_merchant (
		merchant_code varchar(20), 
		currency varchar(10)
	)

	INSERT INTO #tbl_merchant (merchant_code, currency)
	SELECT merchant_code, currency
	FROM dbo.fnUserMerchant(@stamp_user, '', '', '', @currency, '', @merchant_code)
	GROUP BY merchant_code, currency

	------------------------------

	CREATE TABLE #tbl_settlement (
		row_no int identity(1,1),
		settlement_id varchar(50),
		merchant_code varchar(20),
		merchant_name nvarchar(50),
		currency varchar(10),
		settlement_amount decimal(18,4),
		settlement_fee_amount decimal(18,4),
		settlement_net_amount decimal(18,4),
		settlement_request_date datetime,
		settlement_request_remark varchar(200),
		settlement_process_date datetime,
		settlement_process_remark varchar(200),
		settlement_status varchar(20),
		bank_code varchar(10),
		bank_account_no varchar(50),
		bank_account_name nvarchar(100),
		bank_province nvarchar(100),
		bank_city nvarchar(100),
		bank_branch nvarchar(100)
	)

	SELECT @total_pending_ticket = COUNT(1)
	FROM dbo.merchant_settlement_pending m WITH (NOLOCK)
	INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
	WHERE m.settlement_id LIKE @settlement_id
	AND m.bank_code LIKE @bank_code
	AND m.bank_account_no LIKE @bank_account_no
	AND m.bank_account_name LIKE @bank_account_name

	IF @settlement_status = 'PENDING'
	BEGIN
		INSERT INTO #tbl_settlement (
			settlement_id, merchant_code, merchant_name, currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
			settlement_request_date, settlement_request_remark, settlement_process_date, settlement_process_remark, 
			settlement_status, bank_code, bank_account_no, bank_account_name, bank_province, bank_city, bank_branch)
		SELECT m.settlement_id, m.merchant_code, m.merchant_name, m.currency, m.settlement_amount, m.settlement_fee_amount, m.settlement_net_amount, 
			m.settlement_request_date, m.settlement_request_remark, NULL, '', 
			m.settlement_status, m.bank_code, m.bank_account_no, m.bank_account_name, m.bank_province, m.bank_city, m.bank_branch
		FROM dbo.merchant_settlement_pending m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
		WHERE m.settlement_id LIKE @settlement_id
		AND m.bank_code LIKE @bank_code
		AND m.bank_account_no LIKE @bank_account_no
		AND m.bank_account_name LIKE @bank_account_name
		ORDER BY m.row_no DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
		
		SELECT @total_rows = @total_pending_ticket
	END
	ELSE
	BEGIN
		SET @settlement_status = CASE WHEN @settlement_status = '' THEN '%' ELSE @settlement_status END
	
		INSERT INTO #tbl_settlement (
			settlement_id, merchant_code, merchant_name, currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
			settlement_request_date, settlement_request_remark, settlement_process_date, settlement_process_remark,
			settlement_status, bank_code, bank_account_no, bank_account_name, bank_province, bank_city, bank_branch)
		SELECT m.settlement_id, m.merchant_code, m.merchant_name, m.currency, m.settlement_amount, m.settlement_fee_amount, m.settlement_net_amount, 
			m.settlement_request_date, m.settlement_request_remark, m.settlement_process_date, m.settlement_process_remark,
			m.settlement_status, m.bank_code, m.bank_account_no, m.bank_account_name, m.bank_province, m.bank_city, m.bank_branch
		FROM dbo.merchant_settlement_list m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
		WHERE m.settlement_request_date BETWEEN @date_from AND @date_to
		AND m.settlement_id LIKE @settlement_id
		AND m.settlement_status LIKE @settlement_status
		AND m.bank_code LIKE @bank_code
		AND m.bank_account_name LIKE @bank_account_name
		AND m.bank_account_no LIKE @bank_account_no
		ORDER BY m.row_no DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
		
		SELECT @total_rows = @total_rows + COUNT(1)
		FROM dbo.merchant_settlement_list m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
		WHERE m.settlement_request_date BETWEEN @date_from AND @date_to
		AND m.settlement_id LIKE @settlement_id
		AND m.settlement_status LIKE @settlement_status
		AND m.bank_code LIKE @bank_code
		AND m.bank_account_name LIKE @bank_account_name
		AND m.bank_account_no LIKE @bank_account_no
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows, total_pending_ticket = @total_pending_ticket

	SELECT merchant_code, merchant_name, settlement_request_date, settlement_id, bank_code, bank_account_no, bank_account_name, 
		currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
		settlement_request_remark, settlement_status, settlement_process_remark, bank_province, bank_city, bank_branch
	FROM #tbl_settlement WITH (NOLOCK)
	ORDER BY row_no
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorSettlementListSummary]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorSettlementListSummary]
(
	@date_from datetime,
	@date_to datetime,
	@merchant_code varchar(20) = '',
	@currency varchar(10) = '',
	@stamp_user varchar(20),
	@merchant_id varchar(50) = ''
)
AS
BEGIN
/*
	[Operator] > Settlement > Settlement List

	rf_param spOperatorSettlementListSummary
	
	select * from merchant_settlement_list
	select * from merchant_settlement_pending

	EXEC spOperatorSettlementListSummary @date_from='2022-01-01', @date_to='2023-12-01', @merchant_code='', @currency='', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@merchant_name nvarchar(50),
			@total_success int, @total_failed int, @total_pending int, 
			@total_amount decimal(25,4), @total_fee decimal(18,4), @total_pending_amount decimal(18,4)
	
	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997')
		
	------------------------------

	CREATE TABLE #tbl_merchant (
		merchant_code varchar(20), 
		currency varchar(10)
	)

	INSERT INTO #tbl_merchant (merchant_code, currency)
	SELECT merchant_code, currency
	FROM dbo.fnUserMerchant(@stamp_user, '', '', '', @currency, '', @merchant_code)
	GROUP BY merchant_code, currency
	------------------------------
	
	CREATE TABLE #tbl_amount (
		merchant_code varchar(20), 
		currency varchar(10),
		total_pending int default(0), 
		total_pending_amount decimal(18,4) default(0.00),
		total_success int default(0), 
		total_failed int default(0), 
		total_amount decimal(18,4) default(0.00),
		total_fee decimal(18,4) default(0.00)
	)
	
	INSERT INTO #tbl_amount(merchant_code, currency, total_pending, total_pending_amount)
	SELECT	m.merchant_code, m.currency,
			total_pending = ISNULL(SUM(CASE m.settlement_status WHEN 'PENDING' THEN 1 ELSE 0 END),0),
			total_pending_amount = ISNULL(SUM(CASE settlement_status WHEN 'PENDING' THEN m.settlement_amount + m.settlement_fee_amount ELSE 0.00 END),0.00)
	FROM dbo.merchant_settlement_pending m WITH (NOLOCK)
	INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
	GROUP BY m.merchant_code, m.currency
	
	INSERT INTO #tbl_amount(merchant_code, currency, total_success, total_failed, total_amount, total_fee)
	SELECT	m.merchant_code, m.currency,
			total_success = ISNULL(SUM(CASE m.settlement_status WHEN 'SUCCESS' THEN 1 ELSE 0 END),0),
			total_failed = ISNULL(SUM(CASE m.settlement_status WHEN 'FAILED' THEN 1 ELSE 0 END),0),
			total_amount = ISNULL(SUM(CASE m.settlement_status WHEN 'SUCCESS' THEN m.settlement_amount ELSE 0.00 END),0.00),
			total_fee = ISNULL(SUM(CASE m.settlement_status WHEN 'SUCCESS' THEN m.settlement_fee_amount ELSE 0.00 END),0.00)
	FROM dbo.merchant_settlement_list m WITH (NOLOCK)
	INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code AND m.currency = tbl.currency
	WHERE m.settlement_request_date BETWEEN @date_from AND @date_to
	GROUP BY m.merchant_code, m.currency

	---------------------------------------------------------
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	;WITH cte_sum
	AS
	(
		SELECT	tbl.merchant_code, tbl.currency, ml.merchant_name, 
				total_success = SUM(tbl.total_success),
				total_failed = SUM(tbl.total_failed),
				total_pending = SUM(tbl.total_pending),
				total_amount = SUM(tbl.total_amount),
				total_fee = SUM(tbl.total_fee),
				total_fundout_amount = SUM(tbl.total_amount) - SUM(tbl.total_fee),
				total_pending_amount = SUM(tbl.total_pending_amount)
		FROM #tbl_amount tbl WITH (NOLOCK)
		LEFT JOIN dbo.merchant_master ml WITH (NOLOCK) ON tbl.merchant_code = ml.merchant_code
		GROUP BY tbl.merchant_code, tbl.currency, ml.merchant_name
	)

	SELECT	cte.merchant_code, 
			cte.merchant_name,
			cte.currency,
			cte.total_success,
			cte.total_failed,
			cte.total_pending,
			total_transaction = cte.total_success + cte.total_failed,
			cte.total_amount,
			cte.total_fee,
			total_net_amount = cte.total_amount + cte.total_fee,
			cte.total_pending_amount
	FROM cte_sum cte
	ORDER BY cte.merchant_code, cte.currency
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorSettlementPaymentTempAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorSettlementPaymentTempAdd]
(
	@settlement_id varchar(50),
	@pg_id varchar(10),
	@bank_code varchar(10),
	@bank_account_no nvarchar(50),
	@bank_account_name nvarchar(100),
	@payment_amount decimal(18,4),
	@bank_remark nvarchar(200),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Settlement > Settlement List [Process]

	rf_param spOperatorSettlementPaymentTempAdd
	rf_column_list operator_settlement_payment_temp,'@type'
	
	EXEC spOperatorSettlementPaymentTempAdd @settlement_id='SIDR62', @pg_id='V2P', @bank_code='BCA', @bank_account_no='8726374625', @bank_account_name='INTAN ABADI', 
		@payment_amount=50000.00, @bank_remark='BCCJ8823', @stamp_user='developer13'

	select * from merchant_settlement_pending
	select * from master_payment_gateway
	select * from master_gateway
	select * from operator_settlement_payment_temp
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20), @merchant_code varchar(20), @merchant_name nvarchar(50), 
			@currency varchar(10), @pg_name nvarchar(200), 
			@getdate datetime, @settlement_amount decimal(18,4), @payment_amount_total decimal(18,4)
			
	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF @payment_amount <= 0.00
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Amount'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT gateway_id FROM dbo.master_gateway WITH (NOLOCK) WHERE gateway_id = @pg_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Gateway'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT settlement_id FROM dbo.merchant_settlement_pending WITH (NOLOCK) WHERE settlement_id = @settlement_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Settlement Ticket not found'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------

	SELECT	@settlement_amount = settlement_amount,
			@company_id = company_id, 
			@operator_id = operator_id, 
			@merchant_group_id = merchant_group_id,
			@merchant_code = merchant_code,
			@merchant_name = merchant_name,
			@currency = currency
	FROM dbo.merchant_settlement_pending WITH (NOLOCK) 
	WHERE settlement_id = @settlement_id

	SELECT @payment_amount_total = ISNULL(SUM(payment_amount),0.00)
	FROM dbo.operator_settlement_payment_temp WITH (NOLOCK)
	WHERE stamp_user = @stamp_user
	AND settlement_id = @settlement_id

	SET @payment_amount_total = @payment_amount_total + @payment_amount
	
	IF @payment_amount_total > @settlement_amount
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Payment amount total exceeded settlement amount'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------
	SELECT @pg_name = gateway_name
	FROM dbo.master_gateway WITH (NOLOCK)
	WHERE gateway_id = @pg_id

	BEGIN TRY
	BEGIN TRANSACTION
		SET @getdate = dbo.fnGetDateGMT7()

		IF EXISTS(SELECT stamp_user FROM dbo.operator_settlement_payment_temp WITH (NOLOCK) WHERE stamp_user = @stamp_user AND settlement_id <> @settlement_id)
		BEGIN
			DELETE FROM dbo.operator_settlement_payment_temp WHERE stamp_user = @stamp_user AND settlement_id <> @settlement_id
		END
		
		INSERT INTO dbo.operator_settlement_payment_temp(settlement_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, 
			currency, pg_id, pg_name, bank_code, bank_account_no, bank_account_name, bank_remark, payment_amount, create_date, stamp_user)
		VALUES(@settlement_id, @company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_name, 
			@currency, @pg_id, @pg_name, @bank_code, @bank_account_no, @bank_account_name, @bank_remark, @payment_amount, @getdate, @stamp_user)

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorSettlementPaymentTempDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorSettlementPaymentTempDelete]
(
	@row_no bigint,
	@settlement_id varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Settlement > Settlement List [Process]

	rf_param spOperatorSettlementPaymentTempDelete
	rf_column_list operator_settlement_payment_temp,'@type'
	
	EXEC spOperatorSettlementPaymentTempDelete @row_no=0, @settlement_id='', @stamp_user='developer13'

	select * from operator_settlement_payment_temp
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	
	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT row_no FROM dbo.operator_settlement_payment_temp WITH (NOLOCK) WHERE stamp_user = @stamp_user AND row_no = @row_no)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------
	
	BEGIN TRY
	BEGIN TRANSACTION
		
		DELETE FROM dbo.operator_settlement_payment_temp WHERE stamp_user = @stamp_user AND row_no = @row_no

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorSettlementPaymentTempDeleteAll]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorSettlementPaymentTempDeleteAll]
(
	@settlement_id varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Settlement > Settlement List [Process]

	rf_param spOperatorSettlementPaymentTempDeleteAll
	rf_column_list operator_settlement_payment_temp,'@type'
	
	EXEC spOperatorSettlementPaymentTempDeleteAll @settlement_id='', @stamp_user='developer13'

	select * from operator_settlement_payment_temp
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	
	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT stamp_user FROM dbo.operator_settlement_payment_temp WITH (NOLOCK) WHERE stamp_user = @stamp_user)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------
	
	BEGIN TRY
	BEGIN TRANSACTION
		
		DELETE FROM dbo.operator_settlement_payment_temp WHERE stamp_user = @stamp_user

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorSettlementPaymentTempList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorSettlementPaymentTempList]
(
	@settlement_id varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Settlement > Settlement List [Process]

	rf_param spOperatorSettlementPaymentTempList
	rf_column_list operator_settlement_payment_temp,'@type'
	
	EXEC spOperatorSettlementPaymentTempList @settlement_id='', @stamp_user='developer13'

	select * from operator_settlement_payment_temp
	
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@payment_amount_total decimal(18,4)

	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------
	SELECT @payment_amount_total = ISNULL(SUM(payment_amount),0.00)
	FROM dbo.operator_settlement_payment_temp WITH (NOLOCK)
	WHERE stamp_user = @stamp_user
	AND settlement_id = @settlement_id

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT payment_amount_total = @payment_amount_total

	SELECT row_no, settlement_id, merchant_code, merchant_name, currency, pg_id, pg_name, bank_code, bank_account_no, bank_account_name, bank_remark, payment_amount, stamp_user
	FROM dbo.operator_settlement_payment_temp WITH (NOLOCK)
	WHERE stamp_user = @stamp_user
	AND settlement_id = @settlement_id
	ORDER BY row_no

END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorSettlementSuccess]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorSettlementSuccess]
(
	@settlement_id varchar(50),
	@settlement_process_remark nvarchar(200),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Settlement > Settlement List [Process] = Success

	rf_param spOperatorSettlementSuccess
	rf_column_list merchant_settlement_list,'@type'
	
	EXEC spOperatorSettlementSuccess @settlement_id='', @settlement_process_remark='Already done', @stamp_user=''

	select * from merchant_settlement_pending
	select * from merchant_settlement_list
	
	-----------------------------------------------------------------
	single
		add merchant_settlement_pending
		add merchant_statement_request (statement_fundin--) (buat validasi)
			job : 
			add merchant_statement (SETTLE PENDING) (fundin--, statement_fundin++)
	operator failed
		add merchant_settlement_list (FAILED)
		delete merchant_settlement_pending
		add merchant_statement_request (statement_fundin++) (buat validasi)
			job : 
			add merchant_statement (SETTLE FAILED) (fundin++, statement_fundin--)
	operator success (add gateway)
		gateway 1 : add merchant_settlement_payment_temp
		gateway 2 : add merchant_settlement_payment_temp
		submit : 
			add merchant_settlement_list (SUCCESS)
			add merchant_settlement_payment
			delete merchant_settlement_pending
			delete merchant_settlement_payment_temp
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@payment_amount decimal(18,4), @settlement_amount decimal(18,4),
			@merchant_code varchar(20), @settlement_net_amount decimal(18,4), @currency varchar(10), @getdate datetime
			
	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT settlement_id FROM dbo.merchant_settlement_pending WITH (NOLOCK) WHERE settlement_id = @settlement_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Settlement not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @payment_amount = ISNULL(SUM(payment_amount),0.00)
	FROM dbo.operator_settlement_payment_temp WITH (NOLOCK)
	WHERE stamp_user = @stamp_user
	AND settlement_id = @settlement_id

	SELECT @settlement_amount = SUM(settlement_amount)
	FROM dbo.merchant_settlement_pending WITH (NOLOCK)
	WHERE settlement_id = @settlement_id

	IF @payment_amount <> @settlement_amount
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Payment amount not tally with settlement amount'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------

	BEGIN TRY
	BEGIN TRANSACTION
		SET @getdate = dbo.fnGetDateGMT7()

		INSERT INTO dbo.merchant_settlement_payment(settlement_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, 
			currency, pg_id, pg_name, bank_code, bank_account_no, bank_account_name, bank_remark, payment_amount, payment_process_date, payment_process_user, create_date)
		SELECT settlement_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, 
			currency, pg_id, pg_name, bank_code, bank_account_no, bank_account_name, bank_remark, payment_amount, @getdate, @stamp_user, @getdate
		FROM dbo.operator_settlement_payment_temp WITH (NOLOCK)
		WHERE stamp_user = @stamp_user
		AND settlement_id = @settlement_id

		INSERT INTO dbo.merchant_settlement_list(settlement_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, 
			currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
			settlement_request_date, settlement_request_user, settlement_request_remark, 
			settlement_payment_amount, settlement_process_date, settlement_process_user, settlement_process_remark, settlement_status, 
			bank_code, bank_account_no, bank_account_name, bank_province, bank_city, bank_branch, create_date)
		SELECT settlement_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, 
			currency, settlement_amount, settlement_fee_amount, settlement_net_amount, 
			settlement_request_date, settlement_request_user, settlement_request_remark, 
			@payment_amount, @getdate, @stamp_user, @settlement_process_remark, 'SUCCESS', 
			bank_code, bank_account_no, bank_account_name, bank_province, bank_city, bank_branch, @getdate
		FROM dbo.merchant_settlement_pending WITH (NOLOCK)
		WHERE settlement_id = @settlement_id

		DELETE FROM dbo.merchant_settlement_pending WHERE settlement_id = @settlement_id

		DELETE FROM dbo.operator_settlement_payment_temp WHERE stamp_user = @stamp_user

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorSettlementSuccessList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorSettlementSuccessList]
(
	@settlement_id varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Settlement > Settlement List [Success]

	rf_param spOperatorSettlementSuccessList
	rf_column_list merchant_settlement_payment
	
	EXEC spOperatorSettlementSuccessList @settlement_id='SIDR146', @stamp_user='developer13'

	select * from merchant_settlement_payment
	
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@payment_amount_total decimal(18,4)
			
	IF NOT EXISTS(SELECT settlement_id FROM dbo.merchant_settlement_payment WITH (NOLOCK) WHERE settlement_id = @settlement_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Settlement not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @payment_amount_total = ISNULL(SUM(payment_amount),0.00)
	FROM dbo.merchant_settlement_payment WITH (NOLOCK)
	WHERE settlement_id = @settlement_id

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT payment_amount_total = @payment_amount_total

	SELECT	payment_id, settlement_id, merchant_code, merchant_name, currency, pg_id, pg_name, 
			bank_code, bank_account_no, bank_account_name, bank_remark, payment_amount
	FROM dbo.merchant_settlement_payment WITH (NOLOCK)
	WHERE settlement_id = @settlement_id
	ORDER BY payment_id
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorTopUpAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorTopUpAdd]
(
	@ip_address varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Fund Out > Top Up List [Add]

	Desc : TopUp Bank Transfer

	rf_param spOperatorTopUpAdd
	rf_column_list operator_topup_temp,'@table'

	EXEC spOperatorTopUpAdd @ip_address='127.0.0.1', @stamp_user='developer13'

	select * from operator_topup_temp
	select * from merchant_topup_list
	select * from merchant_topup_bank
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@count int, @generator_no bigint, @currency varchar(10), @topup_id varchar(50), @getdate datetime,
			@topup_fix_rate decimal(18,4), @topup_fee_percent decimal(18,4), @topup_fee_amount_new decimal(18,4),
			@merchant_code varchar(20)
			
	IF NOT EXISTS(SELECT stamp_user FROM dbo.operator_topup_temp WITH (NOLOCK) WHERE stamp_user = @stamp_user)
	BEGIN
		SELECT @result_code = 1, @error_message = 'No Bank Account'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF (SELECT COUNT(DISTINCT merchant_code) FROM dbo.operator_topup_temp WITH (NOLOCK) WHERE stamp_user = @stamp_user) > 1
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Corrupt Data'
		SELECT @result_code, @error_message
		RETURN
	END
	
	-----------------------------------------------------------------------------

	CREATE TABLE #tbl_topup (
		row_no int identity(1,1),
		operator_topup_temp_no bigint,
		transaction_id varchar(50),
		company_id varchar(3),
		operator_id varchar(2),
		merchant_group_id varchar(20),
		merchant_code varchar(20),
		merchant_name nvarchar(50),
		currency varchar(10),
		topup_amount decimal(18,4),
		topup_fee_amount decimal(18,4),
		topup_fee_amount_new decimal(18,4),
		topup_net_amount decimal(18,4),
		topup_request_user varchar(20),
		bank_code varchar(10),
		bank_account_no varchar(50),
		bank_account_name nvarchar(100),
		stamp_user varchar(20)
	)

	INSERT INTO #tbl_topup (operator_topup_temp_no, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, currency, 
		topup_amount, topup_fee_amount, topup_fee_amount_new, topup_net_amount, topup_request_user, bank_code, bank_account_no, bank_account_name, stamp_user)
	SELECT operator_topup_temp_no, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, currency, 
		topup_amount, topup_fee_amount, 0.00, topup_net_amount, topup_request_user, bank_code, bank_account_no, bank_account_name, stamp_user
	FROM dbo.operator_topup_temp WITH (NOLOCK)
	WHERE stamp_user = @stamp_user 
	ORDER BY bank_code, operator_topup_temp_no

	SELECT @count = count(1) FROM #tbl_topup WITH (NOLOCK)

	SELECT TOP 1 @currency = currency, @merchant_code = merchant_code FROM #tbl_topup WITH (NOLOCK)

	-----------------------------------------------------------------------------
	--Check Fee change
	SELECT	@topup_fix_rate = ISNULL(topup_fix_rate,0.00),
			@topup_fee_percent = ISNULL(topup_fee_percent,0.00)
	FROM dbo.merchant_master_currency WITH (NOLOCK)
	WHERE merchant_code = @merchant_code
	AND currency = @currency

	UPDATE #tbl_topup
	SET @topup_fee_amount_new = topup_fee_amount * @topup_fee_percent / 100.00,
		@topup_fee_amount_new = CASE WHEN currency IN ('IDR','VND') THEN CEILING(@topup_fee_amount_new) ELSE @topup_fee_amount_new END,
		@topup_fee_amount_new = CASE WHEN @topup_fee_amount_new < @topup_fix_rate THEN @topup_fix_rate ELSE @topup_fee_amount_new END,
		topup_fee_amount_new = @topup_fee_amount_new

	IF EXISTS(SELECT row_no FROM #tbl_topup WITH (NOLOCK) WHERE topup_fee_amount <> topup_fee_amount_new)
	BEGIN
		UPDATE op
		SET topup_fee_amount = t.topup_fee_amount_new,
			topup_net_amount = topup_amount + t.topup_fee_amount_new
		FROM dbo.operator_topup_temp op WITH (NOLOCK)
		INNER JOIN #tbl_topup t WITH (NOLOCK) ON op.operator_topup_temp_no = t.operator_topup_temp_no
		WHERE stamp_user = @stamp_user 

		SELECT @result_code = 39999, @error_message = 'Top Up Fee change'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------

	BEGIN TRY
	BEGIN TRANSACTION
		SET @getdate = dbo.fnGetDateGMT7()

		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @topup_id = 'TB' + @currency + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + @count
		WHERE generator_id = 'TOPUP'
		AND currency = @currency

		UPDATE #tbl_topup
		SET transaction_id = 'TB' + currency + CAST(@generator_no + row_no - 1 AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
		
		INSERT INTO dbo.merchant_topup_list(
			topup_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, merchant_code_from, merchant_name_from, currency, 
			topup_amount_total, topup_fee_amount_total, topup_net_amount_total, topup_approved_amount, topup_request_date, topup_request_user, topup_type, topup_status, 
			ip_address, create_date, stamp_user)
		SELECT @topup_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, '', '', currency, 
			SUM(topup_amount), SUM(topup_fee_amount), SUM(topup_net_amount), 0.00, @getdate, @stamp_user, 'BANK TRANSFER', 'PENDING', 
			@ip_address, @getdate, @stamp_user
		FROM #tbl_topup WITH (NOLOCK)
		GROUP BY company_id, operator_id, merchant_group_id, merchant_code, merchant_name, currency

		INSERT INTO dbo.merchant_topup_bank(
			topup_id, transaction_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, merchant_code_from, merchant_name_from, currency, 
			topup_amount, topup_fee_amount, topup_net_amount, topup_fix_rate, topup_fee_percent, 
			topup_request_date, topup_request_user, topup_process_user, topup_type, topup_status, 
			bank_code, bank_account_no, bank_account_name, ip_address, create_date, failed_reason, stamp_user)
		SELECT @topup_id, transaction_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, '', '', currency, 
			topup_amount, topup_fee_amount, topup_net_amount, @topup_fix_rate, @topup_fee_percent, 
			@getdate, '', '', 'BANK TRANSFER', 'PENDING', 
			bank_code, bank_account_no, bank_account_name, '', @getdate, '', stamp_user
		FROM #tbl_topup WITH (NOLOCK)

		DELETE FROM dbo.operator_topup_temp WHERE stamp_user = @stamp_user 

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorTopUpBankAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorTopUpBankAdd]
(
	@topup_id varchar(50),
	@topup_amount decimal(18,4),
	@merchant_code varchar(20) = '',
	@currency varchar(10) = '',
	@bank_code varchar(10),
	@bank_account_no varchar(50),
	@bank_account_name nvarchar(100),
	@ip_address varchar(50),
	@stamp_user varchar(20),
	@merchant_id varchar(10) = '',
	@merchant_name nvarchar(50) = ''
)
AS
BEGIN
/*
	[Operator] > Fund Out > Top Up List > [Add Bank]

	rf_param spOperatorTopUpBankAdd

	EXEC spOperatorTopUpBankAdd @topup_id='TBIDR101', @merchant_code='Merchant Name 2', @currency='IDR', @topup_amount=53000.00, 
		@bank_code='BCA', @bank_account_no='1237789812', @bank_account_name='MUTIARA LAUT', @ip_address='127.0.0.1', @stamp_user='developer13'

	EXEC spOperatorTopUpBankAdd @topup_id='TIDR101', @topup_amount='10000', @merchant_code='Merchant Name 2', @currency='IDR',
        @bank_code='BCA', @bank_account_no='1237882312', @bank_account_name='MAJU SENDIRI', @ip_address='127.0.0.1', @stamp_user='developer38'
	
	select * from merchant_topup_list 
	select * from merchant_topup_bank
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20),
			@getdate datetime, @generator_no bigint, @transaction_id varchar(50),
			@topup_fee_amount decimal(18,4), @topup_net_amount decimal(18,4), 
			@topup_fix_rate decimal(18,4), @topup_fee_percent decimal(18,4)
	
	IF NOT EXISTS(SELECT topup_id FROM dbo.merchant_topup_list WITH (NOLOCK) WHERE topup_id = @topup_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid TopUp ID'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Merchant'
		SELECT @result_code, @error_message
		RETURN
	END

	--No Double Account No
	IF EXISTS(SELECT topup_id FROM dbo.merchant_topup_bank WITH (NOLOCK) WHERE topup_id = @topup_id 
		AND merchant_code = @merchant_code AND currency = @currency AND bank_code = @bank_code AND bank_account_no = @bank_account_no)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Account already exists'
		SELECT @result_code, @error_message
		RETURN
	END
	-----------------------------------------------------------------------------

	SELECT	@company_id = company_id, 
			@operator_id = operator_id, 
			@merchant_group_id = merchant_group_id, 
			@merchant_name = merchant_name
	FROM dbo.merchant_master WITH (NOLOCK)
	WHERE merchant_code = @merchant_code

	SELECT	@topup_fix_rate = ISNULL(topup_fix_rate,0.00), 
			@topup_fee_percent = ISNULL(topup_fee_percent,0.00)
	from dbo.merchant_master_currency WITH (NOLOCK)
	WHERE merchant_code = @merchant_code
	AND currency = @currency

	SELECT	@topup_fee_amount = @topup_amount * @topup_fee_percent / 100.00,
			@topup_fee_amount = CASE WHEN @currency IN ('IDR','VND') THEN CEILING(@topup_fee_amount) ELSE @topup_fee_amount END,
			@topup_fee_amount = CASE WHEN @topup_fee_amount < @topup_fix_rate THEN @topup_fix_rate ELSE @topup_fee_amount END

	SET @topup_net_amount = @topup_amount + @topup_fee_amount

	BEGIN TRY
	BEGIN TRANSACTION
		SET @getdate = dbo.fnGetDateGMT7()
		
		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @transaction_id = 'TB' + @currency + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'TOPUP'
		AND currency = @currency
		
		UPDATE dbo.merchant_topup_list
		SET topup_amount_total = topup_amount_total + @topup_amount,
			topup_fee_amount_total = topup_fee_amount_total + @topup_fee_amount,
			topup_net_amount_total = topup_net_amount_total + @topup_net_amount,
			topup_status = 'PENDING'
		WHERE topup_id = @topup_id

		INSERT INTO dbo.merchant_topup_bank(
			topup_id, transaction_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_name, merchant_code_from, merchant_name_from, currency, 
			topup_amount, topup_fee_amount, topup_net_amount, topup_fix_rate, topup_fee_percent, 
			topup_request_date, topup_request_user, topup_process_date, topup_process_user, 
			topup_type, topup_status, bank_code, bank_account_no, bank_account_name, ip_address, create_date, failed_reason, stamp_user, transaction_id_fundin)
		VALUES (@topup_id, @transaction_id, @company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_name, @merchant_code, @merchant_name, @currency, 
			@topup_amount, @topup_fee_amount, @topup_net_amount, @topup_fix_rate, @topup_fee_percent, 
			@getdate, @stamp_user, NULL, '', 
			'BANK TRANSFER', 'PENDING', @bank_code, @bank_account_no, @bank_account_name, @ip_address, @getdate, '', @stamp_user, '')

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorTopUpBankList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorTopUpBankList]
(
	@topup_id varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Top Up > Top Up List

	rf_param spOperatorTopUpBankList

	EXEC spOperatorTopUpBankList @topup_id='TIIDR219', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)

	IF NOT EXISTS (SELECT topup_id FROM dbo.merchant_topup_list WITH (NOLOCK) WHERE topup_id = @topup_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'TopUp ID invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT topup_id, merchant_code, merchant_name, currency, topup_amount_total, topup_approved_amount, topup_request_date, topup_request_user, topup_type, topup_status,
			topup_fee_amount_total, topup_net_amount_total
	FROM dbo.merchant_topup_list WITH (NOLOCK)
	WHERE topup_id = @topup_id

	SELECT topup_id, transaction_id, merchant_code, merchant_name, currency, topup_amount, topup_request_date, topup_request_user, 
		topup_process_date, topup_process_user, topup_type, topup_status, bank_code, bank_account_no, bank_account_name,
		topup_fee_amount, topup_net_amount
	FROM dbo.merchant_topup_bank WITH (NOLOCK)
	WHERE topup_id = @topup_id
	ORDER BY transaction_id
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorTopUpList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorTopUpList]
(
	@date_from datetime,
	@date_to datetime,
	@merchant_code varchar(20) = '',
	@currency varchar(10) = '',
	@transaction_id varchar(50),
	@topup_type varchar(20), --'', FUND IN, BANK TRANSFER
	@topup_status varchar(20), --'', PENDING, APPROVED, FAILED
	@page int,
	@page_size int,
	@stamp_user varchar(20),
	@merchant_id varchar(50) = '',
	@merchant_name nvarchar(50) = ''
)
AS
BEGIN
/*
	[Operator] > Top Up > Top Up List

	rf_param spOperatorTopUpList

	EXEC spOperatorTopUpList @date_from='2023-01-01', @date_to='2024-01-01', @merchant_code='Merchant Name 2', @currency='IDR', @transaction_id='', @topup_type='', @topup_status='PENDING', 
		@page=1, @page_size=50, @stamp_user=''

	EXEC spOperatorTopUpList @date_from='2023-01-01', @date_to='2024-01-01', @merchant_code='Merchant Name 2', @currency='IDR', @transaction_id='', @topup_type='', @topup_status='', 
		@page=1, @page_size=50, @stamp_user=''

	topup_fundout_list
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@total_rows int, @top int, @total_pending_ticket int

	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997'),
		@transaction_id = CASE WHEN @transaction_id = '' THEN '%' ELSE @transaction_id+'%' END,
		@topup_type = CASE WHEN @topup_type = '' THEN '%' ELSE @topup_type END
		
	SELECT 
		@total_rows = 0,
		@top = @page * @page_size,
		@total_pending_ticket = 0
	
	------------------------------

	CREATE TABLE #tbl_merchant (
		merchant_code varchar(20), 
		currency varchar(10)
	)

	INSERT INTO #tbl_merchant (merchant_code, currency)
	SELECT merchant_code, currency
	FROM dbo.fnUserMerchant(@stamp_user, '', '', '', @currency, '', @merchant_code)
	GROUP BY merchant_code, currency

	------------------------------

	CREATE TABLE #tbl_topup_id (
		topup_id varchar(50),
		topup_request_date datetime
	)
	
	CREATE TABLE #tbl_topup_list (
		row_no int identity(1,1),
		topup_id varchar(50),
		merchant_code varchar(20),
		merchant_name nvarchar(50),
		merchant_code_from varchar(20),
		merchant_name_from nvarchar(50),
		currency varchar(10),
		topup_amount_total decimal(18,4),
		topup_fee_amount_total decimal(18,4),
		topup_net_amount_total decimal(18,4),
		topup_approved_amount decimal(18,4),
		topup_request_date datetime,
		topup_request_user varchar(20),
		topup_type varchar(20),
		topup_status varchar(20)
	)

	CREATE TABLE #tbl_topup_bank (
		row_no int identity(1,1),
		topup_id varchar(50),
		transaction_id varchar(50),
		merchant_code varchar(20),
		merchant_name nvarchar(50),
		merchant_code_from varchar(20),
		merchant_name_from nvarchar(50),
		currency varchar(10),
		topup_amount decimal(18,4),
		topup_fee_amount decimal(18,4),
		topup_net_amount decimal(18,4),
		topup_request_date datetime,
		topup_request_user varchar(20),
		topup_process_date datetime,
		topup_process_user varchar(20),
		topup_type varchar(20),
		topup_status varchar(20),
		bank_code varchar(10),
		bank_account_no varchar(50),
		bank_account_name nvarchar(100)
	)

	SELECT @total_pending_ticket = COUNT(DISTINCT topup_id)
	FROM dbo.merchant_topup_bank b WITH (NOLOCK)
	INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON b.merchant_code = tbl.merchant_code AND b.currency = tbl.currency
	WHERE b.transaction_id LIKE @transaction_id
	AND b.topup_type LIKE @topup_type
	AND b.topup_status = 'PENDING'
	
	/*
		PENDING - All data / filter (ignore date)

		'' APPROVAL FAILED - merchant_topup_list (request_date)
		Detail : request_date + process_date
	*/
	IF @topup_status = 'PENDING'
	BEGIN
		INSERT INTO #tbl_topup_id(topup_id, topup_request_date)
		SELECT b.topup_id, l.topup_request_date
		FROM dbo.merchant_topup_bank b WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON b.merchant_code = tbl.merchant_code AND b.currency = tbl.currency
		LEFT JOIN dbo.merchant_topup_list l WITH (NOLOCK) ON b.topup_id = l.topup_id
		WHERE b.transaction_id LIKE @transaction_id
		AND b.topup_type LIKE @topup_type
		AND b.topup_status = 'PENDING'
		GROUP BY b.topup_id, l.topup_request_date
		ORDER BY l.topup_request_date DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY

		INSERT INTO #tbl_topup_list(topup_id, merchant_code, merchant_name, merchant_code_from, merchant_name_from, currency, 
			topup_amount_total, topup_fee_amount_total, topup_net_amount_total, topup_approved_amount, topup_request_date, 
			topup_request_user, topup_type, topup_status)
		SELECT l.topup_id, l.merchant_code, l.merchant_name, l.merchant_code_from, l.merchant_name_from, l.currency, 
			l.topup_amount_total, l.topup_fee_amount_total, l.topup_net_amount_total, l.topup_approved_amount, l.topup_request_date, 
			l.topup_request_user, l.topup_type, l.topup_status
		FROM dbo.merchant_topup_list l WITH (NOLOCK)
		INNER JOIN #tbl_topup_id tbl WITH (NOLOCK) ON l.topup_id = tbl.topup_id
		ORDER BY tbl.topup_request_date DESC
		
		INSERT INTO #tbl_topup_bank (
			topup_id, transaction_id, merchant_code, merchant_name, merchant_code_from, merchant_name_from, currency, 
			topup_amount, topup_fee_amount, topup_net_amount, topup_request_date, topup_request_user, 
			topup_process_date, topup_process_user, topup_type, topup_status, bank_code, bank_account_no, bank_account_name)
		SELECT b.topup_id, b.transaction_id, b.merchant_code, b.merchant_name, b.merchant_code_from, b.merchant_name_from, b.currency, 
			b.topup_amount, b.topup_fee_amount, b.topup_net_amount, b.topup_request_date, b.topup_request_user, 
			b.topup_process_date, b.topup_process_user, b.topup_type, b.topup_status, b.bank_code, b.bank_account_no, b.bank_account_name
		FROM dbo.merchant_topup_bank b WITH (NOLOCK)
		INNER JOIN #tbl_topup_id tbl WITH (NOLOCK) ON b.topup_id = tbl.topup_id
		ORDER BY tbl.topup_request_date DESC, b.topup_request_date, b.transaction_id
		
		SELECT @total_rows = @total_pending_ticket
	END
	ELSE
	BEGIN
		SET @topup_status = CASE WHEN @topup_status = '' THEN '%' ELSE @topup_status END

		INSERT INTO #tbl_topup_id(topup_id, topup_request_date)
		SELECT b.topup_id, l.topup_request_date
		FROM dbo.merchant_topup_bank b WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON b.merchant_code = tbl.merchant_code AND b.currency = tbl.currency
		LEFT JOIN dbo.merchant_topup_list l WITH (NOLOCK) ON b.topup_id = l.topup_id
		WHERE b.topup_request_date BETWEEN @date_from AND @date_to
		AND b.transaction_id LIKE @transaction_id
		AND b.topup_type LIKE @topup_type
		AND b.topup_status LIKE @topup_status
		AND l.topup_status <> 'PENDING'
		GROUP BY b.topup_id, l.topup_request_date
		ORDER BY l.topup_request_date DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
				
		INSERT INTO #tbl_topup_list(topup_id, merchant_code, merchant_name, merchant_code_from, merchant_name_from, currency, 
			topup_amount_total, topup_fee_amount_total, topup_net_amount_total, topup_approved_amount, topup_request_date, topup_request_user, 
			topup_type, topup_status)
		SELECT l.topup_id, l.merchant_code, l.merchant_name, l.merchant_code_from, l.merchant_name_from, l.currency, 
			l.topup_amount_total, l.topup_fee_amount_total, l.topup_net_amount_total, l.topup_approved_amount, l.topup_request_date, l.topup_request_user, 
			l.topup_type, l.topup_status
		FROM dbo.merchant_topup_list l WITH (NOLOCK)
		INNER JOIN #tbl_topup_id tbl WITH (NOLOCK) ON l.topup_id = tbl.topup_id
		ORDER BY tbl.topup_request_date DESC

		INSERT INTO #tbl_topup_bank (
			topup_id, transaction_id, merchant_code, merchant_name, merchant_code_from, merchant_name_from, currency, 
			topup_amount, topup_request_date, topup_request_user, 
			topup_process_date, topup_process_user, topup_type, topup_status, bank_code, bank_account_no, bank_account_name)
		SELECT b.topup_id, b.transaction_id, b.merchant_code, b.merchant_name, b.merchant_code_from, b.merchant_name_from, b.currency, 
			b.topup_amount, b.topup_request_date, b.topup_request_user, 
			b.topup_process_date, b.topup_process_user, b.topup_type, b.topup_status, b.bank_code, b.bank_account_no, b.bank_account_name
		FROM dbo.merchant_topup_bank b WITH (NOLOCK)
		INNER JOIN #tbl_topup_id tbl WITH (NOLOCK) ON b.topup_id = tbl.topup_id		
		ORDER BY tbl.topup_request_date DESC, b.topup_request_date, b.transaction_id

		SELECT @total_rows = @total_rows + COUNT(DISTINCT b.topup_id)
		FROM dbo.merchant_topup_bank b WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON b.merchant_code = tbl.merchant_code AND b.currency = tbl.currency
		INNER JOIN dbo.merchant_topup_list l WITH (NOLOCK) ON b.topup_id = l.topup_id
		WHERE b.topup_request_date BETWEEN @date_from AND @date_to
		AND b.transaction_id LIKE @transaction_id
		AND b.topup_type LIKE @topup_type
		AND b.topup_status LIKE @topup_status
		AND l.topup_status <> 'PENDING'
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows, total_pending_ticket = @total_pending_ticket

	--header
	SELECT topup_request_date, topup_id, merchant_code, merchant_name, topup_type, currency, topup_amount_total, topup_approved_amount, topup_status, topup_request_user,
			topup_fee_amount_total, topup_net_amount_total
	FROM #tbl_topup_list WITH (NOLOCK)
	ORDER BY row_no

	--detail
	SELECT topup_request_date, topup_process_date, topup_id, transaction_id, merchant_code, merchant_name, topup_type, currency, 
			topup_amount, topup_status, topup_request_user, topup_process_user,
			topup_fee_amount, topup_net_amount
	FROM #tbl_topup_bank WITH (NOLOCK)
	ORDER BY row_no
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorTopUpProcess]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorTopUpProcess]
(
	@transaction_id varchar(50),
	@topup_status varchar(20), -- APPROVED, FAILED
	@failed_reason nvarchar(200),
	@ip_address varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Fund Out > Top Up List [Status]

	rf_param spOperatorTopUpProcess

	EXEC PacmanMainDB.dbo.spOperatorTopUpProcess @transaction_id='TIIDR94', @topup_status='FAILED', @failed_reason='Request by merchant', @ip_address='127.0.0.1', @stamp_user='developer38'

	merchant_topup_bank
	merchant_topup_list

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@topup_id varchar(50), @currency varchar(10), @topup_type varchar(20), 
			@topup_amount decimal(18,4), @topup_fee_amount decimal(18,4), @topup_net_amount decimal(18,4),
			@merchant_code varchar(20), @merchant_name nvarchar(50), @merchant_code_from varchar(20), @merchant_name_from nvarchar(50), 
			@merchant_code_statement varchar(10), @merchant_name_statement nvarchar(50), @statement_amount decimal(18,4),
			@merchant_balance_fundin decimal(18,4), @merchant_balance_before decimal(18,4), @merchant_balance_after decimal(18,4),
			@getdate datetime, @topup_list_status varchar(20), @transaction_note varchar(500)
	
	SET @topup_list_status = ''

	IF @topup_status NOT IN ('APPROVED', 'FAILED')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Status'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_topup_bank WITH (NOLOCK) WHERE transaction_id = @transaction_id AND topup_status = 'PENDING')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Transaction ID'
		SELECT @result_code, @error_message
		RETURN
	END
	
	-----------------------------------------------------------------------------

	SELECT 
		@merchant_code = merchant_code, 
		@merchant_name = merchant_name,
		@merchant_code_from = merchant_code_from, 
		@merchant_name_from = merchant_name_from,
		@topup_id = topup_id, 
		@currency = currency, 
		@topup_type = topup_type, 
		@topup_amount = topup_amount,
		@topup_fee_amount = topup_fee_amount,
		@topup_net_amount = topup_net_amount
	FROM dbo.merchant_topup_bank WITH (NOLOCK)
	WHERE transaction_id = @transaction_id
	
	-----------------------------------------------------------------------------
	--FUND IN
	-----------------------------------------------------------------------------
	IF @topup_type = 'FUND IN'
	BEGIN
		SELECT @merchant_balance_fundin = merchant_balance_fundin
		FROM dbo.merchant_master_balance WITH (NOLOCK)
		WHERE merchant_code = @merchant_code_from
		AND currency = @currency

		IF (@merchant_balance_fundin < @topup_net_amount)
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Fund In Balance not enough'
			SELECT @result_code, @error_message
			RETURN
		END

		BEGIN TRY
			BEGIN TRANSACTION

			SET @getdate = dbo.fnGetDateGMT7()

			UPDATE dbo.merchant_topup_bank
			SET topup_status = @topup_status,
				topup_process_user = @stamp_user,
				topup_process_date = @getdate,
				ip_address = @ip_address,
				failed_reason = @failed_reason
			WHERE transaction_id = @transaction_id
	
			UPDATE dbo.merchant_topup_list
			SET topup_status = @topup_status,
				topup_approved_amount = topup_approved_amount + CASE @topup_status WHEN 'APPROVED' THEN @topup_amount ELSE 0.00 END
			WHERE topup_id = @topup_id

			------------------------------------------------------------------------------------
			--lock merchant_statement
			IF @currency = 'IDR'
			BEGIN
				UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_IDR'
			END
			ELSE IF @currency = 'THB'
			BEGIN
				UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_THB'
			END
			ELSE IF @currency = 'VND'
			BEGIN
				UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_VND'
			END
			ELSE IF @currency = 'MYR'
			BEGIN
				UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_MYR'
			END
			
			--update merchant_balance
			IF @topup_status = 'APPROVED'
			BEGIN
				--Add Fund Out
				SELECT	@statement_amount = @topup_amount,
						@merchant_code_statement = @merchant_code,
						@merchant_name_statement = @merchant_name,
						@transaction_note = CASE WHEN @merchant_code <> @merchant_code_from THEN 'Top Up From '+@merchant_code_from ELSE 'Top Up (Fund In)' END
					
				UPDATE dbo.merchant_master_balance
				SET @merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
					@merchant_balance_after = @merchant_balance_before + @topup_amount,
					merchant_balance_fundout = merchant_balance_fundout + @topup_amount,
					date_updated = @getdate
				WHERE merchant_code = @merchant_code
				AND currency = @currency				
			END
			ELSE IF @topup_status = 'FAILED'
			BEGIN
				SELECT	@statement_amount = @topup_net_amount,
						@merchant_code_statement = @merchant_code_from,
						@merchant_name_statement = @merchant_name_from,
						@transaction_note = CASE WHEN @merchant_code <> @merchant_code_from THEN 'Top Up To '+@merchant_code+' Refund' ELSE 'Top Up (Fund In) Refund' END

				--Return Fund In
				UPDATE dbo.merchant_master_balance
				SET @merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
					@merchant_balance_after = @merchant_balance_before + @topup_net_amount,
					merchant_balance_fundin = merchant_balance_fundin + @topup_net_amount,
					date_updated = @getdate
				WHERE merchant_code = @merchant_code_from
				AND currency = @currency
			END
			
			IF @currency = 'IDR'
			BEGIN
				--Fund Out
				INSERT INTO dbo.merchant_statement_idr(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				SELECT 'TOPIN', 'TOPUP', @transaction_id, @transaction_id
					, @merchant_code_statement, '', @merchant_name_statement, @statement_amount, @getdate, '', currency
					, '', bank_code, @ip_address, '', bank_account_no, bank_account_name
					, '', '', ''
					, '', '', 'SUCCESS', topup_request_date, '', '', ''
					, @transaction_note, @getdate, 0.00, 0.00, ''
					, @merchant_balance_after, 0.00, @statement_amount, @merchant_balance_before, 0.00
				FROM dbo.merchant_topup_bank WITH(NOLOCK)
				WHERE transaction_id = @transaction_id
			END
			ELSE IF @currency = 'VND'
			BEGIN
				--Fund Out
				INSERT INTO dbo.merchant_statement_vnd(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				SELECT 'TOPIN', 'TOPUP', @transaction_id, @transaction_id
					, @merchant_code_statement, '', @merchant_name_statement, @statement_amount, @getdate, '', currency
					, '', bank_code, @ip_address, '', bank_account_no, bank_account_name
					, '', '', ''
					, '', '', 'SUCCESS', topup_request_date, '', '', ''
					, @transaction_note, @getdate, 0.00, 0.00, ''
					, @merchant_balance_after, 0.00, @statement_amount, @merchant_balance_before, 0.00
				FROM dbo.merchant_topup_bank WITH(NOLOCK)
				WHERE transaction_id = @transaction_id
			END
			ELSE IF @currency = 'THB'
			BEGIN
				--Fund Out
				INSERT INTO dbo.merchant_statement_thb(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				SELECT 'TOPIN', 'TOPUP', @transaction_id, @transaction_id
					, @merchant_code_statement, '', @merchant_name_statement, @statement_amount, @getdate, '', currency
					, '', bank_code, @ip_address, '', bank_account_no, bank_account_name
					, '', '', ''
					, '', '', 'SUCCESS', topup_request_date, '', '', ''
					, @transaction_note, @getdate, 0.00, 0.00, ''
					, @merchant_balance_after, 0.00, @statement_amount, @merchant_balance_before, 0.00
				FROM dbo.merchant_topup_bank WITH(NOLOCK)
				WHERE transaction_id = @transaction_id
			END
			ELSE IF @currency = 'MYR'
			BEGIN
				--Fund Out
				INSERT INTO dbo.merchant_statement_myr(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				SELECT 'TOPIN', 'TOPUP', @transaction_id, @transaction_id
					, @merchant_code_statement, '', @merchant_name_statement, @statement_amount, @getdate, '', currency
					, '', bank_code, @ip_address, '', bank_account_no, bank_account_name
					, '', '', ''
					, '', '', 'SUCCESS', topup_request_date, '', '', ''
					, @transaction_note, @getdate, 0.00, 0.00, ''
					, @merchant_balance_after, 0.00, @statement_amount, @merchant_balance_before, 0.00
				FROM dbo.merchant_topup_bank WITH(NOLOCK)
				WHERE transaction_id = @transaction_id
			END

			COMMIT TRANSACTION
		END TRY
		BEGIN CATCH
			ROLLBACK TRANSACTION
			SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
			SELECT @result_code, @error_message
			RETURN
		END CATCH

	END
	-----------------------------------------------------------------------------
	--BANK TRANSFER
	-----------------------------------------------------------------------------
	ELSE IF @topup_type = 'BANK TRANSFER'
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION

			SET @getdate = dbo.fnGetDateGMT7()
			
			--merchant_topup_bank
			UPDATE dbo.merchant_topup_bank
			SET topup_status = @topup_status,
				topup_process_user = @stamp_user,
				topup_process_date = @getdate,
				ip_address = @ip_address,
				failed_reason = @failed_reason
			WHERE transaction_id = @transaction_id

			-------------------------------------------------------------------
			--1 top up id, bisa ada multi status
			SET @topup_list_status = 'PENDING'

			IF NOT EXISTS(SELECT topup_id FROM dbo.merchant_topup_bank WITH (NOLOCK) WHERE topup_id = @topup_id AND topup_status = 'PENDING')
			BEGIN
				SELECT TOP 1 @topup_list_status = topup_status
				FROM dbo.merchant_topup_bank WITH (NOLOCK) 
				WHERE topup_id = @topup_id
				ORDER BY topup_status
			END

			--merchant_topup_list
			UPDATE dbo.merchant_topup_list
			SET topup_status = @topup_list_status,
				topup_approved_amount = topup_approved_amount + CASE @topup_status WHEN 'APPROVED' THEN @topup_amount ELSE 0.00 END
			WHERE topup_id = @topup_id

			----------------------------------------------------------------------------------------------------------------------------------
			IF @topup_status = 'APPROVED'
			BEGIN
				SET @transaction_note = 'Top Up (Bank Transfer)'

				--lock merchant balance
				IF @currency = 'IDR'
				BEGIN
					UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_IDR'
				END
				ELSE IF @currency = 'THB'
				BEGIN
					UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_THB'
				END
				ELSE IF @currency = 'VND'
				BEGIN
					UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_VND'
				END
				ELSE IF @currency = 'MYR'
				BEGIN
					UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_MYR'
				END

				--update merchant balance
				UPDATE dbo.merchant_master_balance
				SET @merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
					@merchant_balance_after = @merchant_balance_before + @topup_amount,
					merchant_balance_fundout = merchant_balance_fundout + @topup_amount,
					date_updated = @getdate
				WHERE merchant_code = @merchant_code
				AND currency = @currency
				
				--add merchant statement
				IF @currency = 'IDR'
				BEGIN
					INSERT INTO dbo.merchant_statement_idr(statement_type, statement_group, transaction_id, merchant_transaction_id
						, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
						, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
						, bank_branch, bank_city, bank_province
						, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
						, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
						, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
					SELECT 'TOPBANK', 'TOPUP', transaction_id, transaction_id
						, @merchant_code, '', @merchant_name, @topup_amount, @getdate, '', currency
						, '', bank_code, @ip_address, '', bank_account_no, bank_account_name
						, '', '', ''
						, '', '', 'SUCCESS', topup_request_date, '', '', ''
						, @transaction_note, @getdate, 0.00, 0.00, ''
						, @merchant_balance_before, 0.00, @topup_amount, @merchant_balance_after, 0.00
					FROM dbo.merchant_topup_bank WITH(NOLOCK)
					WHERE transaction_id = @transaction_id
				END
				ELSE IF @currency = 'VND'
				BEGIN				
					INSERT INTO dbo.merchant_statement_vnd(statement_type, statement_group, transaction_id, merchant_transaction_id
						, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
						, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
						, bank_branch, bank_city, bank_province
						, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
						, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
						, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
					SELECT 'TOPBANK', 'TOPUP', transaction_id, transaction_id
						, @merchant_code, '', @merchant_name, @topup_amount, @getdate, '', currency
						, '', bank_code, @ip_address, '', bank_account_no, bank_account_name
						, '', '', ''
						, '', '', 'SUCCESS', topup_request_date, '', '', ''
						, @transaction_note, @getdate, 0.00, 0.00, ''
						, @merchant_balance_before, 0.00, @topup_amount, @merchant_balance_after, 0.00
					FROM dbo.merchant_topup_bank WITH(NOLOCK)
					WHERE transaction_id = @transaction_id
				END
				ELSE IF @currency = 'THB'
				BEGIN				
					INSERT INTO dbo.merchant_statement_thb(statement_type, statement_group, transaction_id, merchant_transaction_id
						, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
						, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
						, bank_branch, bank_city, bank_province
						, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
						, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
						, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
					SELECT 'TOPBANK', 'TOPUP', transaction_id, transaction_id
						, @merchant_code, '', @merchant_name, @topup_amount, @getdate, '', currency
						, '', bank_code, @ip_address, '', bank_account_no, bank_account_name
						, '', '', ''
						, '', '', 'SUCCESS', topup_request_date, '', '', ''
						, @transaction_note, @getdate, 0.00, 0.00, ''
						, @merchant_balance_before, 0.00, @topup_amount, @merchant_balance_after, 0.00
					FROM dbo.merchant_topup_bank WITH(NOLOCK)
					WHERE transaction_id = @transaction_id
				END
				ELSE IF @currency = 'MYR'
				BEGIN				
					INSERT INTO dbo.merchant_statement_myr(statement_type, statement_group, transaction_id, merchant_transaction_id
						, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
						, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
						, bank_branch, bank_city, bank_province
						, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
						, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
						, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
					SELECT 'TOPBANK', 'TOPUP', transaction_id, transaction_id
						, @merchant_code, '', @merchant_name, @topup_amount, @getdate, '', currency
						, '', bank_code, @ip_address, '', bank_account_no, bank_account_name
						, '', '', ''
						, '', '', 'SUCCESS', topup_request_date, '', '', ''
						, @transaction_note, @getdate, 0.00, 0.00, ''
						, @merchant_balance_before, 0.00, @topup_amount, @merchant_balance_after, 0.00
					FROM dbo.merchant_topup_bank WITH(NOLOCK)
					WHERE transaction_id = @transaction_id
				END
			END
			
			COMMIT TRANSACTION
		END TRY
		BEGIN CATCH
			ROLLBACK TRANSACTION
			SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
			SELECT @result_code, @error_message
			RETURN
		END CATCH
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorTopUpTempAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorTopUpTempAdd]
(
	@merchant_code varchar(20) = '',
	@currency varchar(10) = '',
	@topup_amount decimal(18,4),
	@bank_code varchar(10),
	@bank_account_no varchar(50),
	@bank_account_name nvarchar(100),
	@ip_address varchar(50),
	@stamp_user varchar(20),
	@merchant_id varchar(10) = '',
	@merchant_name nvarchar(50) = ''
)
AS
BEGIN
/*
	[Operator] > Fund Out > Top Up List [Add]

	Desc : Top Up Bank Transfer

	rf_param spOperatorTopUpTempAdd

	EXEC spOperatorTopUpTempAdd @merchant_code='Merchant Name 2', @currency='IDR', @topup_amount=50000.00, 
		@bank_code='BCA', @bank_account_no='1237662312', @bank_account_name='MAJU JAYA', @ip_address='127.0.0.1', @stamp_user='developer13'

	select * from operator_topup_temp
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20),
			@getdate datetime,
			@topup_fee_amount decimal(18,4), @topup_net_amount decimal(18,4), @topup_fix_rate decimal(18,4), @topup_fee_percent decimal(18,4)

	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT stamp_user FROM dbo.operator_topup_temp WITH (NOLOCK) WHERE stamp_user = @stamp_user AND merchant_code = @merchant_code 
		AND bank_code = @bank_code AND bank_account_no = @bank_account_no)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Account already exists'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF NOT EXISTS(SELECT merchant_code FROM dbo.merchant_master_currency WITH (NOLOCK) WHERE merchant_code = @merchant_code AND currency = @currency)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	-----------------------------------------------------------------------------

	SELECT	@company_id = company_id, 
			@operator_id = operator_id, 
			@merchant_group_id = merchant_group_id
	FROM dbo.merchant_master WITH (NOLOCK)
	WHERE merchant_code = @merchant_code

	
	SELECT	@topup_fix_rate = ISNULL(topup_fix_rate,0.00), 
			@topup_fee_percent = ISNULL(topup_fee_percent,0.00)
	FROM dbo.merchant_master_currency WITH (NOLOCK)
	WHERE merchant_code = @merchant_code
	AND currency = @currency

	SELECT 
		@topup_fee_amount = @topup_amount * @topup_fee_percent / 100.00,
		@topup_fee_amount = CASE WHEN @currency IN ('IDR','VND') THEN CEILING(@topup_fee_amount) ELSE @topup_fee_amount END,
		@topup_fee_amount = CASE WHEN @topup_fee_amount < @topup_fix_rate THEN @topup_fix_rate ELSE @topup_fee_amount END

	SET @topup_net_amount = @topup_amount + @topup_fee_amount
	-----------------------------------------------------------------------------

	BEGIN TRY
	BEGIN TRANSACTION
		SET @getdate = dbo.fnGetDateGMT7()

		IF EXISTS(SELECT merchant_code FROM dbo.operator_topup_temp WITH (NOLOCK) WHERE stamp_user = @stamp_user AND merchant_code <> @merchant_code)
		BEGIN
			DELETE FROM dbo.operator_topup_temp WHERE stamp_user = @stamp_user AND merchant_code <> @merchant_code
		END

		INSERT INTO dbo.operator_topup_temp(
			company_id, operator_id, merchant_group_id, merchant_code, merchant_name, currency, 
			topup_amount, topup_fee_amount, topup_net_amount, topup_fix_rate, topup_fee_percent,
			topup_request_user, bank_code, bank_account_no, bank_account_name, ip_address, create_date, stamp_user)
		VALUES (
			@company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_name, @currency, 
			@topup_amount, @topup_fee_amount, @topup_net_amount, @topup_fix_rate, @topup_fee_percent, 
			@stamp_user, @bank_code, @bank_account_no, @bank_account_name, @ip_address, @getdate, @stamp_user)

	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorTopUpTempDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorTopUpTempDelete]
(
	@operator_topup_temp_no bigint,
	@merchant_name varchar(10), --graylog
	@bank_code varchar(10), --graylog
	@bank_account_no varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Fund Out > Top Up List [Add]

	rf_param spOperatorTopUpTempDelete

	EXEC spOperatorTopUpTempDelete @operator_topup_temp_no=1, @merchant_name='', @bank_code='', @bank_account_no='', @stamp_user='developer13'

	select * from operator_topup_temp
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	
	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT operator_topup_temp_no FROM dbo.operator_topup_temp WITH (NOLOCK) WHERE operator_topup_temp_no = @operator_topup_temp_no AND stamp_user = @stamp_user)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Bank Account already remove'
		SELECT @result_code, @error_message
		RETURN
	END
	
	BEGIN TRY
	BEGIN TRANSACTION

		DELETE FROM dbo.operator_topup_temp WHERE operator_topup_temp_no = @operator_topup_temp_no AND stamp_user = @stamp_user 
	
	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorTopUpTempDeleteAll]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorTopUpTempDeleteAll]
(
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Fund Out > Top Up List [Add]

	rf_param spOperatorTopUpTempDeleteAll

	EXEC spOperatorTopUpTempDeleteAll @stamp_user='developer13'

	select * from operator_topup_temp
	
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)

	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT stamp_user FROM dbo.operator_topup_temp WITH (NOLOCK) WHERE stamp_user = @stamp_user)
	BEGIN
		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message
		RETURN
	END
	
	BEGIN TRY
	BEGIN TRANSACTION

		DELETE FROM dbo.operator_topup_temp WHERE stamp_user = @stamp_user 
	
	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spOperatorTopUpTempList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spOperatorTopUpTempList]
(
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Top Up > Top Up List [Add]

	rf_param spOperatorTopUpTempList

	EXEC spOperatorTopUpTempList @stamp_user='developer13'

	select * from operator_topup_temp
	
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(100),
			@merchant_code varchar(20), @currency varchar(10), 
			@topup_amount_total decimal(18,4), @topup_fee_amount_total decimal(18,4), @topup_net_amount_total decimal(18,4)

	IF @stamp_user = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @merchant_code = '', @currency = '', @topup_amount_total = 0.00

	SELECT	@topup_amount_total = ISNULL(SUM(topup_amount),0.00),
			@topup_fee_amount_total = ISNULL(SUM(topup_fee_amount),0.00),
			@topup_net_amount_total = ISNULL(SUM(topup_net_amount),0.00)
	FROM dbo.operator_topup_temp WITH (NOLOCK)
	WHERE stamp_user = @stamp_user

	SELECT TOP 1 @merchant_code = merchant_code, @currency = currency
	FROM dbo.operator_topup_temp WITH (NOLOCK)
	WHERE stamp_user = @stamp_user

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT	merchant_code = @merchant_code, 
			topup_amount_total = @topup_amount_total,
			topup_fee_amount_total = @topup_fee_amount_total,
			topup_net_amount_total = @topup_net_amount_total,
			currency = @currency

	SELECT operator_topup_temp_no, merchant_code, merchant_name, currency, topup_amount, bank_code, bank_account_no, bank_account_name, create_date,
			topup_fee_amount, topup_net_amount, currency
	FROM dbo.operator_topup_temp WITH (NOLOCK)
	WHERE stamp_user = @stamp_user
END
GO
/****** Object:  StoredProcedure [dbo].[spPacmanAPICallLog]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPacmanAPICallLog]
(
	@request varchar(8000),
	@response varchar(8000)
) 
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @result_code int, @result_message varchar(8000)
		, @method varchar(100)
	-----------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------
	SELECT @method = ISNULL(@method, '')
	-----------------------------------------------------------------------------------------------------------
	INSERT INTO dbo.request_response_log(request, response, date_stamp, method)
	VALUES(@request, @response, dbo.fnGetDateGMT7(), @method)
	-----------------------------------------------------------------------------------------------------------

	SELECT @result_code = 1, @result_message = ''

	SELECT @result_code, @result_message
	RETURN 
END
GO
/****** Object:  StoredProcedure [dbo].[spPGDemoMerchantDepositBankGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[spPGDemoMerchantDepositBankGet]
(
	@merchant_id varchar(10)
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @result_code INT, @error_message VARCHAR(8000)
		, @pg_pool_id varchar(50)
	SELECT @result_code = 0, @error_message = ''

	SELECT @result_code = 1, @error_message = ''

	SELECT @result_code, @error_message
	
	;WITH mm(merchant_id, currency, payment_channel_id) AS
	(
		SELECT merchant_id, currency, payment_channel_id
		FROM dbo.merchant_list WITH(NOLOCK)
		WHERE merchant_id = @merchant_id
	),
	CTE(merchant_id, currency, payment_channel_id, pg_pool_id) AS
	(
		SELECT c.merchant_id, c.currency, c.payment_channel_id, pg_pool_id
		FROM dbo.merchant_setting ms WITH(NOLOCK) INNER JOIN mm c
			ON ms.merchant_id = c.merchant_id
	),
	CTE2(merchant_id, currency, payment_channel_id, pg_id) AS
	(
		SELECT TOP 1 c.merchant_id, c.currency, c.payment_channel_id, pg_id
		FROM dbo.payment_gateway_merchant_list ml WITH(NOLOCK) INNER JOIN CTE c
			ON ml.pg_pool_id = c.pg_pool_id
	)
	SELECT bank_code
	FROM CTE2 c INNER JOIN dbo.master_payment_gateway_fundin_bank b WITH(NOLOCK)
		ON c.pg_id = b.pg_id AND c.currency = b.currency
		AND c.payment_channel_id = b.payment_channel_id
	WHERE status_active = 'Y'
	RETURN
END
GO
/****** Object:  StoredProcedure [dbo].[spPGDemoMerchantDepositGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[spPGDemoMerchantDepositGet]
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @result_code INT, @error_message VARCHAR(8000)
	SELECT @result_code = 0, @error_message = ''

	SELECT @result_code = 1, @error_message = ''

	SELECT @result_code, @error_message
	SELECT merchant_id, currency, payment_channel_id, merchant_pass_key, merchant_name
	FROM dbo.merchant_list WITH(NOLOCK)
	WHERE merchant_id IN (
		 '1B90353613'
		,'3C08D87801'
		,'BB42068CB2'
		,'B05D937E5F'
		,'3F00FADFAE'
		,'3048607FFB'
		,'2F631C26E1'
	)
END
GO
/****** Object:  StoredProcedure [dbo].[spPGDemoMerchantWithdrawBankGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[spPGDemoMerchantWithdrawBankGet]
(
	@merchant_id varchar(10)
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @result_code INT, @error_message VARCHAR(8000)
		, @pg_pool_id varchar(50)
	SELECT @result_code = 0, @error_message = ''

	SELECT @result_code = 1, @error_message = ''

	SELECT @result_code, @error_message
	
	;WITH mm(merchant_id, currency, payment_channel_id) AS
	(
		SELECT merchant_id, currency, payment_channel_id
		FROM dbo.merchant_list WITH(NOLOCK)
		WHERE merchant_id = @merchant_id
	),
	CTE(merchant_id, currency, payment_channel_id, pg_pool_id) AS
	(
		SELECT c.merchant_id, c.currency, c.payment_channel_id, pg_pool_id
		FROM dbo.merchant_setting ms WITH(NOLOCK) INNER JOIN mm c
			ON ms.merchant_id = c.merchant_id
	),
	CTE2(merchant_id, currency, payment_channel_id, pg_id) AS
	(
		SELECT TOP 1 c.merchant_id, c.currency, c.payment_channel_id, pg_id
		FROM dbo.payment_gateway_merchant_list ml WITH(NOLOCK) INNER JOIN CTE c
			ON ml.pg_pool_id = c.pg_pool_id
	)
	SELECT bank_code
	FROM CTE2 c INNER JOIN dbo.master_payment_gateway_fundout_bank b WITH(NOLOCK)
		ON c.pg_id = b.pg_id AND c.currency = b.currency
		AND c.payment_channel_id = b.payment_channel_id
	WHERE status_active = 'Y'
	RETURN
END
GO
/****** Object:  StoredProcedure [dbo].[spPGDemoMerchantWithdrawGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[spPGDemoMerchantWithdrawGet]
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @result_code INT, @error_message VARCHAR(8000)
	SELECT @result_code = 0, @error_message = ''

	SELECT @result_code = 1, @error_message = ''

	SELECT @result_code, @error_message
	SELECT merchant_id, currency, payment_channel_id, merchant_pass_key, merchant_name
	FROM dbo.merchant_list WITH(NOLOCK)
	WHERE merchant_id IN (
		 '1B90353613'
		,'3F00FADFAE'
		,'D123DB4CF4'
		,'3048607FFB'
	)
END
GO
/****** Object:  StoredProcedure [dbo].[spPGFundInStatisticCalc]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGFundInStatisticCalc]
(
	@req_id bigint
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @row_no int, @pg_pool_id varchar(50), @total int
		, @result_code int, @error_message varchar(1000)
		, @pg_id varchar(50), @pg_name varchar(200), @date_int int, @date_statistic datetime
		, @currency varchar(10), @bank_code varchar(10), @transaction_amount decimal(18,4)
		, @transaction_status varchar(20),	@transaction_total int
		, @transaction_succeed_total int, @transaction_succeed_percent decimal(18,2)
		, @transaction_succeed_amount decimal(18,4)
		, @transaction_failed_total int, @transaction_failed_percent decimal(18,2)
		, @transaction_failed_amount decimal(18,4)
		, @pg_pool_score decimal(18,2)

	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
		, @transaction_succeed_total = 0, @transaction_succeed_percent = 0
		, @transaction_succeed_amount = 0
		, @transaction_failed_total = 0, @transaction_failed_percent = 0
		, @transaction_failed_amount = 0
	---------------------------------------------------------------------------------------------
	-- FUND IN STAT
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_IN_STAT'

		SELECT @pg_id = pg_id, @date_int = CAST(FORMAT(date_transaction, 'yyyyMMdd') AS INT)
			, @date_statistic = FORMAT(date_transaction, 'yyyy-MM-dd 00:00:00')
			, @currency = currency, @bank_code = bank_code
			, @transaction_amount = transaction_amount, @transaction_status = transaction_status
			, @pg_pool_id = pg_pool_id
			, @pg_pool_score = CASE WHEN transaction_status = 'FAILED' THEN 0 ELSE pg_pool_score END
		FROM dbo.payment_gateway_fundin_statistic_request WITH(NOLOCK)
		WHERE req_id = @req_id

		IF @transaction_status = 'FAILED'
			SELECT @transaction_failed_amount = @transaction_amount, @transaction_succeed_amount = 0
				, @transaction_failed_total = 1, @transaction_succeed_total = 0
		ELSE
			SELECT @transaction_failed_amount = 0, @transaction_succeed_amount = @transaction_amount
				, @transaction_failed_total = 0, @transaction_succeed_total = 1

		IF EXISTS(SELECT date_int FROM dbo.payment_gateway_fundin_statistic WITH(NOLOCK)
			WHERE date_int = @date_int AND currency = @currency AND pg_id = @pg_id
			AND bank_code = @bank_code)
		BEGIN
			SELECT @transaction_total = transaction_total + 1
				, @transaction_succeed_total = transaction_succeed_total + @transaction_succeed_total
				, @transaction_succeed_amount = transaction_succeed_amount + @transaction_succeed_amount
				, @transaction_failed_total = transaction_failed_total + @transaction_failed_total
				, @transaction_failed_amount = transaction_failed_amount + @transaction_failed_amount
			FROM dbo.payment_gateway_fundin_statistic WITH(NOLOCK)
			WHERE date_int = @date_int AND currency = @currency AND pg_id = @pg_id
				AND bank_code = @bank_code

			SELECT @transaction_succeed_percent = (CAST(@transaction_succeed_total AS DECIMAL(18,2))/ CAST(@transaction_total AS DECIMAL(18,2)))
				, @transaction_failed_percent = (CAST(@transaction_failed_total AS DECIMAL(18,2))/ CAST(@transaction_total AS DECIMAL(18,2)));
			
			UPDATE [dbo].[payment_gateway_fundin_statistic]
			SET transaction_total = @transaction_total
				, transaction_succeed_total = @transaction_succeed_total
				, transaction_succeed_percent = @transaction_succeed_percent
				, transaction_succeed_amount = @transaction_succeed_amount
				, transaction_failed_total = @transaction_failed_total
				, transaction_failed_percent = @transaction_failed_percent
				, transaction_failed_amount = @transaction_failed_amount
				, date_updated = dbo.fnGetDateGMT7()
			WHERE date_int = @date_int AND currency = @currency AND pg_id = @pg_id
				AND bank_code = @bank_code
		END
		ELSE
		BEGIN
			SELECT @transaction_total = 1, @pg_name = pg_name
			FROM dbo.master_payment_gateway WITH(NOLOCK)
			WHERE pg_id = @pg_id

			SELECT @transaction_succeed_percent = (CAST(@transaction_succeed_total AS DECIMAL(18,2))/ CAST(@transaction_total AS DECIMAL(18,2)))
				, @transaction_failed_percent = (CAST(@transaction_failed_total AS DECIMAL(18,2))/ CAST(@transaction_total AS DECIMAL(18,2)));

			INSERT INTO dbo.payment_gateway_fundin_statistic(date_int, date_statistic
				, currency, pg_id, pg_name, bank_code, transaction_total
				, transaction_succeed_total, transaction_succeed_percent, transaction_succeed_amount
				, transaction_failed_total, transaction_failed_percent, transaction_failed_amount
				, date_updated)
			VALUES(@date_int, @date_statistic
				, @currency, @pg_id, @pg_name, @bank_code, @transaction_total
				, @transaction_succeed_total, @transaction_succeed_percent, @transaction_succeed_amount
				, @transaction_failed_total, @transaction_failed_percent, @transaction_failed_amount
				, dbo.fnGetDateGMT7())
		END

		-- POOL
		IF EXISTS(SELECT date_int FROM dbo.payment_gateway_pool_fundin_statistic WITH(NOLOCK)
			WHERE date_int = @date_int AND currency = @currency AND pg_id = @pg_id
				AND pg_pool_id = @pg_pool_id)
		BEGIN
			UPDATE dbo.payment_gateway_pool_fundin_statistic
			SET  pg_pool_score = pg_pool_score + @pg_pool_score
				, transaction_succeed_amount = transaction_succeed_amount + @transaction_amount
				, date_updated = dbo.fnGetDateGMT7()
			WHERE date_int = @date_int AND currency = @currency AND pg_id = @pg_id
				AND pg_pool_id = @pg_pool_id	
		END
		ELSE
		BEGIN
			SELECT @pg_name = pg_name
			FROM dbo.master_payment_gateway WITH(NOLOCK)
			WHERE pg_id = @pg_id

			INSERT INTO dbo.payment_gateway_pool_fundin_statistic(
				date_int, date_statistic, currency, pg_id, pg_name, pg_pool_id
				, pg_pool_score, transaction_succeed_amount, date_updated
			)
			VALUES(
				@date_int, @date_statistic, @currency, @pg_id, @pg_name, @pg_pool_id
				, @pg_pool_score, @transaction_succeed_amount, dbo.fnGetDateGMT7()
			)
		END
		
		DELETE FROM dbo.payment_gateway_fundin_statistic_request WHERE req_id = @req_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		PRINT ERROR_MESSAGE()
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGFundInStatisticGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGFundInStatisticGet]
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- GET
	---------------------------------------------------------------------------------------------
	SELECT @result_code, @error_message
	SELECT TOP 100 req_id
	FROM [dbo].[payment_gateway_fundin_statistic_request] WITH(NOLOCK)
	ORDER BY req_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGFundInStatisticList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spPGFundInStatisticList]
(
	@date_from datetime,
	@date_to datetime,
	@company_id varchar(3),
	@operator_id varchar(2),
	@pg_id varchar(10)='',
	@currency varchar(10) = '',
	@currency_code varchar(3) = '', --remove
	@stamp_user varchar(20)
)
AS
/*
	select * from payment_gateway_fundin_statistic

	EXEC PacmanMainDB.dbo.spPGFundInStatisticList @date_from='2022-11-13 00:00:00', @date_to='2022-12-13 23:59:59', @company_id='', @operator_id='', 
		@pg_id='', @currency='', @stamp_user='developer15'
*/
BEGIN
	SET NOCOUNT ON
	
	------------
	DECLARE @result_code INT, @error_message VARCHAR(100),
			@total_rows int, @date_from_int bigint, @date_to_int bigint

	SET @currency = CASE WHEN @currency_code <> '' THEN @currency_code ELSE @currency END --remove

	SELECT 	@date_from_int = FORMAT(@date_from, 'yyyyMMdd'),
			@date_to_int = FORMAT(@date_to, 'yyyyMMdd')
	
	SELECT	@pg_id = CASE @pg_id WHEN '' THEN '%' ELSE @pg_id END,
			@currency = CASE @currency WHEN '' THEN '%' ELSE @currency END,
			@company_id = CASE @company_id WHEN '' THEN '%' ELSE @company_id END,
			@operator_id = CASE @operator_id WHEN '' THEN '%' ELSE @operator_id END

	-------------------------------------------------

	SELECT @total_rows = COUNT(*)
	FROM dbo.payment_gateway_fundin_statistic WITH(NOLOCK) 
	WHERE date_int BETWEEN @date_from_int AND @date_to_int 
	AND pg_id LIKE @pg_id
	AND currency LIKE @currency

	-------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT @total_rows

	SELECT date_statistic, pg_id, pg_name, currency, bank_code, transaction_succeed_percent = transaction_succeed_percent * 100.00
	FROM dbo.payment_gateway_fundin_statistic WITH(NOLOCK) 
	WHERE date_int BETWEEN @date_from_int AND @date_to_int
	AND pg_id LIKE @pg_id
	AND currency LIKE @currency
END

GO
/****** Object:  StoredProcedure [dbo].[spPGFundOutStatisticCalc]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spPGFundOutStatisticCalc]
(
	@req_id bigint
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @row_no int, @pg_pool_id varchar(50), @total int
		, @result_code int, @error_message varchar(1000)
		, @pg_id varchar(50), @pg_name varchar(200), @date_int int, @date_statistic datetime
		, @currency varchar(10), @bank_code varchar(10), @transaction_amount decimal(18,4)
		, @transaction_status varchar(20),	@transaction_total int
		, @transaction_succeed_total int, @transaction_succeed_percent decimal(18,2)
		, @transaction_succeed_amount decimal(18,4)
		, @transaction_failed_total int, @transaction_failed_percent decimal(18,2)
		, @transaction_failed_amount decimal(18,4)
		, @pg_pool_score decimal(18,2)

	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
		, @transaction_succeed_total = 0, @transaction_succeed_percent = 0
		, @transaction_succeed_amount = 0
		, @transaction_failed_total = 0, @transaction_failed_percent = 0
		, @transaction_failed_amount = 0
	---------------------------------------------------------------------------------------------
	-- FUND OUT STAT
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_OUT_STAT'

		SELECT @pg_id = pg_id, @date_int = CAST(FORMAT(date_transaction, 'yyyyMMdd') AS INT)
			, @date_statistic = FORMAT(date_transaction, 'yyyy-MM-dd 00:00:00')
			, @currency = currency, @bank_code = bank_code
			, @transaction_amount = transaction_amount, @transaction_status = transaction_status
			, @pg_pool_id = pg_pool_id
			, @pg_pool_score = CASE WHEN transaction_status = 'FAILED' THEN 0 ELSE pg_pool_score END
		FROM dbo.payment_gateway_fundout_statistic_request WITH(NOLOCK)
		WHERE req_id = @req_id

		IF @transaction_status = 'FAILED'
			SELECT @transaction_failed_amount = @transaction_amount, @transaction_succeed_amount = 0
				, @transaction_failed_total = 1, @transaction_succeed_total = 0
		ELSE
			SELECT @transaction_failed_amount = 0, @transaction_succeed_amount = @transaction_amount
				, @transaction_failed_total = 0, @transaction_succeed_total = 1

		IF EXISTS(SELECT date_int FROM dbo.payment_gateway_fundout_statistic WITH(NOLOCK)
			WHERE date_int = @date_int AND currency = @currency AND pg_id = @pg_id
			AND bank_code = @bank_code)
		BEGIN
			SELECT @transaction_total = transaction_total + 1
				, @transaction_succeed_total = transaction_succeed_total + @transaction_succeed_total
				, @transaction_succeed_amount = transaction_succeed_amount + @transaction_succeed_amount
				, @transaction_failed_total = transaction_failed_total + @transaction_failed_total
				, @transaction_failed_amount = transaction_failed_amount + @transaction_failed_amount
			FROM dbo.payment_gateway_fundout_statistic WITH(NOLOCK)
			WHERE date_int = @date_int AND currency = @currency AND pg_id = @pg_id
				AND bank_code = @bank_code

			SELECT @transaction_succeed_percent = (CAST(@transaction_succeed_total AS DECIMAL(18,2))/ CAST(@transaction_total AS DECIMAL(18,2)))
				, @transaction_failed_percent = (CAST(@transaction_failed_total AS DECIMAL(18,2))/ CAST(@transaction_total AS DECIMAL(18,2)));
			
			UPDATE dbo.payment_gateway_fundout_statistic
			SET transaction_total = @transaction_total
				, transaction_succeed_total = @transaction_succeed_total
				, transaction_succeed_percent = @transaction_succeed_percent
				, transaction_succeed_amount = @transaction_succeed_amount
				, transaction_failed_total = @transaction_failed_total
				, transaction_failed_percent = @transaction_failed_percent
				, transaction_failed_amount = @transaction_failed_amount
				, date_updated = dbo.fnGetDateGMT7()
			WHERE date_int = @date_int AND currency = @currency AND pg_id = @pg_id
				AND bank_code = @bank_code
		END
		ELSE
		BEGIN
			SELECT @transaction_total = 1, @pg_name = pg_name
			FROM dbo.master_payment_gateway WITH(NOLOCK)
			WHERE pg_id = @pg_id

			SELECT @transaction_succeed_percent = (CAST(@transaction_succeed_total AS DECIMAL(18,2))/ CAST(@transaction_total AS DECIMAL(18,2)))
				, @transaction_failed_percent = (CAST(@transaction_failed_total AS DECIMAL(18,2))/ CAST(@transaction_total AS DECIMAL(18,2)));

			INSERT INTO dbo.payment_gateway_fundout_statistic(date_int, date_statistic
				, currency, pg_id, pg_name, bank_code, transaction_total
				, transaction_succeed_total, transaction_succeed_percent, transaction_succeed_amount
				, transaction_failed_total, transaction_failed_percent, transaction_failed_amount
				, date_updated)
			VALUES(@date_int, @date_statistic
				, @currency, @pg_id, @pg_name, @bank_code, @transaction_total
				, @transaction_succeed_total, @transaction_succeed_percent, @transaction_succeed_amount
				, @transaction_failed_total, @transaction_failed_percent, @transaction_failed_amount
				, dbo.fnGetDateGMT7())
		END

		-- POOL
		IF EXISTS(SELECT date_int FROM dbo.payment_gateway_pool_fundout_statistic WITH(NOLOCK)
			WHERE date_int = @date_int AND currency = @currency AND pg_id = @pg_id
				AND pg_pool_id = @pg_pool_id)
		BEGIN
			UPDATE dbo.payment_gateway_pool_fundout_statistic
			SET  pg_pool_score = pg_pool_score + @pg_pool_score
				, transaction_succeed_amount = transaction_succeed_amount + @transaction_amount
				, date_updated = dbo.fnGetDateGMT7()
			WHERE date_int = @date_int AND currency = @currency AND pg_id = @pg_id
				AND pg_pool_id = @pg_pool_id	
		END
		ELSE
		BEGIN
			SELECT @pg_name = pg_name
			FROM dbo.master_payment_gateway WITH(NOLOCK)
			WHERE pg_id = @pg_id

			INSERT INTO dbo.payment_gateway_pool_fundout_statistic(
				date_int, date_statistic, currency, pg_id, pg_name, pg_pool_id
				, pg_pool_score, transaction_succeed_amount, date_updated
			)
			VALUES(
				@date_int, @date_statistic, @currency, @pg_id, @pg_name, @pg_pool_id
				, @pg_pool_score, @transaction_succeed_amount, dbo.fnGetDateGMT7()
			)
		END

		DELETE FROM dbo.payment_gateway_fundout_statistic_request WHERE req_id = @req_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
	END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[spPGFundOutStatisticGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGFundOutStatisticGet]
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- GET
	---------------------------------------------------------------------------------------------
	SELECT @result_code, @error_message
	SELECT TOP 100 req_id
	FROM [dbo].[payment_gateway_fundout_statistic_request] WITH(NOLOCK)
	ORDER BY req_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGFundOutStatisticList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spPGFundOutStatisticList]    
(
	@date_from datetime,
	@date_to datetime,
	@company_id varchar(3),
	@operator_id varchar(2),
	@pg_id varchar(10) = '',
	@currency varchar(10) = '',
	@currency_code varchar(10) = '', --remove
	@stamp_user varchar(20)
)
AS
/*
	select * from payment_gateway_fundout_statistic

	EXEC PacmanMainDB.dbo.spPGFundOutStatisticList @date_from='2022-11-13 00:00:00', @date_to='2022-12-13 23:59:59', @company_id='', @operator_id='', @pg_id='', 
		@currency='', @stamp_user='developer15'
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code int, @error_message varchar(100),
			@total_rows int, @date_from_int bigint, @date_to_int bigint

	SET @currency = CASE WHEN @currency_code <> '' THEN @currency_code ELSE @currency END
	
	SELECT 	@date_from_int = FORMAT(@date_from, 'yyyyMMdd'),
			@date_to_int = FORMAT(@date_to, 'yyyyMMdd')
	
	SELECT	@pg_id = CASE @pg_id WHEN '' THEN '%' ELSE @pg_id END,
			@currency = CASE @currency WHEN '' THEN '%' ELSE @currency END,
			@company_id = CASE @company_id WHEN '' THEN '%' ELSE @company_id END,
			@operator_id = CASE @operator_id WHEN '' THEN '%' ELSE @operator_id END

	-------------------------------------------------------

	SELECT @total_rows = COUNT(1)
	FROM dbo.payment_gateway_fundout_statistic WITH(NOLOCK) 
	WHERE date_int BETWEEN @date_from_int AND @date_to_int 
	AND pg_id LIKE @pg_id
	AND currency LIKE @currency

	-------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''	
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows

	SELECT date_statistic, pg_id, pg_name, currency, bank_code, transaction_succeed_percent = transaction_succeed_percent * 100.00
	FROM dbo.payment_gateway_fundout_statistic WITH(NOLOCK) 
	WHERE date_int BETWEEN @date_from_int AND @date_to_int 
	AND pg_id LIKE @pg_id
	AND currency LIKE @currency

	SELECT DISTINCT m.bank_code, b.legend_color
	FROM dbo.payment_gateway_fundout_statistic m WITH(NOLOCK)
	INNER JOIN dbo.master_bank b WITH(NOLOCK) ON m.bank_code = b.bank_code
	WHERE m.date_int BETWEEN @date_from_int AND @date_to_int 
	AND m.pg_id LIKE @pg_id
	AND m.currency LIKE @currency
END
GO
/****** Object:  StoredProcedure [dbo].[spPGHashKey]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGHashKey]
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @key_confirmation varchar(100), @key_va varchar(100), @key_html varchar(100)
	---------------------------------------------------------------------------------------------
	SELECT @key_confirmation = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'CONFIRMATION_KEY'
	---------------------------------------------------------------------------------------------
	SELECT @key_va = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'VA_KEY'
	---------------------------------------------------------------------------------------------
	SELECT @key_html = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'PAYMENT_HTML_KEY'
	---------------------------------------------------------------------------------------------
	SELECT @key_confirmation, @key_va, @key_html
	RETURN
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInFailedLog]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInFailedLog]
(
	@log_id bigint,
	@error_message varchar(500)
)
AS
BEGIN
	SET NOCOUNT ON;
	---------------------------------------------------------------------------------------------
	-- Req Log
	---------------------------------------------------------------------------------------------
	INSERT INTO dbo.merchant_fundin_failed_log(merchant_id, merchant_pass_key, merchant_transaction_id, amount
	 , request_date, request_url, return_url, currency, merchant_language, bank_code, ip_address
	 , merchant_signature, param_optional, method, failed_reason)
	SELECT merchant_id, merchant_pass_key, merchant_transaction_id, amount
	 , request_date, request_url, return_url, currency, merchant_language, bank_code, ip_address
	 , merchant_signature, param_optional, method, @error_message
	FROM dbo.merchant_request_fundin_log WITH(NOLOCK)
	WHERE req_log_id = @log_id
	---------------------------------------------------------------------------------------------
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInNotifyIDRDel]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInNotifyIDRDel]
(
	@req_id bigint,
	@notify_fundin_note varchar(2000)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- INSERT LOG
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO [dbo].[merchant_transaction_notify_fundin_log](transaction_id
			, merchant_transaction_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, notify_fundin_note, date_stamp
			, payment_channel_id, trigger_by, transaction_hash)
		SELECT transaction_id
			, merchant_transaction_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, @notify_fundin_note, dbo.fnGetDateGMT7()
			, payment_channel_id, trigger_by, transaction_hash
		FROM dbo.merchant_transaction_notify_fundin_idr WITH(NOLOCK)
		WHERE req_id = @req_id

		DELETE FROM dbo.merchant_transaction_notify_fundin_idr WHERE req_id = @req_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInNotifyIDRGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInNotifyIDRGet]
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @tbl TABLE(rows_no int, req_id bigint, transaction_id varchar(50), merchant_transaction_id varchar(50)
		, merchant_id varchar(50), currency varchar(10), amount decimal(18,4)
		, transaction_status varchar(20), request_url varchar(2000)
		, payment_channel_id varchar(20), trigger_by varchar(20), transaction_hash varchar(50));
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000), @no int, @max int, @req_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	INSERT INTO @tbl(rows_no, req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, payment_channel_id, trigger_by, transaction_hash)
	SELECT TOP 100 ROW_NUMBER() OVER(ORDER BY req_id), req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, payment_channel_id, trigger_by, transaction_hash
	FROM [dbo].[merchant_transaction_notify_fundin_idr] n WITH(NOLOCK)
	ORDER BY req_id
	---------------------------------------------------------------------------------------------
	-- Filter
	---------------------------------------------------------------------------------------------
	SELECT @no = 1, @max = COUNT(*) FROM @tbl
	WHILE (@no <= @max)
	BEGIN
		IF (SELECT transaction_status FROM @tbl WHERE rows_no = @no) = 'FAILED'
		BEGIN
			SELECT @req_id = req_id FROM @tbl WHERE rows_no = @no
			BEGIN TRY
				BEGIN TRANSACTION

				INSERT INTO [dbo].[merchant_transaction_notify_fundin_log](transaction_id
					, merchant_transaction_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, notify_fundin_note, date_stamp
					, payment_channel_id, trigger_by, transaction_hash)
				SELECT transaction_id
					, merchant_transaction_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, 'NOT SEND', dbo.fnGetDateGMT7()
					, payment_channel_id, trigger_by, transaction_hash
				FROM dbo.merchant_transaction_notify_fundin_idr WITH(NOLOCK)
				WHERE req_id = @req_id

				DELETE FROM dbo.merchant_transaction_notify_fundin_idr WHERE req_id = @req_id
				DELETE FROM @tbl WHERE rows_no = @no

				COMMIT TRANSACTION
			END TRY
			BEGIN CATCH
				ROLLBACK TRANSACTION
			END CATCH
		END

		SET @no = @no + 1
	END
	---------------------------------------------------------------------------------------------
	SELECT @result_code, @error_message
	SELECT req_id, transaction_id, merchant_transaction_id, n.merchant_id, n.currency
		, amount, transaction_status, request_url, l.merchant_pass_key
		, n.payment_channel_id, transaction_hash
	FROM @tbl n INNER JOIN
		[dbo].[merchant_list] l ON n.merchant_id = l.merchant_id
	ORDER BY req_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInNotifyMYRDel]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInNotifyMYRDel]
(
	@req_id bigint,
	@notify_fundin_note varchar(2000)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- INSERT LOG
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO [dbo].[merchant_transaction_notify_fundin_log](transaction_id
			, merchant_transaction_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, notify_fundin_note, date_stamp
			, payment_channel_id, trigger_by, transaction_hash)
		SELECT transaction_id
			, merchant_transaction_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, @notify_fundin_note, dbo.fnGetDateGMT7()
			, payment_channel_id, trigger_by, transaction_hash
		FROM dbo.merchant_transaction_notify_fundin_myr WITH(NOLOCK)
		WHERE req_id = @req_id

		DELETE FROM dbo.merchant_transaction_notify_fundin_myr WHERE req_id = @req_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInNotifyTHBDel]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInNotifyTHBDel]
(
	@req_id bigint,
	@notify_fundin_note varchar(2000)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- INSERT LOG
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO [dbo].[merchant_transaction_notify_fundin_log](transaction_id
			, merchant_transaction_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, notify_fundin_note, date_stamp
			, payment_channel_id, trigger_by, transaction_hash)
		SELECT transaction_id
			, merchant_transaction_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, @notify_fundin_note, dbo.fnGetDateGMT7()
			, payment_channel_id, trigger_by, transaction_hash
		FROM dbo.merchant_transaction_notify_fundin_thb WITH(NOLOCK)
		WHERE req_id = @req_id

		DELETE FROM dbo.merchant_transaction_notify_fundin_thb WHERE req_id = @req_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInNotifyTHBGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInNotifyTHBGet]
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @tbl TABLE(rows_no int, req_id bigint, transaction_id varchar(50), merchant_transaction_id varchar(50)
		, merchant_id varchar(50), currency varchar(10), amount decimal(18,4)
		, transaction_status varchar(20), request_url varchar(2000)
		, payment_channel_id varchar(20), trigger_by varchar(20), transaction_hash varchar(50));
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000), @no int, @max int, @req_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	INSERT INTO @tbl(rows_no, req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, payment_channel_id, trigger_by, transaction_hash)
	SELECT TOP 100 ROW_NUMBER() OVER(ORDER BY req_id), req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, payment_channel_id, trigger_by, transaction_hash
	FROM dbo.merchant_transaction_notify_fundin_thb  WITH(NOLOCK)
	ORDER BY req_id
	---------------------------------------------------------------------------------------------
	-- Filter
	---------------------------------------------------------------------------------------------
	SELECT @no = 1, @max = COUNT(*) FROM @tbl
	WHILE (@no <= @max)
	BEGIN
		IF (SELECT transaction_status FROM @tbl WHERE rows_no = @no) = 'FAILED'
		BEGIN
			SELECT @req_id = req_id FROM @tbl WHERE rows_no = @no
			BEGIN TRY
				BEGIN TRANSACTION

				INSERT INTO [dbo].[merchant_transaction_notify_fundin_log](transaction_id
					, merchant_transaction_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, notify_fundin_note, date_stamp
					, payment_channel_id, trigger_by, transaction_hash)
				SELECT transaction_id
					, merchant_transaction_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, 'NOT SEND', dbo.fnGetDateGMT7()
					, payment_channel_id, trigger_by, transaction_hash
				FROM dbo.merchant_transaction_notify_fundin_thb WITH(NOLOCK)
				WHERE req_id = @req_id

				DELETE FROM dbo.merchant_transaction_notify_fundin_thb WHERE req_id = @req_id
				DELETE FROM @tbl WHERE rows_no = @no

				COMMIT TRANSACTION
			END TRY
			BEGIN CATCH
				ROLLBACK TRANSACTION
			END CATCH
		END

		SET @no = @no + 1
	END
	---------------------------------------------------------------------------------------------
	SELECT @result_code, @error_message
	SELECT req_id, transaction_id, merchant_transaction_id, n.merchant_id, n.currency
		, amount, transaction_status, request_url, l.merchant_pass_key
		, n.payment_channel_id, transaction_hash
	FROM @tbl n INNER JOIN
		[dbo].[merchant_list] l ON n.merchant_id = l.merchant_id
	ORDER BY req_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInNotifyVNDDel]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInNotifyVNDDel]
(
	@req_id bigint,
	@notify_fundin_note varchar(2000)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- INSERT LOG
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO [dbo].[merchant_transaction_notify_fundin_log](transaction_id
			, merchant_transaction_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, notify_fundin_note, date_stamp
			, payment_channel_id, trigger_by, transaction_hash)
		SELECT transaction_id
			, merchant_transaction_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, @notify_fundin_note, dbo.fnGetDateGMT7()
			, payment_channel_id, trigger_by, transaction_hash
		FROM dbo.merchant_transaction_notify_fundin_vnd WITH(NOLOCK)
		WHERE req_id = @req_id

		DELETE FROM dbo.merchant_transaction_notify_fundin_vnd WHERE req_id = @req_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInNotifyVNDGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInNotifyVNDGet]
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @tbl TABLE(rows_no int, req_id bigint, transaction_id varchar(50), merchant_transaction_id varchar(50)
		, merchant_id varchar(50), currency varchar(10), amount decimal(18,4)
		, transaction_status varchar(20), request_url varchar(2000)
		, payment_channel_id varchar(20), trigger_by varchar(20), transaction_hash varchar(50));
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000), @no int, @max int, @req_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	INSERT INTO @tbl(rows_no, req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, payment_channel_id, trigger_by, transaction_hash)
	SELECT TOP 100 ROW_NUMBER() OVER(ORDER BY req_id), req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, payment_channel_id, trigger_by, transaction_hash
	FROM dbo.merchant_transaction_notify_fundin_vnd n WITH(NOLOCK)
	ORDER BY req_id
	---------------------------------------------------------------------------------------------
	-- Filter
	---------------------------------------------------------------------------------------------
	SELECT @no = 1, @max = COUNT(*) FROM @tbl
	WHILE (@no <= @max)
	BEGIN
		IF (SELECT transaction_status FROM @tbl WHERE rows_no = @no) = 'FAILED'
		BEGIN
			SELECT @req_id = req_id FROM @tbl WHERE rows_no = @no
			BEGIN TRY
				BEGIN TRANSACTION

				INSERT INTO [dbo].[merchant_transaction_notify_fundin_log](transaction_id
					, merchant_transaction_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, notify_fundin_note, date_stamp
					, payment_channel_id, trigger_by, transaction_hash)
				SELECT transaction_id
					, merchant_transaction_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, 'NOT SEND', dbo.fnGetDateGMT7()
					, payment_channel_id, trigger_by, transaction_hash
				FROM dbo.merchant_transaction_notify_fundin_vnd WITH(NOLOCK)
				WHERE req_id = @req_id

				DELETE FROM dbo.merchant_transaction_notify_fundin_vnd WHERE req_id = @req_id
				DELETE FROM @tbl WHERE rows_no = @no

				COMMIT TRANSACTION
			END TRY
			BEGIN CATCH
				ROLLBACK TRANSACTION
			END CATCH
		END

		SET @no = @no + 1
	END
	---------------------------------------------------------------------------------------------
	SELECT @result_code, @error_message
	SELECT req_id, transaction_id, merchant_transaction_id, n.merchant_id, n.currency
		, amount, transaction_status, request_url, l.merchant_pass_key
		, n.payment_channel_id, transaction_hash
	FROM @tbl n INNER JOIN
		[dbo].[merchant_list] l ON n.merchant_id = l.merchant_id
	ORDER BY req_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInTransactionIDRDetail]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInTransactionIDRDetail]
(
	@merchant_id varchar(50),
	@date_start datetime,
	@date_end datetime,
	@page_no int
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @total_row int, @page_size int
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @page_size = 100
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @total_row = COUNT(*)
	FROM dbo.merchant_transaction_history_fundin_idr WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end

	SELECT @result_code, @error_message
	SELECT @total_row
	SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
		, transaction_status
	FROM dbo.merchant_transaction_history_fundin_idr WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end
	ORDER BY date_stamp_req DESC
	OFFSET ((@page_no-1) * @page_size) ROWS FETCH NEXT @page_size ROWS ONLY  
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInTransactionIDRStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInTransactionIDRStatus]
(
	@merchant_id varchar(50),
	@merchant_transaction_id varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @transaction_id = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @transaction_id = transaction_id
	FROM dbo.merchant_transaction_fundin_idr_check WITH(NOLOCK)
	WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id

	IF @transaction_id = ''
	BEGIN
		SELECT @result_code, @error_message
		RETURN
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundin_idr WITH(NOLOCK)
			WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp
				, transaction_status
			FROM dbo.merchant_transaction_pending_fundin_idr WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END
		ELSE
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
				, transaction_status
			FROM dbo.merchant_transaction_history_fundin_idr WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END

		RETURN
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInTransactionMYRDetail]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInTransactionMYRDetail]
(
	@merchant_id varchar(50),
	@date_start datetime,
	@date_end datetime,
	@page_no int
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @total_row int, @page_size int
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @page_size = 100
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @total_row = COUNT(*)
	FROM dbo.merchant_transaction_history_fundin_myr WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end

	SELECT @result_code, @error_message
	SELECT @total_row
	SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
		, transaction_status
	FROM dbo.merchant_transaction_history_fundin_myr WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end
	ORDER BY date_stamp_req DESC
	OFFSET ((@page_no-1) * @page_size) ROWS FETCH NEXT @page_size ROWS ONLY  
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInTransactionTHBDetail]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInTransactionTHBDetail]
(
	@merchant_id varchar(50),
	@date_start datetime,
	@date_end datetime,
	@page_no int
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @total_row int, @page_size int
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @page_size = 100
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @total_row = COUNT(*)
	FROM dbo.merchant_transaction_history_fundin_thb WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end

	SELECT @result_code, @error_message
	SELECT @total_row
	SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
		, transaction_status
	FROM dbo.merchant_transaction_history_fundin_thb WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end
	ORDER BY date_stamp_req DESC
	OFFSET ((@page_no-1) * @page_size) ROWS FETCH NEXT @page_size ROWS ONLY  
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInTransactionTHBStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInTransactionTHBStatus]
(
	@merchant_id varchar(50),
	@merchant_transaction_id varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @transaction_id = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @transaction_id = transaction_id
	FROM dbo.merchant_transaction_fundin_thb_check WITH(NOLOCK)
	WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id

	IF @transaction_id = ''
	BEGIN
		SELECT @result_code, @error_message
		RETURN
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundin_thb WITH(NOLOCK)
			WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp
				, transaction_status
			FROM dbo.merchant_transaction_pending_fundin_thb WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END
		ELSE
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
				, transaction_status
			FROM dbo.merchant_transaction_history_fundin_thb WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END

		RETURN
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInTransactionVNDDetail]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInTransactionVNDDetail]
(
	@merchant_id varchar(50),
	@date_start datetime,
	@date_end datetime,
	@page_no int
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @total_row int, @page_size int
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @page_size = 100
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @total_row = COUNT(*)
	FROM dbo.merchant_transaction_history_fundin_vnd WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end

	SELECT @result_code, @error_message
	SELECT @total_row
	SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
		, transaction_status
	FROM dbo.merchant_transaction_history_fundin_vnd WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end
	ORDER BY date_stamp_req DESC
	OFFSET ((@page_no-1) * @page_size) ROWS FETCH NEXT @page_size ROWS ONLY  
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundInTransactionVNDStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundInTransactionVNDStatus]
(
	@merchant_id varchar(50),
	@merchant_transaction_id varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @transaction_id = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @transaction_id = transaction_id
	FROM dbo.merchant_transaction_fundin_vnd_check WITH(NOLOCK)
	WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id

	IF @transaction_id = ''
	BEGIN
		SELECT @result_code, @error_message
		RETURN
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundin_vnd WITH(NOLOCK)
			WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp
				, transaction_status
			FROM dbo.merchant_transaction_pending_fundin_vnd WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END
		ELSE
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
				, transaction_status
			FROM dbo.merchant_transaction_history_fundin_vnd WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END

		RETURN
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutFailedLog]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutFailedLog]
(
	@log_id bigint,
	@error_message varchar(500)
)
AS
BEGIN
	SET NOCOUNT ON;
	---------------------------------------------------------------------------------------------
	-- Req Log
	---------------------------------------------------------------------------------------------
	INSERT INTO dbo.merchant_fundOut_failed_log(merchant_id, merchant_pass_key, merchant_transaction_id, amount
	 , request_date, request_url, return_url, currency, merchant_language, bank_code, ip_address
	 , merchant_signature, param_optional, method
	 , bank_name, bank_account_no, bank_account_name, bank_branch, bank_city, bank_province, failed_reason)
	SELECT merchant_id, merchant_pass_key, merchant_transaction_id, amount
	 , request_date, request_url, return_url, currency, merchant_language, bank_code, ip_address
	 , merchant_signature, param_optional, method
	 , bank_name, bank_account_no, bank_account_name, bank_branch, bank_city, bank_province, @error_message
	FROM dbo.merchant_request_fundout_log WITH(NOLOCK)
	WHERE req_log_id = @log_id
	---------------------------------------------------------------------------------------------
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutNotifyIDRDel]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutNotifyIDRDel]
(
	@req_id bigint,
	@notify_fundout_note varchar(2000)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- INSERT LOG
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO [dbo].[merchant_transaction_notify_fundout_log]([transaction_id]
			, [merchant_tx_id], [merchant_id], [merchant_name], [currency], [amount]
			, [transaction_status], [request_url], [notify_fundout_note], [date_stamp])
		SELECT [transaction_id]
			, [merchant_transaction_id], [merchant_id], [merchant_name], [currency], [amount]
			, [transaction_status], [request_url], @notify_fundout_note, dbo.fnGetDateGMT7()
		FROM dbo.merchant_transaction_notify_fundout_idr WITH(NOLOCK)
		WHERE req_id = @req_id

		DELETE FROM dbo.merchant_transaction_notify_fundout_idr WHERE req_id = @req_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutNotifyIDRGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutNotifyIDRGet]
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @tbl TABLE(rows_no int, req_id bigint, transaction_id varchar(50), merchant_transaction_id varchar(50)
		, merchant_id varchar(50), currency varchar(10), amount decimal(18,4)
		, transaction_status varchar(20), request_url varchar(2000)
		, trigger_by varchar(20), transaction_hash varchar(50));
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000), @no int, @max int, @req_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	INSERT INTO @tbl(rows_no, req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, trigger_by, transaction_hash)
	SELECT TOP 100 ROW_NUMBER() OVER(ORDER BY req_id), req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, trigger_by, transaction_hash
	FROM dbo.merchant_transaction_notify_fundout_idr n WITH(NOLOCK)
	ORDER BY req_id
	---------------------------------------------------------------------------------------------
	-- Filter
	---------------------------------------------------------------------------------------------
	SELECT @no = 1, @max = COUNT(*) FROM @tbl
	WHILE (@no <= @max)
	BEGIN
		IF (SELECT transaction_status FROM @tbl WHERE rows_no = @no) = 'FAILED'
		BEGIN
			SELECT @req_id = req_id FROM @tbl WHERE rows_no = @no
			BEGIN TRY
				BEGIN TRANSACTION

				INSERT INTO dbo.merchant_transaction_notify_fundout_log(transaction_id
					, merchant_tx_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, notify_fundout_note, date_stamp
					, trigger_by, transaction_hash)
				SELECT transaction_id
					, merchant_transaction_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, 'NOT SEND', dbo.fnGetDateGMT7()
					, trigger_by, transaction_hash
				FROM dbo.merchant_transaction_notify_fundout_idr WITH(NOLOCK)
				WHERE req_id = @req_id

				DELETE FROM dbo.merchant_transaction_notify_fundout_idr WHERE req_id = @req_id
				DELETE FROM @tbl WHERE rows_no = @no

				COMMIT TRANSACTION
			END TRY
			BEGIN CATCH
				ROLLBACK TRANSACTION
			END CATCH
		END

		SET @no = @no + 1
	END
	---------------------------------------------------------------------------------------------
	SELECT @result_code, @error_message
	SELECT req_id, transaction_id, merchant_transaction_id, n.merchant_id, n.currency
		, amount, transaction_status, request_url, l.merchant_pass_key, payment_channel_id
		, transaction_hash
	FROM @tbl n INNER JOIN
		[dbo].[merchant_list] l ON n.merchant_id = l.merchant_id
	ORDER BY req_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutNotifyMYRDel]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutNotifyMYRDel]
(
	@req_id bigint,
	@notify_fundout_note varchar(2000)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- INSERT LOG
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO dbo.merchant_transaction_notify_fundout_log(transaction_id
			, merchant_transaction_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, notify_fundout_note, date_stamp
			, trigger_by, transaction_hash)
		SELECT transaction_id
			, merchant_transaction_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, @notify_fundout_note, dbo.fnGetDateGMT7()
			, trigger_by, transaction_hash
		FROM dbo.merchant_transaction_notify_fundout_myr WITH(NOLOCK)
		WHERE req_id = @req_id

		DELETE FROM dbo.merchant_transaction_notify_fundout_myr WHERE req_id = @req_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutNotifyMYRGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutNotifyMYRGet]
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @tbl TABLE(rows_no int, req_id bigint, transaction_id varchar(50), merchant_transaction_id varchar(50)
		, merchant_id varchar(50), currency varchar(10), amount decimal(18,4)
		, transaction_status varchar(20), request_url varchar(2000)
		, trigger_by varchar(20), transaction_hash varchar(50));
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000), @no int, @max int, @req_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	INSERT INTO @tbl(rows_no, req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, trigger_by, transaction_hash)
	SELECT TOP 100 ROW_NUMBER() OVER(ORDER BY req_id), req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, trigger_by, transaction_hash
	FROM dbo.merchant_transaction_notify_fundout_myr n WITH(NOLOCK)
	ORDER BY req_id
	---------------------------------------------------------------------------------------------
	-- Filter
	---------------------------------------------------------------------------------------------
	SELECT @no = 1, @max = COUNT(*) FROM @tbl
	WHILE (@no <= @max)
	BEGIN
		IF (SELECT transaction_status FROM @tbl WHERE rows_no = @no) = 'FAILED'
		BEGIN
			SELECT @req_id = req_id FROM @tbl WHERE rows_no = @no
			BEGIN TRY
				BEGIN TRANSACTION

				INSERT INTO [dbo].[merchant_transaction_notify_fundout_log](transaction_id
					, merchant_transaction_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, notify_fundout_note, date_stamp
					, trigger_by, transaction_hash)
				SELECT transaction_id
					, merchant_transaction_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, 'NOT SEND', dbo.fnGetDateGMT7()
					, trigger_by, transaction_hash
				FROM dbo.merchant_transaction_notify_fundout_myr WITH(NOLOCK)
				WHERE req_id = @req_id

				DELETE FROM dbo.merchant_transaction_notify_fundout_myr WHERE req_id = @req_id
				DELETE FROM @tbl WHERE rows_no = @no

				COMMIT TRANSACTION
			END TRY
			BEGIN CATCH
				ROLLBACK TRANSACTION
			END CATCH
		END

		SET @no = @no + 1
	END
	---------------------------------------------------------------------------------------------
	SELECT @result_code, @error_message
	SELECT req_id, transaction_id, merchant_transaction_id, n.merchant_id, n.currency
		, amount, transaction_status, request_url, l.merchant_pass_key, payment_channel_id
		, transaction_hash
	FROM @tbl n INNER JOIN
		[dbo].[merchant_list] l ON n.merchant_id = l.merchant_id
	ORDER BY req_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutNotifyTHBDel]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutNotifyTHBDel]
(
	@req_id bigint,
	@notify_fundout_note varchar(2000)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- INSERT LOG
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO dbo.merchant_transaction_notify_fundout_log(transaction_id
			, merchant_transaction_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, notify_fundout_note, date_stamp
			, trigger_by, transaction_hash)
		SELECT transaction_id
			, merchant_transaction_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, @notify_fundout_note, dbo.fnGetDateGMT7()
			, trigger_by, transaction_hash
		FROM dbo.merchant_transaction_notify_fundout_thb WITH(NOLOCK)
		WHERE req_id = @req_id

		DELETE FROM dbo.merchant_transaction_notify_fundout_thb WHERE req_id = @req_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutNotifyTHBGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutNotifyTHBGet]
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @tbl TABLE(rows_no int, req_id bigint, transaction_id varchar(50), merchant_transaction_id varchar(50)
		, merchant_id varchar(50), currency varchar(10), amount decimal(18,4)
		, transaction_status varchar(20), request_url varchar(2000)
		, trigger_by varchar(20), transaction_hash varchar(50));
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000), @no int, @max int, @req_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	INSERT INTO @tbl(rows_no, req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, trigger_by, transaction_hash)
	SELECT TOP 100 ROW_NUMBER() OVER(ORDER BY req_id), req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, trigger_by, transaction_hash
	FROM dbo.merchant_transaction_notify_fundout_thb n WITH(NOLOCK)
	ORDER BY req_id
	---------------------------------------------------------------------------------------------
	-- Filter
	---------------------------------------------------------------------------------------------
	SELECT @no = 1, @max = COUNT(*) FROM @tbl
	WHILE (@no <= @max)
	BEGIN
		IF (SELECT transaction_status FROM @tbl WHERE rows_no = @no) = 'FAILED'
		BEGIN
			SELECT @req_id = req_id FROM @tbl WHERE rows_no = @no
			BEGIN TRY
				BEGIN TRANSACTION

				INSERT INTO dbo.merchant_transaction_notify_fundout_log(transaction_id
					, merchant_transaction_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, notify_fundout_note, date_stamp
					, trigger_by, transaction_hash)
				SELECT transaction_id
					, merchant_transaction_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, 'NOT SEND', dbo.fnGetDateGMT7()
					, trigger_by, transaction_hash
				FROM dbo.merchant_transaction_notify_fundout_thb WITH(NOLOCK)
				WHERE req_id = @req_id

				DELETE FROM dbo.merchant_transaction_notify_fundout_thb WHERE req_id = @req_id
				DELETE FROM @tbl WHERE rows_no = @no

				COMMIT TRANSACTION
			END TRY
			BEGIN CATCH
				ROLLBACK TRANSACTION
			END CATCH
		END

		SET @no = @no + 1
	END
	---------------------------------------------------------------------------------------------
	SELECT @result_code, @error_message
	SELECT req_id, transaction_id, merchant_transaction_id, n.merchant_id, n.currency
		, amount, transaction_status, request_url, l.merchant_pass_key, payment_channel_id
		, transaction_hash
	FROM @tbl n INNER JOIN
		[dbo].[merchant_list] l ON n.merchant_id = l.merchant_id
	ORDER BY req_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutNotifyVNDDel]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutNotifyVNDDel]
(
	@req_id bigint,
	@notify_fundout_note varchar(2000)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- INSERT LOG
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO dbo.merchant_transaction_notify_fundout_log(transaction_id
			, merchant_tx_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, notify_fundout_note, date_stamp
			, trigger_by, transaction_hash)
		SELECT transaction_id
			, merchant_transaction_id, merchant_id, merchant_name, currency, amount
			, transaction_status, request_url, @notify_fundout_note, dbo.fnGetDateGMT7()
			, trigger_by, transaction_hash
		FROM dbo.merchant_transaction_notify_fundout_vnd WITH(NOLOCK)
		WHERE req_id = @req_id

		DELETE FROM dbo.merchant_transaction_notify_fundout_vnd WHERE req_id = @req_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutNotifyVNDGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutNotifyVNDGet]
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @tbl TABLE(rows_no int, req_id bigint, transaction_id varchar(50), merchant_transaction_id varchar(50)
		, merchant_id varchar(50), currency varchar(10), amount decimal(18,4)
		, transaction_status varchar(20), request_url varchar(2000)
		, trigger_by varchar(20), transaction_hash varchar(50));
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000), @no int, @max int, @req_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	INSERT INTO @tbl(rows_no, req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, trigger_by, transaction_hash)
	SELECT TOP 100 ROW_NUMBER() OVER(ORDER BY req_id), req_id, transaction_id, merchant_transaction_id, merchant_id, currency
		, amount, transaction_status, request_url, trigger_by, transaction_hash
	FROM dbo.merchant_transaction_notify_fundout_vnd n WITH(NOLOCK)
	ORDER BY req_id
	---------------------------------------------------------------------------------------------
	-- Filter
	---------------------------------------------------------------------------------------------
	SELECT @no = 1, @max = COUNT(*) FROM @tbl
	WHILE (@no <= @max)
	BEGIN
		IF (SELECT transaction_status FROM @tbl WHERE rows_no = @no) = 'FAILED'
		BEGIN
			SELECT @req_id = req_id FROM @tbl WHERE rows_no = @no
			BEGIN TRY
				BEGIN TRANSACTION

				INSERT INTO [dbo].[merchant_transaction_notify_fundout_log](transaction_id
					, merchant_tx_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, notify_fundout_note, date_stamp
					, trigger_by, transaction_hash)
				SELECT transaction_id
					, merchant_transaction_id, merchant_id, merchant_name, currency, amount
					, transaction_status, request_url, 'NOT SEND', dbo.fnGetDateGMT7()
					, trigger_by, transaction_hash
				FROM dbo.merchant_transaction_notify_fundout_vnd WITH(NOLOCK)
				WHERE req_id = @req_id

				DELETE FROM dbo.merchant_transaction_notify_fundout_vnd WHERE req_id = @req_id
				DELETE FROM @tbl WHERE rows_no = @no

				COMMIT TRANSACTION
			END TRY
			BEGIN CATCH
				ROLLBACK TRANSACTION
			END CATCH
		END

		SET @no = @no + 1
	END
	---------------------------------------------------------------------------------------------
	SELECT @result_code, @error_message
	SELECT req_id, transaction_id, merchant_transaction_id, n.merchant_id, n.currency
		, amount, transaction_status, request_url, l.merchant_pass_key, payment_channel_id
		, transaction_hash
	FROM @tbl n INNER JOIN
		[dbo].[merchant_list] l ON n.merchant_id = l.merchant_id
	ORDER BY req_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutTransactionIDRDetail]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutTransactionIDRDetail]
(
	@merchant_id varchar(50),
	@date_start datetime,
	@date_end datetime,
	@page_no int
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @total_row int, @page_size int
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @page_size = 100
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @total_row = COUNT(*)
	FROM dbo.merchant_transaction_history_fundout_idr WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end

	SELECT @result_code, @error_message
	SELECT @total_row
	SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
		, transaction_status, bank_code, bank_name, bank_account_no, bank_account_name
		, bank_branch, bank_city, bank_province
	FROM dbo.merchant_transaction_history_fundout_idr WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end
	ORDER BY date_stamp_req DESC
	OFFSET ((@page_no-1) * @page_size) ROWS FETCH NEXT @page_size ROWS ONLY  
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutTransactionIDRStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutTransactionIDRStatus]
(
	@merchant_id varchar(50),
	@merchant_transaction_id varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @transaction_id = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @transaction_id = transaction_id
	FROM dbo.merchant_transaction_fundout_idr_check WITH(NOLOCK)
	WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id

	IF @transaction_id = ''
	BEGIN
		SELECT @result_code, @error_message
		RETURN
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundout_idr WITH(NOLOCK)
			WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp
				, transaction_status, bank_code, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
			FROM dbo.merchant_transaction_pending_fundout_idr WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END
		ELSE
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
				, transaction_status, bank_code, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
			FROM dbo.merchant_transaction_history_fundout_idr WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END

		RETURN
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutTransactionMYRDetail]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutTransactionMYRDetail]
(
	@merchant_id varchar(50),
	@date_start datetime,
	@date_end datetime,
	@page_no int
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @total_row int, @page_size int
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @page_size = 100
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @total_row = COUNT(*)
	FROM dbo.merchant_transaction_history_fundout_myr WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end

	SELECT @result_code, @error_message
	SELECT @total_row
	SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
		, transaction_status, bank_code, bank_name, bank_account_no, bank_account_name
		, bank_branch, bank_city, bank_province
	FROM dbo.merchant_transaction_history_fundout_myr WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end
	ORDER BY date_stamp_req DESC
	OFFSET ((@page_no-1) * @page_size) ROWS FETCH NEXT @page_size ROWS ONLY  
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutTransactionMYRStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutTransactionMYRStatus]
(
	@merchant_id varchar(50),
	@merchant_transaction_id varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @transaction_id = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @transaction_id = transaction_id
	FROM dbo.merchant_transaction_fundout_myr_check WITH(NOLOCK)
	WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id

	IF @transaction_id = ''
	BEGIN
		SELECT @result_code, @error_message
		RETURN
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundout_myr WITH(NOLOCK)
			WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp
				, transaction_status, bank_code, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
			FROM dbo.merchant_transaction_pending_fundout_myr WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END
		ELSE
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
				, transaction_status, bank_code, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
			FROM dbo.merchant_transaction_history_fundout_myr WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END

		RETURN
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutTransactionTHBDetail]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutTransactionTHBDetail]
(
	@merchant_id varchar(50),
	@date_start datetime,
	@date_end datetime,
	@page_no int
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @total_row int, @page_size int
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @page_size = 100
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @total_row = COUNT(*)
	FROM dbo.merchant_transaction_history_fundout_thb WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end

	SELECT @result_code, @error_message
	SELECT @total_row
	SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
		, transaction_status, bank_code, bank_name, bank_account_no, bank_account_name
		, bank_branch, bank_city, bank_province
	FROM dbo.merchant_transaction_history_fundout_thb WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end
	ORDER BY date_stamp_req DESC
	OFFSET ((@page_no-1) * @page_size) ROWS FETCH NEXT @page_size ROWS ONLY  
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutTransactionTHBStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutTransactionTHBStatus]
(
	@merchant_id varchar(50),
	@merchant_transaction_id varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @transaction_id = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @transaction_id = transaction_id
	FROM dbo.merchant_transaction_fundout_thb_check WITH(NOLOCK)
	WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id

	IF @transaction_id = ''
	BEGIN
		SELECT @result_code, @error_message
		RETURN
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundout_thb WITH(NOLOCK)
			WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp
				, transaction_status, bank_code, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
			FROM dbo.merchant_transaction_pending_fundout_thb WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END
		ELSE
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
				, transaction_status, bank_code, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
			FROM dbo.merchant_transaction_history_fundout_thb WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END

		RETURN
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutTransactionVNDDetail]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutTransactionVNDDetail]
(
	@merchant_id varchar(50),
	@date_start datetime,
	@date_end datetime,
	@page_no int
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @total_row int, @page_size int
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @page_size = 100
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @total_row = COUNT(*)
	FROM dbo.merchant_transaction_history_fundout_vnd WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end

	SELECT @result_code, @error_message
	SELECT @total_row
	SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
		, transaction_status, bank_code, bank_name, bank_account_no, bank_account_name
		, bank_branch, bank_city, bank_province
	FROM dbo.merchant_transaction_history_fundout_vnd WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND date_stamp_req BETWEEN @date_start AND @date_end
	ORDER BY date_stamp_req DESC
	OFFSET ((@page_no-1) * @page_size) ROWS FETCH NEXT @page_size ROWS ONLY  
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantFundOutTransactionVNDStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantFundOutTransactionVNDStatus]
(
	@merchant_id varchar(50),
	@merchant_transaction_id varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @transaction_id = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @transaction_id = transaction_id
	FROM dbo.merchant_transaction_fundout_vnd_check WITH(NOLOCK)
	WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id

	IF @transaction_id = ''
	BEGIN
		SELECT @result_code, @error_message
		RETURN
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundout_vnd WITH(NOLOCK)
			WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp
				, transaction_status, bank_code, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
			FROM dbo.merchant_transaction_pending_fundout_vnd WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END
		ELSE
		BEGIN
			SELECT @result_code, @error_message

			SELECT merchant_transaction_id, merchant_id, transaction_id, currency, amount, date_stamp_req
				, transaction_status, bank_code, bank_name, bank_account_no, bank_account_name
				, bank_branch, bank_city, bank_province
			FROM dbo.merchant_transaction_history_fundout_vnd WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END

		RETURN
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantGetKey]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE [dbo].[spPGMerchantGetKey]
(
	@merchant_id VARCHAR(10),
	@api_method varchar(10) = 'FUND_IN'
)
AS
/*
exec [spPGMerchantGetKey] @merchant_id='581D9B078E' 
*/
BEGIN
	SET NOCOUNT ON

	DECLARE @result_code INT, @error_message VARCHAR(8000)
		, @api_url varchar(500), @merchant_pass_key varchar(50), @currency varchar(10)
	-----------------------------------------------------------------------------------------------------------------------------------
	SELECT @result_code = 0, @error_message = ''
	-----------------------------------------------------------------------------------------------------------------------------------
	IF ((@merchant_id = '') OR (NOT EXISTS(SELECT merchant_id FROM dbo.merchant_list WITH (NOLOCK) where merchant_id=@merchant_id)))
	BEGIN
		SELECT @result_code = -40001, @error_message = 'Merchant didnt exists!!'
		SELECT @result_code, @error_message
		RETURN
	END
	-----------------------------------------------------------------------------------------------------------------------------------
	IF NOT EXISTS(SELECT merchant_id FROM dbo.merchant_list WITH (NOLOCK) where merchant_id=@merchant_id AND merchant_status = 'Y')
	BEGIN
		SELECT @result_code = -40001, @error_message = 'Merchant inactive'
		SELECT @result_code, @error_message
		RETURN
	END
	-----------------------------------------------------------------------------------------------------------------------------------
	SELECT @merchant_pass_key = merchant_pass_key, @currency = currency
	FROM dbo.merchant_list om WITH(NOLOCK)
	WHERE merchant_id = @merchant_id AND merchant_status = 'Y'
	-----------------------------------------------------------------------------------------------------------------------------------
	SELECT TOP 1 @api_url = api_url
	FROM dbo.master_api_map WITH(NOLOCK)
	WHERE currency = @currency AND api_method = @api_method AND status_active = 'Y'
	ORDER BY api_seq
	-----------------------------------------------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''

	SELECT @result_code, @error_message
	SELECT  @merchant_pass_key, @currency, @api_url
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantRequestFundInLog]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantRequestFundInLog]
(
	@merchant_id varchar(50),
	@merchant_pass_key varchar(50),
	@merchant_transaction_id varchar(50),
	@amount decimal(18, 4),
	@request_date datetime,
	@requestUrl varchar(2000),
	@returnUrl varchar(2000),
	@currency varchar(10),
	@language varchar(10),
	@bank_code varchar(10),
	@ip_address varchar(15),
	@signature varchar(500),
	@param_optional varchar(2000),
	@method varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @log_id bigint
	---------------------------------------------------------------------------------------------
	-- Req Log
	---------------------------------------------------------------------------------------------
	INSERT INTO dbo.merchant_request_fundin_log(merchant_id, merchant_pass_key, merchant_transaction_id, amount
	 , request_date, request_url, return_url, currency, merchant_language, bank_code, ip_address
	 , merchant_signature, param_optional, method)
	VALUES(@merchant_id, @merchant_pass_key, @merchant_transaction_id, @amount
	 , @request_date, @requestUrl, @returnUrl, @currency, @language, @bank_code, @ip_address
	 , @signature, @param_optional, @method)
	---------------------------------------------------------------------------------------------
	SELECT @log_id = SCOPE_IDENTITY()
	---------------------------------------------------------------------------------------------
	SELECT @log_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantRequestFundOutLog]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantRequestFundOutLog]
(
	@merchant_id varchar(50),
	@merchant_pass_key varchar(50),
	@merchant_transaction_id varchar(50),
	@amount decimal(18, 4),
	@request_date datetime,
	@request_url varchar(2000),
	@currency varchar(10),
	@language varchar(10),
	@bank_code varchar(10),
	@ip_address varchar(15),
	@signature varchar(500),
	@param_optional varchar(2000),
	@bank_name nvarchar(50),
	@bank_account_no varchar(50),
	@bank_account_name nvarchar(100),
	@bank_branch varchar(50),
	@bank_city varchar(50),
	@bank_province varchar(50),
	@method varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @log_id bigint
	---------------------------------------------------------------------------------------------
	-- Req Log
	---------------------------------------------------------------------------------------------
	INSERT INTO dbo.merchant_request_fundout_log(merchant_id, merchant_pass_key, merchant_transaction_id, amount
	 , request_date, request_url, return_url, currency, merchant_language, bank_code, ip_address
	 , merchant_signature, param_optional, method
	 , bank_name, bank_account_no, bank_account_name, bank_branch, bank_city, bank_province)
	VALUES(@merchant_id, @merchant_pass_key, @merchant_transaction_id, @amount
	 , @request_date, @request_url, '', @currency, @language, @bank_code, @ip_address
	 , @signature, @param_optional, @method
	 , @bank_name, @bank_account_no, @bank_account_name, @bank_branch, @bank_city, @bank_province)
	---------------------------------------------------------------------------------------------
	SELECT @log_id = SCOPE_IDENTITY()
	---------------------------------------------------------------------------------------------
	SELECT @log_id
	---------------------------------------------------------------------------------------------
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantStatementIDRGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spPGMerchantStatementIDRGet]
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @result_code, @error_message
	SELECT TOP 10 req_id, transaction_id, merchant_transaction_id, merchant_id
	FROM dbo.merchant_statement_idr_request WITH(NOLOCK)
	ORDER BY req_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantStatementIDRInsert]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spPGMerchantStatementIDRInsert]
(
	@req_id bigint
)
AS
BEGIN
/*
	select * from merchant_statement_idr_request WITH(NOLOCK)
	
	EXEC spPGMerchantStatementIDRInsert @req_id=6
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @getdate datetime, @transaction_type varchar(50)
	---------------------------------------------------------------------------------------------
	-- rf_column_list gateway_statement_idr,'@type'
	-- rf_column_list merchant_statement_idr, '@='
	-- rf_column_list merchant_transaction_history_fundin_idr, '@='
	DECLARE @statement_type varchar(20), @statement_group varchar(20), @transaction_id varchar(50), @merchant_transaction_id varchar(50)
		, @merchant_code varchar(20), @merchant_id varchar(10), @merchant_name nvarchar(50), @statement_amount decimal(18,4), @request_date datetime
		, @request_url varchar(2000), @currency varchar(10), @merchant_language varchar(5), @bank_code varchar(10), @ip_address varchar(50)
		, @bank_name nvarchar(50), @bank_account_no varchar(50), @bank_account_name nvarchar(100), @bank_branch varchar(50), @bank_city varchar(50)
		, @bank_province varchar(50), @pg_id varchar(50), @pg_name nvarchar(200), @transaction_status varchar(20), @date_stamp_req datetime
		, @payment_channel_id varchar(20), @payment_channel_id_vendor varchar(20), @payment_channel_name nvarchar(200), @pg_merchant_id varchar(20)
		, @pg_balance_id varchar(50), @transaction_note varchar(500), @date_stamp datetime, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4), @gateway_fee_type varchar(50)
		, @gateway_balance_before decimal(18,4), @gateway_amount_debit decimal(18,4), @gateway_amount_credit decimal(18,4)
		, @gateway_balance_after decimal(18,4), @bank_fee decimal(18,4)
		, @merchant_balance_before decimal(18,4), @merchant_balance_after decimal(18,4)
		, @merchant_amount_debit decimal(18,4), @merchant_amount_credit decimal(18,4)		
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @transaction_id = transaction_id, @statement_type = statement_type
	FROM dbo.merchant_statement_idr_request WITH(NOLOCK)
	WHERE req_id = @req_id

	IF @statement_type NOT IN ('FUNDIN','FUNDOUT')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Statement Type invalid'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- FUND IN
	---------------------------------------------------------------------------------------------
	IF @statement_type = 'FUNDIN'
	BEGIN
		SELECT	@statement_group = 'FUNDIN'

		SELECT	@merchant_transaction_id = merchant_transaction_id,
				@merchant_code = merchant_code,
				@merchant_id = merchant_id,
				@merchant_name = merchant_name,
				@statement_amount = amount,
				@request_date = request_date,
				@request_url = request_url,
				@currency = currency,
				@merchant_language = merchant_language,
				@bank_code = bank_code,
				@ip_address = ip_address,				
				@bank_name = '',
				@bank_account_no = '',
				@bank_account_name = '',
				@bank_branch = '',
				@bank_city = '',
				@bank_province = '',
				@pg_id = pg_id,
				@pg_name = pg_name,
				@transaction_status = transaction_status,
				@date_stamp_req = date_stamp_req,
				@payment_channel_id = payment_channel_id,
				@payment_channel_id_vendor = payment_channel_id_vendor,
				@payment_channel_name = payment_channel_name,
				@pg_merchant_id = pg_merchant_id,
				@transaction_note = transaction_note,
				@gateway_fee = gateway_fee,
				@gateway_percent = gateway_percent,
				@gateway_fee_type = ''
		FROM dbo.merchant_transaction_history_fundin_idr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		SELECT @pg_balance_id = pg_balance_id FROM dbo.payment_gateway_balance WITH(NOLOCK) WHERE pg_merchant_id = @pg_merchant_id AND currency = @currency

		SELECT @merchant_code = merchant_code FROM dbo.merchant_list WITH(NOLOCK) WHERE merchant_id = @merchant_id

		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_statement_idr WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				BEGIN TRY
				BEGIN TRANSACTION

				UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_IDR'
			
				SET @getdate = dbo.fnGetDateGMT7()

				UPDATE dbo.merchant_master_balance
				SET @merchant_amount_credit = @statement_amount - @gateway_fee,
					@merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
					@merchant_balance_after = @merchant_balance_before + @merchant_amount_credit,
					merchant_balance_fundin = merchant_balance_fundin + @merchant_amount_credit,
					merchant_daily_fundin = merchant_daily_fundin + @merchant_amount_credit,
					date_updated = @getdate
				WHERE merchant_code = @merchant_code
				AND currency = @currency

				INSERT INTO dbo.merchant_statement_idr(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_name, @pg_merchant_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @merchant_balance_before, 0.00, @merchant_amount_credit, @merchant_balance_after, 0.00)

				------------------------------------------------------------------------------------------------------------------------
				SET @gateway_fee = 0.00

				UPDATE dbo.payment_gateway_balance
				SET @gateway_amount_credit = @statement_amount - @gateway_fee,
					@gateway_balance_before = pg_balance_fundin + pg_balance_fundout,
					@gateway_balance_after = @gateway_balance_before + @gateway_amount_credit,
					pg_balance_fundin = pg_balance_fundin + @gateway_amount_credit,
					date_updated = @getdate
				WHERE pg_balance_id = @pg_balance_id

				INSERT INTO dbo.gateway_statement_idr(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_id_vendor, payment_channel_name, pg_merchant_id, pg_balance_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, gateway_balance_before, gateway_amount_debit, gateway_amount_credit, gateway_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_id_vendor, @payment_channel_name, @pg_merchant_id, @pg_balance_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @gateway_balance_before, 0.00, @gateway_amount_credit, @gateway_balance_after, 0.00)

				DELETE FROM dbo.merchant_statement_idr_request WHERE req_id = @req_id

				COMMIT TRANSACTION

				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
					SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
					SELECT @result_code, @error_message
					RETURN
				END CATCH
			END
		END
	END
	---------------------------------------------------------------------------------------------
	-- FUND OUT
	---------------------------------------------------------------------------------------------
	ELSE IF @statement_type = 'FUNDOUT'
	BEGIN
		SELECT @statement_group = 'FUNDOUT'

		SELECT	@merchant_transaction_id = merchant_transaction_id,
				@merchant_code = merchant_code,
				@merchant_id = merchant_id,
				@merchant_name = merchant_name,
				@statement_amount = amount,
				@request_date = request_date,
				@request_url = request_url,
				@currency = currency,
				@merchant_language = merchant_language,
				@bank_code = bank_code,
				@ip_address = ip_address,				
				@bank_name = bank_name,
				@bank_account_no = bank_account_no,
				@bank_account_name = bank_account_name,
				@bank_branch = bank_branch,
				@bank_city = bank_city,
				@bank_province = bank_province,
				@pg_id = pg_id,
				@pg_name = pg_name,
				@transaction_status = transaction_status,
				@date_stamp_req = date_stamp_req,
				@payment_channel_id = payment_channel_id,
				@payment_channel_id_vendor = '',
				@payment_channel_name = payment_channel_name,
				@pg_merchant_id = pg_merchant_id,
				@transaction_note = transaction_note,
				@gateway_fee = gateway_fee,
				@gateway_percent = gateway_percent,
				@gateway_fee_type = ''
		FROM dbo.merchant_transaction_history_fundout_idr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		SELECT @pg_balance_id = pg_balance_id FROM dbo.payment_gateway_balance WITH(NOLOCK) WHERE pg_merchant_id = @pg_merchant_id AND currency = @currency

		SELECT @merchant_code = merchant_code FROM dbo.merchant_list WITH(NOLOCK) WHERE merchant_id = @merchant_id

		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_statement_idr WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				BEGIN TRY
				BEGIN TRANSACTION

				UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_IDR'

				SET @getdate = dbo.fnGetDateGMT7()

				UPDATE dbo.merchant_master_balance
				SET @merchant_amount_debit = @statement_amount + @gateway_fee,
					@merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
					@merchant_balance_after = @merchant_balance_before - @merchant_amount_debit,
					merchant_balance_fundout = merchant_balance_fundout - @merchant_amount_debit,
					merchant_outstanding_fundout = merchant_outstanding_fundout - @merchant_amount_debit,
					merchant_daily_fundout = merchant_daily_fundout + @merchant_amount_debit,
					date_updated = @getdate
				WHERE merchant_code = @merchant_code
				AND currency = @currency

				INSERT INTO dbo.merchant_statement_idr(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_name, @pg_merchant_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @merchant_balance_before, @merchant_amount_debit, 0.00, @merchant_balance_after, 0.00)

				------------------------------------------------------------------------------------------------------------------------
				SET @gateway_fee = 0.00

				UPDATE dbo.payment_gateway_balance
				SET @gateway_amount_debit = @statement_amount + @gateway_fee,
					@gateway_balance_before = pg_balance_fundin + pg_balance_fundout,
					@gateway_balance_after = @gateway_balance_before - @gateway_amount_debit,
					pg_balance_fundout = pg_balance_fundout - @gateway_amount_debit,
					date_updated = @getdate
				WHERE pg_balance_id = @pg_balance_id

				INSERT INTO dbo.gateway_statement_idr(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_id_vendor, payment_channel_name, pg_merchant_id, pg_balance_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, gateway_balance_before, gateway_amount_debit, gateway_amount_credit, gateway_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_id_vendor, @payment_channel_name, @pg_merchant_id, @pg_balance_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @gateway_balance_before, @gateway_amount_debit, @gateway_amount_credit, @gateway_balance_after, 0.00)

				DELETE FROM dbo.merchant_statement_idr_request WHERE req_id = @req_id

				COMMIT TRANSACTION
				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
					SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
					SELECT @result_code, @error_message
					RETURN
				END CATCH
			END
		END
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantStatementMYRGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantStatementMYRGet]
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @result_code, @error_message
	SELECT TOP 10 req_id, transaction_id, merchant_transaction_id, merchant_id
	FROM dbo.merchant_statement_myr_request WITH(NOLOCK)
	ORDER BY req_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantStatementMYRInsert]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spPGMerchantStatementMYRInsert]
(
	@req_id bigint
)
AS
BEGIN
/*
	select * from merchant_statement_myr_request WITH(NOLOCK)
	
	EXEC spPGMerchantStatementMYRInsert @req_id=6
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @getdate datetime, @transaction_type varchar(50)
	---------------------------------------------------------------------------------------------
	-- rf_column_list gateway_statement_myr,'@type'
	-- rf_column_list merchant_statement_myr, '@='
	-- rf_column_list merchant_transaction_history_fundin_myr, '@='
	DECLARE @statement_type varchar(20), @statement_group varchar(20), @transaction_id varchar(50), @merchant_transaction_id varchar(50)
		, @merchant_code varchar(20), @merchant_id varchar(10), @merchant_name nvarchar(50), @statement_amount decimal(18,4), @request_date datetime
		, @request_url varchar(2000), @currency varchar(10), @merchant_language varchar(5), @bank_code varchar(10), @ip_address varchar(50)
		, @bank_name nvarchar(50), @bank_account_no varchar(50), @bank_account_name nvarchar(100), @bank_branch varchar(50), @bank_city varchar(50)
		, @bank_province varchar(50), @pg_id varchar(50), @pg_name nvarchar(200), @transaction_status varchar(20), @date_stamp_req datetime
		, @payment_channel_id varchar(20), @payment_channel_id_vendor varchar(20), @payment_channel_name nvarchar(200), @pg_merchant_id varchar(20)
		, @pg_balance_id varchar(50), @transaction_note varchar(500), @date_stamp datetime, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4), @gateway_fee_type varchar(50)
		, @gateway_balance_before decimal(18,4), @gateway_amount_debit decimal(18,4), @gateway_amount_credit decimal(18,4)
		, @gateway_balance_after decimal(18,4), @bank_fee decimal(18,4)
		, @merchant_balance_before decimal(18,4), @merchant_balance_after decimal(18,4)
		, @merchant_amount_debit decimal(18,4), @merchant_amount_credit decimal(18,4)		
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @transaction_id = transaction_id, @statement_type = statement_type
	FROM dbo.merchant_statement_myr_request WITH(NOLOCK)
	WHERE req_id = @req_id

	IF @statement_type NOT IN ('FUNDIN','FUNDOUT')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Statement Type invalid'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- FUND IN
	---------------------------------------------------------------------------------------------
	IF @statement_type = 'FUNDIN'
	BEGIN
		SELECT	@statement_group = 'FUNDIN'

		SELECT	@merchant_transaction_id = merchant_transaction_id,
				@merchant_code = merchant_code,
				@merchant_id = merchant_id,
				@merchant_name = merchant_name,
				@statement_amount = amount,
				@request_date = request_date,
				@request_url = request_url,
				@currency = currency,
				@merchant_language = merchant_language,
				@bank_code = bank_code,
				@ip_address = ip_address,				
				@bank_name = '',
				@bank_account_no = '',
				@bank_account_name = '',
				@bank_branch = '',
				@bank_city = '',
				@bank_province = '',
				@pg_id = pg_id,
				@pg_name = pg_name,
				@transaction_status = transaction_status,
				@date_stamp_req = date_stamp_req,
				@payment_channel_id = payment_channel_id,
				@payment_channel_id_vendor = payment_channel_id_vendor,
				@payment_channel_name = payment_channel_name,
				@pg_merchant_id = pg_merchant_id,
				@transaction_note = transaction_note,
				@gateway_fee = gateway_fee,
				@gateway_percent = gateway_percent,
				@gateway_fee_type = ''
		FROM dbo.merchant_transaction_history_fundin_myr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		SELECT @pg_balance_id = pg_balance_id FROM dbo.payment_gateway_balance WITH(NOLOCK) WHERE pg_merchant_id = @pg_merchant_id AND currency = @currency

		SELECT @merchant_code = merchant_code FROM dbo.merchant_list WITH(NOLOCK) WHERE merchant_id = @merchant_id

		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_statement_myr WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				BEGIN TRY
				BEGIN TRANSACTION

				UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_MYR'
			
				SET @getdate = dbo.fnGetDateGMT7()

				UPDATE dbo.merchant_master_balance
				SET @merchant_amount_credit = @statement_amount - @gateway_fee,
					@merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
					@merchant_balance_after = @merchant_balance_before + @merchant_amount_credit,
					merchant_balance_fundin = merchant_balance_fundin + @merchant_amount_credit,
					merchant_daily_fundin = merchant_daily_fundin + @merchant_amount_credit,
					date_updated = @getdate
				WHERE merchant_code = @merchant_code
				AND currency = @currency

				INSERT INTO dbo.merchant_statement_myr(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_name, @pg_merchant_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @merchant_balance_before, 0.00, @merchant_amount_credit, @merchant_balance_after, 0.00)

				------------------------------------------------------------------------------------------------------------------------
				SET @gateway_fee = 0.00

				UPDATE dbo.payment_gateway_balance
				SET @gateway_amount_credit = @statement_amount - @gateway_fee,
					@gateway_balance_before = pg_balance_fundin + pg_balance_fundout,
					@gateway_balance_after = @gateway_balance_before + @gateway_amount_credit,
					pg_balance_fundin = pg_balance_fundin + @gateway_amount_credit,
					date_updated = @getdate
				WHERE pg_balance_id = @pg_balance_id

				INSERT INTO dbo.gateway_statement_myr(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_id_vendor, payment_channel_name, pg_merchant_id, pg_balance_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, gateway_balance_before, gateway_amount_debit, gateway_amount_credit, gateway_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_id_vendor, @payment_channel_name, @pg_merchant_id, @pg_balance_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @gateway_balance_before, 0.00, @gateway_amount_credit, @gateway_balance_after, 0.00)

				DELETE FROM dbo.merchant_statement_myr_request WHERE req_id = @req_id

				COMMIT TRANSACTION

				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
					SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
					SELECT @result_code, @error_message
					RETURN
				END CATCH
			END
		END
	END
	---------------------------------------------------------------------------------------------
	-- FUND OUT
	---------------------------------------------------------------------------------------------
	ELSE IF @statement_type = 'FUNDOUT'
	BEGIN
		SELECT @statement_group = 'FUNDOUT'

		SELECT	@merchant_transaction_id = merchant_transaction_id,
				@merchant_code = merchant_code,
				@merchant_id = merchant_id,
				@merchant_name = merchant_name,
				@statement_amount = amount,
				@request_date = request_date,
				@request_url = request_url,
				@currency = currency,
				@merchant_language = merchant_language,
				@bank_code = bank_code,
				@ip_address = ip_address,				
				@bank_name = bank_name,
				@bank_account_no = bank_account_no,
				@bank_account_name = bank_account_name,
				@bank_branch = bank_branch,
				@bank_city = bank_city,
				@bank_province = bank_province,
				@pg_id = pg_id,
				@pg_name = pg_name,
				@transaction_status = transaction_status,
				@date_stamp_req = date_stamp_req,
				@payment_channel_id = payment_channel_id,
				@payment_channel_id_vendor = '',
				@payment_channel_name = payment_channel_name,
				@pg_merchant_id = pg_merchant_id,
				@transaction_note = transaction_note,
				@gateway_fee = gateway_fee,
				@gateway_percent = gateway_percent,
				@gateway_fee_type = ''
		FROM dbo.merchant_transaction_history_fundout_myr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		SELECT @pg_balance_id = pg_balance_id FROM dbo.payment_gateway_balance WITH(NOLOCK) WHERE pg_merchant_id = @pg_merchant_id AND currency = @currency

		SELECT @merchant_code = merchant_code FROM dbo.merchant_list WITH(NOLOCK) WHERE merchant_id = @merchant_id

		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_statement_myr WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				BEGIN TRY
				BEGIN TRANSACTION

				UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_MYR'

				SET @getdate = dbo.fnGetDateGMT7()

				UPDATE dbo.merchant_master_balance
				SET @merchant_amount_debit = @statement_amount + @gateway_fee,
					@merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
					@merchant_balance_after = @merchant_balance_before - @merchant_amount_debit,
					merchant_balance_fundout = merchant_balance_fundout - @merchant_amount_debit,
					merchant_outstanding_fundout = merchant_outstanding_fundout - @merchant_amount_debit,
					merchant_daily_fundout = merchant_daily_fundout + @merchant_amount_debit,
					date_updated = @getdate
				WHERE merchant_code = @merchant_code
				AND currency = @currency

				INSERT INTO dbo.merchant_statement_myr(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_name, @pg_merchant_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @merchant_balance_before, @merchant_amount_debit, 0.00, @merchant_balance_after, 0.00)

				------------------------------------------------------------------------------------------------------------------------
				SET @gateway_fee = 0.00

				UPDATE dbo.payment_gateway_balance
				SET @gateway_amount_debit = @statement_amount + @gateway_fee,
					@gateway_balance_before = pg_balance_fundin + pg_balance_fundout,
					@gateway_balance_after = @gateway_balance_before - @gateway_amount_debit,
					pg_balance_fundout = pg_balance_fundout - @gateway_amount_debit,
					date_updated = @getdate
				WHERE pg_balance_id = @pg_balance_id

				INSERT INTO dbo.gateway_statement_myr(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_id_vendor, payment_channel_name, pg_merchant_id, pg_balance_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, gateway_balance_before, gateway_amount_debit, gateway_amount_credit, gateway_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_id_vendor, @payment_channel_name, @pg_merchant_id, @pg_balance_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @gateway_balance_before, @gateway_amount_debit, @gateway_amount_credit, @gateway_balance_after, 0.00)

				DELETE FROM dbo.merchant_statement_myr_request WHERE req_id = @req_id

				COMMIT TRANSACTION
				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
					SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
					SELECT @result_code, @error_message
					RETURN
				END CATCH
			END
		END
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantStatementTHBGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spPGMerchantStatementTHBGet]
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @result_code, @error_message
	SELECT TOP 10 req_id, transaction_id, merchant_transaction_id, merchant_id
	FROM dbo.merchant_statement_thb_request WITH(NOLOCK)
	ORDER BY req_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantStatementTHBInsert]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spPGMerchantStatementTHBInsert]
(
	@req_id bigint
)
AS
BEGIN
/*
	select * from merchant_statement_thb_request WITH(NOLOCK)
	
	EXEC spPGMerchantStatementTHBInsert @req_id=6
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @getdate datetime, @transaction_type varchar(50)
	---------------------------------------------------------------------------------------------
	-- rf_column_list gateway_statement_thb,'@type'
	-- rf_column_list merchant_statement_thb, '@='
	-- rf_column_list merchant_transaction_history_fundin_thb, '@='
	DECLARE @statement_type varchar(20), @statement_group varchar(20), @transaction_id varchar(50), @merchant_transaction_id varchar(50)
		, @merchant_code varchar(20), @merchant_id varchar(10), @merchant_name nvarchar(50), @statement_amount decimal(18,4), @request_date datetime
		, @request_url varchar(2000), @currency varchar(10), @merchant_language varchar(5), @bank_code varchar(10), @ip_address varchar(50)
		, @bank_name nvarchar(50), @bank_account_no varchar(50), @bank_account_name nvarchar(100), @bank_branch varchar(50), @bank_city varchar(50)
		, @bank_province varchar(50), @pg_id varchar(50), @pg_name nvarchar(200), @transaction_status varchar(20), @date_stamp_req datetime
		, @payment_channel_id varchar(20), @payment_channel_id_vendor varchar(20), @payment_channel_name nvarchar(200), @pg_merchant_id varchar(20)
		, @pg_balance_id varchar(50), @transaction_note varchar(500), @date_stamp datetime, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4), @gateway_fee_type varchar(50)
		, @gateway_balance_before decimal(18,4), @gateway_amount_debit decimal(18,4), @gateway_amount_credit decimal(18,4)
		, @gateway_balance_after decimal(18,4), @bank_fee decimal(18,4)
		, @merchant_balance_before decimal(18,4), @merchant_balance_after decimal(18,4)
		, @merchant_amount_debit decimal(18,4), @merchant_amount_credit decimal(18,4)		
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @transaction_id = transaction_id, @statement_type = statement_type
	FROM dbo.merchant_statement_thb_request WITH(NOLOCK)
	WHERE req_id = @req_id

	IF @statement_type NOT IN ('FUNDIN','FUNDOUT')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Statement Type invalid'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- FUND IN
	---------------------------------------------------------------------------------------------
	IF @statement_type = 'FUNDIN'
	BEGIN
		SELECT	@statement_group = 'FUNDIN'

		SELECT	@merchant_transaction_id = merchant_transaction_id,
				@merchant_code = merchant_code,
				@merchant_id = merchant_id,
				@merchant_name = merchant_name,
				@statement_amount = amount,
				@request_date = request_date,
				@request_url = request_url,
				@currency = currency,
				@merchant_language = merchant_language,
				@bank_code = bank_code,
				@ip_address = ip_address,				
				@bank_name = '',
				@bank_account_no = '',
				@bank_account_name = '',
				@bank_branch = '',
				@bank_city = '',
				@bank_province = '',
				@pg_id = pg_id,
				@pg_name = pg_name,
				@transaction_status = transaction_status,
				@date_stamp_req = date_stamp_req,
				@payment_channel_id = payment_channel_id,
				@payment_channel_id_vendor = payment_channel_id_vendor,
				@payment_channel_name = payment_channel_name,
				@pg_merchant_id = pg_merchant_id,
				@transaction_note = transaction_note,
				@gateway_fee = gateway_fee,
				@gateway_percent = gateway_percent,
				@gateway_fee_type = ''
		FROM dbo.merchant_transaction_history_fundin_thb WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		SELECT @pg_balance_id = pg_balance_id FROM dbo.payment_gateway_balance WITH(NOLOCK) WHERE pg_merchant_id = @pg_merchant_id AND currency = @currency

		SELECT @merchant_code = merchant_code FROM dbo.merchant_list WITH(NOLOCK) WHERE merchant_id = @merchant_id

		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_statement_thb WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				BEGIN TRY
				BEGIN TRANSACTION

				UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_THB'
			
				SET @getdate = dbo.fnGetDateGMT7()

				UPDATE dbo.merchant_master_balance
				SET @merchant_amount_credit = @statement_amount - @gateway_fee,
					@merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
					@merchant_balance_after = @merchant_balance_before + @merchant_amount_credit,
					merchant_balance_fundin = merchant_balance_fundin + @merchant_amount_credit,
					merchant_daily_fundin = merchant_daily_fundin + @merchant_amount_credit,
					date_updated = @getdate
				WHERE merchant_code = @merchant_code
				AND currency = @currency

				INSERT INTO dbo.merchant_statement_thb(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_name, @pg_merchant_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @merchant_balance_before, 0.00, @merchant_amount_credit, @merchant_balance_after, 0.00)

				------------------------------------------------------------------------------------------------------------------------
				SET @gateway_fee = 0.00

				UPDATE dbo.payment_gateway_balance
				SET @gateway_amount_credit = @statement_amount - @gateway_fee,
					@gateway_balance_before = pg_balance_fundin + pg_balance_fundout,
					@gateway_balance_after = @gateway_balance_before + @gateway_amount_credit,
					pg_balance_fundin = pg_balance_fundin + @gateway_amount_credit,
					date_updated = @getdate
				WHERE pg_balance_id = @pg_balance_id

				INSERT INTO dbo.gateway_statement_thb(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_id_vendor, payment_channel_name, pg_merchant_id, pg_balance_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, gateway_balance_before, gateway_amount_debit, gateway_amount_credit, gateway_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_id_vendor, @payment_channel_name, @pg_merchant_id, @pg_balance_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @gateway_balance_before, 0.00, @gateway_amount_credit, @gateway_balance_after, 0.00)

				DELETE FROM dbo.merchant_statement_thb_request WHERE req_id = @req_id

				COMMIT TRANSACTION

				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
					SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
					SELECT @result_code, @error_message
					RETURN
				END CATCH
			END
		END
	END
	---------------------------------------------------------------------------------------------
	-- FUND OUT
	---------------------------------------------------------------------------------------------
	ELSE IF @statement_type = 'FUNDOUT'
	BEGIN
		SELECT @statement_group = 'FUNDOUT'

		SELECT	@merchant_transaction_id = merchant_transaction_id,
				@merchant_code = merchant_code,
				@merchant_id = merchant_id,
				@merchant_name = merchant_name,
				@statement_amount = amount,
				@request_date = request_date,
				@request_url = request_url,
				@currency = currency,
				@merchant_language = merchant_language,
				@bank_code = bank_code,
				@ip_address = ip_address,				
				@bank_name = bank_name,
				@bank_account_no = bank_account_no,
				@bank_account_name = bank_account_name,
				@bank_branch = bank_branch,
				@bank_city = bank_city,
				@bank_province = bank_province,
				@pg_id = pg_id,
				@pg_name = pg_name,
				@transaction_status = transaction_status,
				@date_stamp_req = date_stamp_req,
				@payment_channel_id = payment_channel_id,
				@payment_channel_id_vendor = '',
				@payment_channel_name = payment_channel_name,
				@pg_merchant_id = pg_merchant_id,
				@transaction_note = transaction_note,
				@gateway_fee = gateway_fee,
				@gateway_percent = gateway_percent,
				@gateway_fee_type = ''
		FROM dbo.merchant_transaction_history_fundout_thb WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		SELECT @pg_balance_id = pg_balance_id FROM dbo.payment_gateway_balance WITH(NOLOCK) WHERE pg_merchant_id = @pg_merchant_id AND currency = @currency

		SELECT @merchant_code = merchant_code FROM dbo.merchant_list WITH(NOLOCK) WHERE merchant_id = @merchant_id

		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_statement_thb WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				BEGIN TRY
				BEGIN TRANSACTION

				UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_THB'

				SET @getdate = dbo.fnGetDateGMT7()

				UPDATE dbo.merchant_master_balance
				SET @merchant_amount_debit = @statement_amount + @gateway_fee,
					@merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
					@merchant_balance_after = @merchant_balance_before - @merchant_amount_debit,
					merchant_balance_fundout = merchant_balance_fundout - @merchant_amount_debit,
					merchant_outstanding_fundout = merchant_outstanding_fundout - @merchant_amount_debit,
					merchant_daily_fundout = merchant_daily_fundout + @merchant_amount_debit,
					date_updated = @getdate
				WHERE merchant_code = @merchant_code
				AND currency = @currency

				INSERT INTO dbo.merchant_statement_thb(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_name, @pg_merchant_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @merchant_balance_before, @merchant_amount_debit, 0.00, @merchant_balance_after, 0.00)

				------------------------------------------------------------------------------------------------------------------------
				SET @gateway_fee = 0.00

				UPDATE dbo.payment_gateway_balance
				SET @gateway_amount_debit = @statement_amount + @gateway_fee,
					@gateway_balance_before = pg_balance_fundin + pg_balance_fundout,
					@gateway_balance_after = @gateway_balance_before - @gateway_amount_debit,
					pg_balance_fundout = pg_balance_fundout - @gateway_amount_debit,
					date_updated = @getdate
				WHERE pg_balance_id = @pg_balance_id

				INSERT INTO dbo.gateway_statement_thb(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_id_vendor, payment_channel_name, pg_merchant_id, pg_balance_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, gateway_balance_before, gateway_amount_debit, gateway_amount_credit, gateway_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_id_vendor, @payment_channel_name, @pg_merchant_id, @pg_balance_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @gateway_balance_before, @gateway_amount_debit, @gateway_amount_credit, @gateway_balance_after, 0.00)

				DELETE FROM dbo.merchant_statement_thb_request WHERE req_id = @req_id

				COMMIT TRANSACTION
				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
					SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
					SELECT @result_code, @error_message
					RETURN
				END CATCH
			END
		END
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantStatementVNDGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spPGMerchantStatementVNDGet]
AS
BEGIN
	SET NOCOUNT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @result_code, @error_message
	SELECT TOP 10 req_id, transaction_id, merchant_transaction_id, merchant_id
	FROM dbo.merchant_statement_vnd_request WITH(NOLOCK)
	ORDER BY req_id
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantStatementVNDInsert]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spPGMerchantStatementVNDInsert]
(
	@req_id bigint
)
AS
BEGIN
/*
	select * from merchant_statement_vnd_request WITH(NOLOCK)
	
	EXEC spPGMerchantStatementVNDInsert @req_id=6
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	---------------------------------------------------------------------------------------------
	DECLARE @result_code int, @error_message varchar(1000)
		, @getdate datetime, @transaction_type varchar(50)
	---------------------------------------------------------------------------------------------
	-- rf_column_list gateway_statement_vnd,'@type'
	-- rf_column_list merchant_statement_vnd, '@='
	-- rf_column_list merchant_transaction_history_fundin_vnd, '@='
	DECLARE @statement_type varchar(20), @statement_group varchar(20), @transaction_id varchar(50), @merchant_transaction_id varchar(50)
		, @merchant_code varchar(20), @merchant_id varchar(10), @merchant_name nvarchar(50), @statement_amount decimal(18,4), @request_date datetime
		, @request_url varchar(2000), @currency varchar(10), @merchant_language varchar(5), @bank_code varchar(10), @ip_address varchar(50)
		, @bank_name nvarchar(50), @bank_account_no varchar(50), @bank_account_name nvarchar(100), @bank_branch varchar(50), @bank_city varchar(50)
		, @bank_province varchar(50), @pg_id varchar(50), @pg_name nvarchar(200), @transaction_status varchar(20), @date_stamp_req datetime
		, @payment_channel_id varchar(20), @payment_channel_id_vendor varchar(20), @payment_channel_name nvarchar(200), @pg_merchant_id varchar(20)
		, @pg_balance_id varchar(50), @transaction_note varchar(500), @date_stamp datetime, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4), @gateway_fee_type varchar(50)
		, @gateway_balance_before decimal(18,4), @gateway_amount_debit decimal(18,4), @gateway_amount_credit decimal(18,4)
		, @gateway_balance_after decimal(18,4), @bank_fee decimal(18,4)
		, @merchant_balance_before decimal(18,4), @merchant_balance_after decimal(18,4)
		, @merchant_amount_debit decimal(18,4), @merchant_amount_credit decimal(18,4)		
	---------------------------------------------------------------------------------------------
	-- Get
	---------------------------------------------------------------------------------------------
	SELECT @transaction_id = transaction_id, @statement_type = statement_type
	FROM dbo.merchant_statement_vnd_request WITH(NOLOCK)
	WHERE req_id = @req_id

	IF @statement_type NOT IN ('FUNDIN','FUNDOUT')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Statement Type invalid'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- FUND IN
	---------------------------------------------------------------------------------------------
	IF @statement_type = 'FUNDIN'
	BEGIN
		SELECT	@statement_group = 'FUNDIN'

		SELECT	@merchant_transaction_id = merchant_transaction_id,
				@merchant_code = merchant_code,
				@merchant_id = merchant_id,
				@merchant_name = merchant_name,
				@statement_amount = amount,
				@request_date = request_date,
				@request_url = request_url,
				@currency = currency,
				@merchant_language = merchant_language,
				@bank_code = bank_code,
				@ip_address = ip_address,				
				@bank_name = '',
				@bank_account_no = '',
				@bank_account_name = '',
				@bank_branch = '',
				@bank_city = '',
				@bank_province = '',
				@pg_id = pg_id,
				@pg_name = pg_name,
				@transaction_status = transaction_status,
				@date_stamp_req = date_stamp_req,
				@payment_channel_id = payment_channel_id,
				@payment_channel_id_vendor = payment_channel_id_vendor,
				@payment_channel_name = payment_channel_name,
				@pg_merchant_id = pg_merchant_id,
				@transaction_note = transaction_note,
				@gateway_fee = gateway_fee,
				@gateway_percent = gateway_percent,
				@gateway_fee_type = ''
		FROM dbo.merchant_transaction_history_fundin_vnd WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		SELECT @pg_balance_id = pg_balance_id FROM dbo.payment_gateway_balance WITH(NOLOCK) WHERE pg_merchant_id = @pg_merchant_id AND currency = @currency

		SELECT @merchant_code = merchant_code FROM dbo.merchant_list WITH(NOLOCK) WHERE merchant_id = @merchant_id

		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_statement_vnd WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				BEGIN TRY
				BEGIN TRANSACTION

				UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_VND'
			
				SET @getdate = dbo.fnGetDateGMT7()

				UPDATE dbo.merchant_master_balance
				SET @merchant_amount_credit = @statement_amount - @gateway_fee,
					@merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
					@merchant_balance_after = @merchant_balance_before + @merchant_amount_credit,
					merchant_balance_fundin = merchant_balance_fundin + @merchant_amount_credit,
					merchant_daily_fundin = merchant_daily_fundin + @merchant_amount_credit,
					date_updated = @getdate
				WHERE merchant_code = @merchant_code
				AND currency = @currency

				INSERT INTO dbo.merchant_statement_vnd(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_name, @pg_merchant_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @merchant_balance_before, 0.00, @merchant_amount_credit, @merchant_balance_after, 0.00)

				------------------------------------------------------------------------------------------------------------------------
				SET @gateway_fee = 0.00

				UPDATE dbo.payment_gateway_balance
				SET @gateway_amount_credit = @statement_amount - @gateway_fee,
					@gateway_balance_before = pg_balance_fundin + pg_balance_fundout,
					@gateway_balance_after = @gateway_balance_before + @gateway_amount_credit,
					pg_balance_fundin = pg_balance_fundin + @gateway_amount_credit,
					date_updated = @getdate
				WHERE pg_balance_id = @pg_balance_id

				INSERT INTO dbo.gateway_statement_vnd(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_id_vendor, payment_channel_name, pg_merchant_id, pg_balance_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, gateway_balance_before, gateway_amount_debit, gateway_amount_credit, gateway_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_id_vendor, @payment_channel_name, @pg_merchant_id, @pg_balance_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @gateway_balance_before, 0.00, @gateway_amount_credit, @gateway_balance_after, 0.00)

				DELETE FROM dbo.merchant_statement_vnd_request WHERE req_id = @req_id

				COMMIT TRANSACTION

				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
					SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
					SELECT @result_code, @error_message
					RETURN
				END CATCH
			END
		END
	END
	---------------------------------------------------------------------------------------------
	-- FUND OUT
	---------------------------------------------------------------------------------------------
	ELSE IF @statement_type = 'FUNDOUT'
	BEGIN
		SELECT @statement_group = 'FUNDOUT'

		SELECT	@merchant_transaction_id = merchant_transaction_id,
				@merchant_code = merchant_code,
				@merchant_id = merchant_id,
				@merchant_name = merchant_name,
				@statement_amount = amount,
				@request_date = request_date,
				@request_url = request_url,
				@currency = currency,
				@merchant_language = merchant_language,
				@bank_code = bank_code,
				@ip_address = ip_address,				
				@bank_name = bank_name,
				@bank_account_no = bank_account_no,
				@bank_account_name = bank_account_name,
				@bank_branch = bank_branch,
				@bank_city = bank_city,
				@bank_province = bank_province,
				@pg_id = pg_id,
				@pg_name = pg_name,
				@transaction_status = transaction_status,
				@date_stamp_req = date_stamp_req,
				@payment_channel_id = payment_channel_id,
				@payment_channel_id_vendor = '',
				@payment_channel_name = payment_channel_name,
				@pg_merchant_id = pg_merchant_id,
				@transaction_note = transaction_note,
				@gateway_fee = gateway_fee,
				@gateway_percent = gateway_percent,
				@gateway_fee_type = ''
		FROM dbo.merchant_transaction_history_fundout_vnd WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		SELECT @pg_balance_id = pg_balance_id FROM dbo.payment_gateway_balance WITH(NOLOCK) WHERE pg_merchant_id = @pg_merchant_id AND currency = @currency

		SELECT @merchant_code = merchant_code FROM dbo.merchant_list WITH(NOLOCK) WHERE merchant_id = @merchant_id

		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_statement_vnd WITH(NOLOCK) WHERE transaction_id = @transaction_id)
			BEGIN
				BEGIN TRY
				BEGIN TRANSACTION

				UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'STATEMENT_VND'

				SET @getdate = dbo.fnGetDateGMT7()

				UPDATE dbo.merchant_master_balance
				SET @merchant_amount_debit = @statement_amount + @gateway_fee,
					@merchant_balance_before = merchant_balance_fundin + merchant_balance_fundout,
					@merchant_balance_after = @merchant_balance_before - @merchant_amount_debit,
					merchant_balance_fundout = merchant_balance_fundout - @merchant_amount_debit,
					merchant_outstanding_fundout = merchant_outstanding_fundout - @merchant_amount_debit,
					merchant_daily_fundout = merchant_daily_fundout + @merchant_amount_debit,
					date_updated = @getdate
				WHERE merchant_code = @merchant_code
				AND currency = @currency

				INSERT INTO dbo.merchant_statement_vnd(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, merchant_balance_before, merchant_amount_debit, merchant_amount_credit, merchant_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_name, @pg_merchant_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @merchant_balance_before, @merchant_amount_debit, 0.00, @merchant_balance_after, 0.00)

				------------------------------------------------------------------------------------------------------------------------
				SET @gateway_fee = 0.00

				UPDATE dbo.payment_gateway_balance
				SET @gateway_amount_debit = @statement_amount + @gateway_fee,
					@gateway_balance_before = pg_balance_fundin + pg_balance_fundout,
					@gateway_balance_after = @gateway_balance_before - @gateway_amount_debit,
					pg_balance_fundout = pg_balance_fundout - @gateway_amount_debit,
					date_updated = @getdate
				WHERE pg_balance_id = @pg_balance_id

				INSERT INTO dbo.gateway_statement_vnd(statement_type, statement_group, transaction_id, merchant_transaction_id
					, merchant_code, merchant_id, merchant_name, statement_amount, request_date, request_url, currency
					, merchant_language, bank_code, ip_address, bank_name, bank_account_no, bank_account_name
					, bank_branch, bank_city, bank_province
					, pg_id, pg_name, transaction_status, date_stamp_req, payment_channel_id, payment_channel_id_vendor, payment_channel_name, pg_merchant_id, pg_balance_id
					, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type
					, gateway_balance_before, gateway_amount_debit, gateway_amount_credit, gateway_balance_after, bank_fee)
				VALUES(@statement_type, @statement_group, @transaction_id, @merchant_transaction_id
					, @merchant_code, @merchant_id, @merchant_name, @statement_amount, @request_date, @request_url, @currency
					, @merchant_language, @bank_code, @ip_address, @bank_name, @bank_account_no, @bank_account_name
					, @bank_branch, @bank_city, @bank_province
					, @pg_id, @pg_name, @transaction_status, @date_stamp_req, @payment_channel_id, @payment_channel_id_vendor, @payment_channel_name, @pg_merchant_id, @pg_balance_id
					, @transaction_note, @getdate, @gateway_fee, @gateway_percent, @gateway_fee_type
					, @gateway_balance_before, @gateway_amount_debit, @gateway_amount_credit, @gateway_balance_after, 0.00)

				DELETE FROM dbo.merchant_statement_vnd_request WHERE req_id = @req_id

				COMMIT TRANSACTION
				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
					SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
					SELECT @result_code, @error_message
					RETURN
				END CATCH
			END
		END
	END

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundInCheck]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundInCheck]
(
	@merchant_id varchar(50),
	@amount decimal(18, 4),
	@currency varchar(10),
	@bank_code varchar(10),
	@log_id bigint
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @merchant_name nvarchar(200), @pg_id varchar(50), @pg_name nvarchar(200)
		, @merchant_status varchar(1), @payment_channel_id varchar(20)
		, @pg_pool_id varchar(50), @pg_merchant_id varchar(50), @pg_status varchar(1)
		, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4)
		, @gateway_fee_type varchar(50), @payment_channel_id_vendor varchar(20)
		, @merchant_amount_min decimal(18,4), @merchant_amount_max decimal(18,4)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 30500, @error_message = 'Merchant Setting Not Found - 0'
	---------------------------------------------------------------------------------------------
	IF @currency NOT IN ('IDR','THB','VND','MYR')
	BEGIN
		SELECT @result_code = 30001, @error_message = 'Currency Not Supported'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_name = merchant_name, @merchant_status = merchant_status
		, @payment_channel_id = payment_channel_id
	FROM dbo.merchant_list WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @merchant_status = 'N'
	BEGIN
		SELECT @result_code = 30500, @error_message = 'merchant status is N'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Min - Max Per Merchant
	---------------------------------------------------------------------------------------------
	SELECT @merchant_amount_min = fundin_amount_min, @merchant_amount_max = fundin_amount_max
	FROM dbo.merchant_setting WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @merchant_amount_min > @amount
	BEGIN
		SELECT @result_code = 30004, @error_message = 'Amount Invalid. Below Minimum Amount'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF @merchant_amount_max < @amount
	BEGIN
		SELECT @result_code = 30005, @error_message = 'Amount Invalid. Below Maximum Amount'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Pool of PG
	---------------------------------------------------------------------------------------------
	SELECT @pg_pool_id = pg_pool_id, @gateway_fee = fundin_fix_rate
		, @gateway_percent = fundin_fee_percent, @gateway_fee_type = gateway_fee_type
	FROM dbo.merchant_setting WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @gateway_fee_type = 'FIXED'
	BEGIN
		SELECT @gateway_percent = 0
	END
	ELSE IF @gateway_fee_type = 'PERCENT'
	BEGIN
		SELECT @gateway_fee = (@amount * @gateway_percent)/100
	END
	ELSE
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Setting gateway fee type not found'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT TOP 1 @pg_id = pg_id, @pg_merchant_id = pg_merchant_id, @pg_name = pg_name
		, @pg_status = pg_status, @payment_channel_id_vendor = pg_payment_channel_id_vendor
		, @error_message = pg_error_message
	FROM dbo.fnGetPaymentGatewayMerchantFundIn(@pg_pool_id, @payment_channel_id, @bank_code, @amount)
	---------------------------------------------------------------------------------------------
	IF @pg_status IN ('', 'N') OR @pg_status IS NULL
	BEGIN
		SELECT @result_code = 30500
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''

	SELECT @result_code, @error_message
	SELECT @pg_id 'pg_id', @pg_merchant_id 'pg_merchant_id', @gateway_fee_type 'gateway_fee_type'
		, @gateway_fee 'gateway_fee',  @payment_channel_id 'payment_channel_id'
		, @payment_channel_id_vendor 'payment_channel_id_vendor', @bank_code 'bank_code'
	RETURN
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundInInsertIDR]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundInInsertIDR]
(
	@merchant_id varchar(50),
	@merchant_pass_key varchar(50),
	@merchant_transaction_id varchar(50),
	@amount decimal(18, 4),
	@request_date datetime,
	@request_url varchar(2000),
	@return_url varchar(2000),
	@currency varchar(10),
	@language varchar(10),
	@bank_code varchar(10),
	@ip_address varchar(15),
	@log_id bigint
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50), @generator_no bigint, @date_stamp datetime
		, @merchant_name nvarchar(200), @pg_id varchar(50), @pg_name nvarchar(200)
		, @merchant_status varchar(1), @payment_channel_id varchar(20), @payment_channel_name varchar(200)
		, @pg_pool_id varchar(50), @pg_merchant_id varchar(50), @pg_status varchar(1)
		, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4)
		, @gateway_fee_type varchar(50), @payment_channel_id_vendor varchar(20)
		, @pg_pool_weight decimal(18,4), @pg_pool_score_current decimal(18,4)
		, @merchant_code varchar(50)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	IF @currency <> 'IDR'
	BEGIN
		SELECT @result_code = 30001, @error_message = 'Currency Not Supported'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF dbo.fnCheckDateInterval(@request_date) = 'N'
	BEGIN
		SELECT @result_code = 30002, @error_message = 'Invalid Date Time'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT merchant_transaction_id FROM dbo.merchant_transaction_fundin_idr_check WITH(NOLOCK)
		WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 30003, @error_message = 'Merchant Transaction ID Exists'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_name = merchant_name, @merchant_status = merchant_status
		, @payment_channel_id = payment_channel_id, @payment_channel_name = payment_channel_name
		, @merchant_code = merchant_code
	FROM dbo.merchant_list WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @merchant_status = 'N'
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Status is N'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Pool of PG
	---------------------------------------------------------------------------------------------
	SELECT @pg_pool_id = pg_pool_id, @gateway_fee = fundin_fix_rate
		, @gateway_percent = fundin_fee_percent, @gateway_fee_type = gateway_fee_type
	FROM dbo.merchant_setting WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @gateway_fee_type = 'FIXED'
	BEGIN
		SELECT @gateway_percent = 0
	END
	ELSE IF @gateway_fee_type = 'PERCENT'
	BEGIN
		SELECT @gateway_fee = (@amount * @gateway_percent)/100
	END
	ELSE
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Setting gateway fee type Not Found'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT TOP 1 @pg_id = pg_id, @pg_merchant_id = pg_merchant_id, @pg_name = pg_name
		, @pg_status = pg_status, @payment_channel_id_vendor = pg_payment_channel_id_vendor
		, @pg_pool_weight =  pg_pool_weight, @pg_pool_score_current = pg_pool_score_current
		, @error_message = pg_error_message
	FROM dbo.fnGetPaymentGatewayMerchantFundIn(@pg_pool_id, @payment_channel_id, @bank_code, @amount)
	---------------------------------------------------------------------------------------------
	IF @pg_status IN ('', 'N') OR @pg_status IS NULL
	BEGIN
		SELECT @result_code = 30500
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()

		BEGIN TRANSACTION
		
		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_IN_IDR'

		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @transaction_id = generator_code + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'FUND_IN' AND currency = 'IDR'

		INSERT INTO dbo.merchant_transaction_fundin_idr_check(merchant_transaction_id, merchant_id, date_stamp
			, transaction_id)
		VALUES(@merchant_transaction_id, @merchant_id, @date_stamp
			, @transaction_id)

		INSERT INTO [dbo].[merchant_transaction_pending_fundin_idr]([transaction_id], [merchant_transaction_id]
			, [merchant_id], [merchant_name], [amount], [request_date], [request_url], [return_url]
			, [currency], [merchant_language], [bank_code], [ip_address], [pg_id], [pg_name]
			, [transaction_status], [date_stamp], [payment_channel_id], [payment_channel_name]
			, [pg_merchant_id], [gateway_fee], [gateway_percent], [gateway_fee_type]
			, payment_channel_id_vendor, pg_pool_id, pg_pool_weight, pg_pool_score
			, merchant_code, log_id)
		VALUES(@transaction_id, @merchant_transaction_id
			, @merchant_id, @merchant_name, @amount, @request_date, @request_url, @return_url
			, @currency, @language, @bank_code, @ip_address, @pg_id, @pg_name
			, 'PENDING', @date_stamp, @payment_channel_id, @payment_channel_name
			, @pg_merchant_id, @gateway_fee, @gateway_percent, @gateway_fee_type
			, @payment_channel_id_vendor, @pg_pool_id, @pg_pool_weight, @pg_pool_score_current
			, @merchant_code, @log_id)

		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		SELECT @pg_id, @pg_merchant_id, @transaction_id, @gateway_fee_type, @gateway_fee
			, @payment_channel_id, @payment_channel_id_vendor
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundInInsertMYR]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundInInsertMYR]
(
	@merchant_id varchar(50),
	@merchant_pass_key varchar(50),
	@merchant_transaction_id varchar(50),
	@amount decimal(18, 4),
	@request_date datetime,
	@request_url varchar(2000),
	@return_url varchar(2000),
	@currency varchar(10),
	@language varchar(10),
	@bank_code varchar(10),
	@ip_address varchar(15),
	@log_id bigint
)
AS
BEGIN
/*
	
	rf_param spPGMerchantTransactionFundInInsertMYR

	declare @getdate datetime
	set @getdate = dateadd(minute,3,dbo.fnGetDateGMT7())
	EXEC spPGMerchantTransactionFundInInsertMYR @merchant_id='1B90353613', @merchant_pass_key='5480F2AA9F', @merchant_transaction_id='SQLVND001', @amount=10005.00, @request_date=@getdate, @request_url='https://localhost:3000/depositcb', @return_url='https://
localhost:3000/depositresult', @currency='MYR', @language='en-US', @bank_code='ACB', @ip_address='127.0.0.1'

	select * from dbo.merchant_list with (nolock) where merchant_id = '1B90353613'
	select * from dbo.merchant_transaction_pending_fundin_myr with (nolock) where merchant_id = '1B90353613'
	select * from dbo.merchant_transaction_history_fundin_myr with (nolock) where merchant_id = '1B90353613'

*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50), @generator_no bigint, @date_stamp datetime
		, @merchant_code varchar(20), @merchant_name nvarchar(200), @pg_id varchar(50), @pg_name nvarchar(200)
		, @merchant_status varchar(1), @payment_channel_id varchar(20), @payment_channel_name varchar(200)
		, @pg_pool_id varchar(50), @pg_merchant_id varchar(50), @pg_status varchar(1)
		, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4)
		, @gateway_fee_type varchar(50), @payment_channel_id_vendor varchar(20)
		, @pg_pool_weight decimal(18,4), @pg_pool_score_current decimal(18,4)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	IF @currency <> 'MYR'
	BEGIN
		SELECT @result_code = 30001, @error_message = 'Currency Not Supported'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF dbo.fnCheckDateInterval(@request_date) = 'N'
	BEGIN
		SELECT @result_code = 30002, @error_message = 'Invalid Date Time'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT merchant_transaction_id FROM dbo.merchant_transaction_fundin_myr_check WITH(NOLOCK)
		WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 30003, @error_message = 'Merchant Transaction ID Exists'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_name = merchant_name, @merchant_status = merchant_status
		, @payment_channel_id = payment_channel_id, @payment_channel_name = payment_channel_name
		, @merchant_code = merchant_code
	FROM dbo.merchant_list WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @merchant_status = 'N'
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Status is N'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Pool of PG
	---------------------------------------------------------------------------------------------
	SELECT @pg_pool_id = pg_pool_id, @gateway_fee = fundin_fix_rate
		, @gateway_percent = fundin_fee_percent, @gateway_fee_type = gateway_fee_type
	FROM dbo.merchant_setting WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @gateway_fee_type = 'FIXED'
	BEGIN
		SELECT @gateway_percent = 0
	END
	ELSE IF @gateway_fee_type = 'PERCENT'
	BEGIN
		SELECT @gateway_fee = (@amount * @gateway_percent)/100
	END
	ELSE
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Setting gateway fee type Not Found'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT TOP 1 @pg_id = pg_id, @pg_merchant_id = pg_merchant_id, @pg_name = pg_name
		, @pg_status = pg_status, @payment_channel_id_vendor = pg_payment_channel_id_vendor
		, @pg_pool_weight =  pg_pool_weight, @pg_pool_score_current = pg_pool_score_current
		, @error_message = pg_error_message
	FROM dbo.fnGetPaymentGatewayMerchantFundIn(@pg_pool_id, @payment_channel_id, @bank_code, @amount)
	---------------------------------------------------------------------------------------------
	IF @pg_status IN ('', 'N') OR @pg_status IS NULL
	BEGIN
		SELECT @result_code = 30500
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_IN_MYR'

		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @transaction_id = generator_code + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'FUND_IN' AND currency = 'MYR'

		INSERT INTO dbo.merchant_transaction_fundin_myr_check(merchant_transaction_id, merchant_id, date_stamp
			, transaction_id)
		VALUES(@merchant_transaction_id, @merchant_id, @date_stamp
			, @transaction_id)

		INSERT INTO dbo.merchant_transaction_pending_fundin_myr(transaction_id, merchant_transaction_id
			, merchant_code, merchant_id, merchant_name, amount, request_date, request_url, return_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp, payment_channel_id, payment_channel_name
			, pg_merchant_id, gateway_fee, gateway_percent, gateway_fee_type
			, payment_channel_id_vendor, pg_pool_id, pg_pool_weight, pg_pool_score
			, log_id)
		VALUES(@transaction_id, @merchant_transaction_id
			, @merchant_code, @merchant_id, @merchant_name, @amount, @request_date, @request_url, @return_url
			, @currency, @language, @bank_code, @ip_address, @pg_id, @pg_name
			, 'PENDING', @date_stamp, @payment_channel_id, @payment_channel_name
			, @pg_merchant_id, @gateway_fee, @gateway_percent, @gateway_fee_type
			, @payment_channel_id_vendor, @pg_pool_id, @pg_pool_weight, @pg_pool_score_current
			, @log_id)


		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		SELECT @pg_id, @pg_merchant_id, @transaction_id, @gateway_fee_type, @gateway_fee
			, @payment_channel_id, @payment_channel_id_vendor
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundInInsertTHB]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundInInsertTHB]
(
	@merchant_id varchar(50),
	@merchant_pass_key varchar(50),
	@merchant_transaction_id varchar(50),
	@amount decimal(18, 4),
	@request_date datetime,
	@request_url varchar(2000),
	@return_url varchar(2000),
	@currency varchar(10),
	@language varchar(10),
	@bank_code varchar(10),
	@ip_address varchar(15),
	@log_id bigint
)
AS
BEGIN
/*
	
	rf_param spPGMerchantTransactionFundInInsertTHB

	declare @getdate datetime
	set @getdate = dateadd(minute,3,dbo.fnGetDateGMT7())
	EXEC spPGMerchantTransactionFundInInsertTHB @merchant_id='1B90353613', @merchant_pass_key='5480F2AA9F', @merchant_transaction_id='SQLVND001', @amount=10005.00, @request_date=@getdate, @request_url='https://localhost:3000/depositcb', @return_url='https://
localhost:3000/depositresult', @currency='THB', @language='en-US', @bank_code='ACB', @ip_address='127.0.0.1'

	select * from dbo.merchant_list with (nolock) where merchant_id = '1B90353613'
	select * from dbo.merchant_transaction_pending_fundin_thb with (nolock) where merchant_id = '1B90353613'
	select * from dbo.merchant_transaction_history_fundin_thb with (nolock) where merchant_id = '1B90353613'

*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50), @generator_no bigint, @date_stamp datetime
		, @merchant_code varchar(20), @merchant_name nvarchar(200), @pg_id varchar(50), @pg_name nvarchar(200)
		, @merchant_status varchar(1), @payment_channel_id varchar(20), @payment_channel_name varchar(200)
		, @pg_pool_id varchar(50), @pg_merchant_id varchar(50), @pg_status varchar(1)
		, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4)
		, @gateway_fee_type varchar(50), @payment_channel_id_vendor varchar(20)
		, @pg_pool_weight decimal(18,4), @pg_pool_score_current decimal(18,4)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	IF @currency <> 'THB'
	BEGIN
		SELECT @result_code = 30001, @error_message = 'Currency Not Supported'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF dbo.fnCheckDateInterval(@request_date) = 'N'
	BEGIN
		SELECT @result_code = 30002, @error_message = 'Invalid Date Time'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT merchant_transaction_id FROM dbo.merchant_transaction_fundin_thb_check WITH(NOLOCK)
		WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 30003, @error_message = 'Merchant Transaction ID Exists'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_name = merchant_name, @merchant_status = merchant_status
		, @payment_channel_id = payment_channel_id, @payment_channel_name = payment_channel_name
		, @merchant_code = merchant_code
	FROM dbo.merchant_list WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @merchant_status = 'N'
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Status is N'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Pool of PG
	---------------------------------------------------------------------------------------------
	SELECT @pg_pool_id = pg_pool_id, @gateway_fee = fundin_fix_rate
		, @gateway_percent = fundin_fee_percent, @gateway_fee_type = gateway_fee_type
	FROM dbo.merchant_setting WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @gateway_fee_type = 'FIXED'
	BEGIN
		SELECT @gateway_percent = 0
	END
	ELSE IF @gateway_fee_type = 'PERCENT'
	BEGIN
		SELECT @gateway_fee = (@amount * @gateway_percent)/100
	END
	ELSE
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Setting gateway fee type Not Found'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT TOP 1 @pg_id = pg_id, @pg_merchant_id = pg_merchant_id, @pg_name = pg_name
		, @pg_status = pg_status, @payment_channel_id_vendor = pg_payment_channel_id_vendor
		, @pg_pool_weight =  pg_pool_weight, @pg_pool_score_current = pg_pool_score_current
		, @error_message = pg_error_message
	FROM dbo.fnGetPaymentGatewayMerchantFundIn(@pg_pool_id, @payment_channel_id, @bank_code, @amount)
	---------------------------------------------------------------------------------------------
	IF @pg_status IN ('', 'N') OR @pg_status IS NULL
	BEGIN
		SELECT @result_code = 30500
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_IN_THB'

		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @transaction_id = generator_code + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'FUND_IN' AND currency = 'THB'

		INSERT INTO dbo.merchant_transaction_fundin_thb_check(merchant_transaction_id, merchant_id, date_stamp
			, transaction_id)
		VALUES(@merchant_transaction_id, @merchant_id, @date_stamp
			, @transaction_id)

		INSERT INTO dbo.merchant_transaction_pending_fundin_thb(transaction_id, merchant_transaction_id
			, merchant_code, merchant_id, merchant_name, amount, request_date, request_url, return_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp, payment_channel_id, payment_channel_name
			, pg_merchant_id, gateway_fee, gateway_percent, gateway_fee_type
			, payment_channel_id_vendor, pg_pool_id, pg_pool_weight, pg_pool_score
			, log_id)
		VALUES(@transaction_id, @merchant_transaction_id
			, @merchant_code, @merchant_id, @merchant_name, @amount, @request_date, @request_url, @return_url
			, @currency, @language, @bank_code, @ip_address, @pg_id, @pg_name
			, 'PENDING', @date_stamp, @payment_channel_id, @payment_channel_name
			, @pg_merchant_id, @gateway_fee, @gateway_percent, @gateway_fee_type
			, @payment_channel_id_vendor, @pg_pool_id, @pg_pool_weight, @pg_pool_score_current
			, @log_id)


		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		SELECT @pg_id, @pg_merchant_id, @transaction_id, @gateway_fee_type, @gateway_fee
			, @payment_channel_id, @payment_channel_id_vendor
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundInInsertVND]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundInInsertVND]
(
	@merchant_id varchar(50),
	@merchant_pass_key varchar(50),
	@merchant_transaction_id varchar(50),
	@amount decimal(18, 4),
	@request_date datetime,
	@request_url varchar(2000),
	@return_url varchar(2000),
	@currency varchar(10),
	@language varchar(10),
	@bank_code varchar(10),
	@ip_address varchar(15),
	@log_id bigint
)
AS
BEGIN
/*
	
	rf_param spPGMerchantTransactionFundInInsertVND

	declare @getdate datetime
	set @getdate = dateadd(minute,3,dbo.fnGetDateGMT7())
	EXEC spPGMerchantTransactionFundInInsertVND @merchant_id='1B90353613', @merchant_pass_key='5480F2AA9F', @merchant_transaction_id='SQLVND001', @amount=10005.00, @request_date=@getdate, @request_url='https://localhost:3000/depositcb', @return_url='https://
localhost:3
000/depositresult', @currency='VND', @language='en-US', @bank_code='ACB', @ip_address='127.0.0.1'

	select * from dbo.merchant_list with (nolock) where merchant_id = '1B90353613'
	select * from dbo.merchant_transaction_pending_fundin_vnd with (nolock) where merchant_id = '1B90353613'
	select * from dbo.merchant_transaction_history_fundin_vnd with (nolock) where merchant_id = '1B90353613'

*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50), @generator_no bigint, @date_stamp datetime
		, @merchant_code varchar(20), @merchant_name nvarchar(200), @pg_id varchar(50), @pg_name nvarchar(200)
		, @merchant_status varchar(1), @payment_channel_id varchar(20), @payment_channel_name varchar(200)
		, @pg_pool_id varchar(50), @pg_merchant_id varchar(50), @pg_status varchar(1)
		, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4)
		, @gateway_fee_type varchar(50), @payment_channel_id_vendor varchar(20)
		, @pg_pool_weight decimal(18,4), @pg_pool_score_current decimal(18,4)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	IF @currency <> 'VND'
	BEGIN
		SELECT @result_code = 30001, @error_message = 'Currency Not Supported'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF dbo.fnCheckDateInterval(@request_date) = 'N'
	BEGIN
		SELECT @result_code = 30002, @error_message = 'Invalid Date Time'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT merchant_transaction_id FROM dbo.merchant_transaction_fundin_vnd_check WITH(NOLOCK)
		WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 30003, @error_message = 'Merchant Transaction ID Exists'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_name = merchant_name, @merchant_status = merchant_status
		, @payment_channel_id = payment_channel_id, @payment_channel_name = payment_channel_name
		, @merchant_code = merchant_code
	FROM dbo.merchant_list WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @merchant_status = 'N'
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Status is N'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Pool of PG
	---------------------------------------------------------------------------------------------
	SELECT @pg_pool_id = pg_pool_id, @gateway_fee = fundin_fix_rate
		, @gateway_percent = fundin_fee_percent, @gateway_fee_type = gateway_fee_type
	FROM dbo.merchant_setting WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @gateway_fee_type = 'FIXED'
	BEGIN
		SELECT @gateway_percent = 0
	END
	ELSE IF @gateway_fee_type = 'PERCENT'
	BEGIN
		SELECT @gateway_fee = (@amount * @gateway_percent)/100
	END
	ELSE
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Setting gateway fee type Not Found'
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT TOP 1 @pg_id = pg_id, @pg_merchant_id = pg_merchant_id, @pg_name = pg_name
		, @pg_status = pg_status, @payment_channel_id_vendor = pg_payment_channel_id_vendor
		, @pg_pool_weight =  pg_pool_weight, @pg_pool_score_current = pg_pool_score_current
		, @error_message = pg_error_message
	FROM dbo.fnGetPaymentGatewayMerchantFundIn(@pg_pool_id, @payment_channel_id, @bank_code, @amount)
	---------------------------------------------------------------------------------------------
	IF @pg_status IN ('', 'N') OR @pg_status IS NULL
	BEGIN
		SELECT @result_code = 30500
		EXEC spPGMerchantFundInFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_IN_VND'

		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @transaction_id = generator_code + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'FUND_IN' AND currency = 'VND'

		INSERT INTO dbo.merchant_transaction_fundin_vnd_check(merchant_transaction_id, merchant_id, date_stamp
			, transaction_id)
		VALUES(@merchant_transaction_id, @merchant_id, @date_stamp
			, @transaction_id)

		INSERT INTO dbo.merchant_transaction_pending_fundin_vnd(transaction_id, merchant_transaction_id
			, merchant_code, merchant_id, merchant_name, amount, request_date, request_url, return_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp, payment_channel_id, payment_channel_name
			, pg_merchant_id, gateway_fee, gateway_percent, gateway_fee_type
			, payment_channel_id_vendor, pg_pool_id, pg_pool_weight, pg_pool_score
			, log_id)
		VALUES(@transaction_id, @merchant_transaction_id
			, @merchant_code, @merchant_id, @merchant_name, @amount, @request_date, @request_url, @return_url
			, @currency, @language, @bank_code, @ip_address, @pg_id, @pg_name
			, 'PENDING', @date_stamp, @payment_channel_id, @payment_channel_name
			, @pg_merchant_id, @gateway_fee, @gateway_percent, @gateway_fee_type
			, @payment_channel_id_vendor, @pg_pool_id, @pg_pool_weight, @pg_pool_score_current
			, @log_id)


		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		SELECT @pg_id, @pg_merchant_id, @transaction_id, @gateway_fee_type, @gateway_fee
			, @payment_channel_id, @payment_channel_id_vendor
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundInSettleIDR]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundInSettleIDR]
(
	@transaction_id varchar(50),
	@transaction_status varchar(20),
	@transaction_note varchar(500),
	@trigger_by varchar(20)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @date_stamp datetime, @payment_channel_id varchar(20)
		, @merchant_id varchar(10), @merchant_transaction_id varchar(50)
		, @gateway_transaction_status varchar(20), @transaction_hash varchar(50)
		, @currency varchar(10), @amount decimal(18,4), @key_tran varchar(50)
		, @log_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @payment_channel_id = ''
		, @gateway_transaction_status = CASE WHEN @transaction_status = 'FAILED' AND @transaction_note <> '' THEN 'ERROR' ELSE @transaction_status END
	---------------------------------------------------------------------------------------------
	SELECT @key_tran = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'TRANSACTION_KEY'
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundin_idr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF (SELECT transaction_status FROM dbo.merchant_transaction_history_fundin_idr WITH(NOLOCK)
				WHERE transaction_id = @transaction_id) = 'FAILED'
			BEGIN
				BEGIN TRY
					SELECT @merchant_id = merchant_id, @merchant_transaction_id = merchant_transaction_id
						, @currency = currency, @amount = amount
					FROM dbo.merchant_transaction_pending_fundin_vnd WITH(NOLOCK)
					WHERE transaction_id = @transaction_id

					SELECT @date_stamp = dbo.fnGetDateGMT7() 
					SELECT @transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + transaction_id
						+ merchant_transaction_id + currency + @transaction_status
						+ FORMAT(amount, '#0.###0') + merchant_id + @key_tran
					FROM dbo.merchant_transaction_history_fundin_vnd WITH(NOLOCK)
					WHERE transaction_id = @transaction_id

					SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

					BEGIN TRANSACTION

					UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_IN_SETTLE_IDR'

					INSERT INTO dbo.merchant_transaction_history_fundin_idr_log(
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, return_url, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
						, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
						, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score, transaction_hash
						, merchant_code, req_log_id
					)
					SELECT
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, return_url, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
						, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
						, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score, transaction_hash
						, merchant_code, log_id
					FROM dbo.merchant_transaction_history_fundin_idr WITH(NOLOCK)
					WHERE transaction_id = @transaction_id

					UPDATE dbo.merchant_transaction_history_fundin_idr
					SET transaction_status = @transaction_status
						, date_stamp = dbo.fnGetDateGMT7()
						, @merchant_id = merchant_id
						, @merchant_transaction_id = merchant_transaction_id
						, gateway_transaction_status = @gateway_transaction_status
						, trigger_by = @trigger_by
						, transaction_hash = @transaction_hash
					WHERE transaction_id = @transaction_id

					INSERT INTO dbo.merchant_statement_idr_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
					VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDIN')

					COMMIT TRANSACTION
				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
				END CATCH
			END
		END

		SELECT @result_code = 39999, @error_message = 'Transaction ID in History'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundin_idr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Transaction ID Not Found or Already Settle'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @payment_channel_id = payment_channel_id, @merchant_id = merchant_id
		, @merchant_transaction_id = merchant_transaction_id
		, @currency = currency, @amount = amount, @log_id = log_id
	FROM dbo.merchant_transaction_pending_fundin_idr WITH(NOLOCK)
	WHERE transaction_id = @transaction_id
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()
		SELECT @transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + @transaction_id
				+ @merchant_transaction_id + @currency + @transaction_status
				+ FORMAT(@amount, '#0.###0') + @merchant_id + @key_tran

		SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_IN_SETTLE_IDR'

		INSERT INTO dbo.merchant_transaction_history_fundin_idr(transaction_id, merchant_transaction_id
			, merchant_code, merchant_id, merchant_name, amount, request_date, request_url, return_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, transaction_note, date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
			, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
			, transaction_hash, log_id
		)
		SELECT transaction_id, merchant_transaction_id
			, merchant_code, merchant_id, merchant_name, amount, request_date, request_url, return_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, @transaction_status, date_stamp, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, @transaction_note, @date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, @gateway_transaction_status
			, payment_channel_id_vendor, @trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
			, @transaction_hash, log_id
		FROM dbo.merchant_transaction_pending_fundin_idr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.merchant_transaction_notify_fundin_idr(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, transaction_status
			, request_url, date_stamp, payment_channel_id, trigger_by, transaction_hash)
		SELECT transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, @transaction_status
			, request_url, @date_stamp, payment_channel_id, @trigger_by, @transaction_hash
		FROM dbo.merchant_transaction_pending_fundin_idr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.payment_gateway_fundin_statistic_request(date_transaction, currency
			, pg_id, bank_code, transaction_amount, transaction_status, date_stamp
			, pg_pool_id, pg_pool_score)
		SELECT date_stamp, currency
			, pg_id, bank_code, amount, @transaction_status, @date_stamp
			, pg_pool_id, pg_pool_score
		FROM dbo.merchant_transaction_pending_fundin_idr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id
		
		------------------------------------------------------------------------------------------
		IF @transaction_status = 'SUCCESS'
		BEGIN
			INSERT INTO dbo.merchant_statement_idr_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
			VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDIN')
		END
		ELSE
		BEGIN
			EXEC spPGMerchantFundInFailedLog @log_id, @transaction_note
		END
		------------------------------------------------------------------------------------------
		
		DELETE FROM dbo.merchant_transaction_pending_fundin_idr WHERE transaction_id = @transaction_id

		IF @payment_channel_id = 'VA'
		BEGIN
			DELETE FROM dbo.merchant_transaction_virtual_account_idr WHERE transaction_id = @transaction_id
		END

		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundInSettleMYR]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundInSettleMYR]
(
	@transaction_id varchar(50),
	@transaction_status varchar(20),
	@transaction_note varchar(500),
	@trigger_by varchar(20)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @date_stamp datetime
		, @merchant_id varchar(10), @merchant_transaction_id varchar(50)
		, @gateway_transaction_status varchar(20), @transaction_hash varchar(50)
		, @currency varchar(10), @amount decimal(18,4), @key_tran varchar(50)
		, @log_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
		, @gateway_transaction_status = CASE WHEN @transaction_status = 'FAILED' AND @transaction_note <> '' THEN 'ERROR' ELSE @transaction_status END
	---------------------------------------------------------------------------------------------
	SELECT @key_tran = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'TRANSACTION_KEY'
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundin_myr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF (SELECT transaction_status FROM dbo.merchant_transaction_history_fundin_myr WITH(NOLOCK)
				WHERE transaction_id = @transaction_id) = 'FAILED'
			BEGIN
				SELECT @merchant_id = merchant_id, @merchant_transaction_id = merchant_transaction_id
					, @currency = currency, @amount = amount
				FROM dbo.merchant_transaction_pending_fundin_myr WITH(NOLOCK)
				WHERE transaction_id = @transaction_id

				SELECT @date_stamp = dbo.fnGetDateGMT7(), 
					@transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + transaction_id
					+ merchant_transaction_id + currency + @transaction_status
					+ FORMAT(amount, '#0.###0') + merchant_id + @key_tran
				FROM dbo.merchant_transaction_history_fundin_myr WITH(NOLOCK)
				WHERE transaction_id = @transaction_id

				SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

				BEGIN TRY
					BEGIN TRANSACTION

					UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_IN_SETTLE_MYR'

					INSERT INTO dbo.merchant_transaction_history_fundin_myr_log(
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, return_url, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
						, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
						, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score, transaction_hash
						, merchant_code, req_log_id
					)
					SELECT
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, return_url, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
						, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
						, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score, transaction_hash
						, merchant_code, log_id
					FROM dbo.merchant_transaction_history_fundin_myr WITH(NOLOCK)
					WHERE transaction_id = @transaction_id

					UPDATE dbo.merchant_transaction_history_fundin_myr
					SET transaction_status = @transaction_status
						, date_stamp = dbo.fnGetDateGMT7()
						, @merchant_id = merchant_id
						, @merchant_transaction_id = merchant_transaction_id
						, gateway_transaction_status = @gateway_transaction_status
						, trigger_by = @trigger_by
						, transaction_hash = @transaction_hash
					WHERE transaction_id = @transaction_id

					INSERT INTO dbo.merchant_statement_myr_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
					VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDIN')

					COMMIT TRANSACTION
				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
				END CATCH
			END
		END

		SELECT @result_code = 39999, @error_message = 'Transaction ID in History'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundin_myr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Transaction ID Not Found or Already Settle'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_id = merchant_id, @merchant_transaction_id = merchant_transaction_id
		, @currency = currency, @amount = amount, @log_id = log_id
	FROM dbo.merchant_transaction_pending_fundin_myr WITH(NOLOCK)
	WHERE transaction_id = @transaction_id
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()
		SELECT @transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + @transaction_id
				+ @merchant_transaction_id + @currency + @transaction_status
				+ FORMAT(@amount, '#0.###0') + @merchant_id + @key_tran

		SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_IN_SETTLE_MYR'

		INSERT INTO dbo.merchant_transaction_history_fundin_myr(transaction_id, merchant_transaction_id
			, merchant_code, merchant_id, merchant_name, amount, request_date, request_url, return_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, transaction_note, date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
			, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
			, transaction_hash, log_id
		)
		SELECT transaction_id, merchant_transaction_id
			, merchant_code, merchant_id, merchant_name, amount, request_date, request_url, return_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, @transaction_status, date_stamp, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, @transaction_note, @date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, @gateway_transaction_status
			, payment_channel_id_vendor, @trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
			, @transaction_hash, log_id
		FROM dbo.merchant_transaction_pending_fundin_myr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.merchant_transaction_notify_fundin_myr(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, transaction_status
			, request_url, date_stamp, payment_channel_id, trigger_by, transaction_hash)
		SELECT transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, @transaction_status
			, request_url, @date_stamp, payment_channel_id, @trigger_by, @transaction_hash
		FROM dbo.merchant_transaction_pending_fundin_myr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.payment_gateway_fundin_statistic_request(date_transaction, currency
			, pg_id, bank_code, transaction_amount, transaction_status, date_stamp
			, pg_pool_id, pg_pool_score)
		SELECT date_stamp, currency
			, pg_id, bank_code, amount, @transaction_status, @date_stamp
			, pg_pool_id, pg_pool_score
		FROM dbo.merchant_transaction_pending_fundin_myr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id
		
		------------------------------------------------------------------------------------------
		IF @transaction_status = 'SUCCESS'
		BEGIN
			INSERT INTO dbo.merchant_statement_myr_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
			VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDIN')
		END
		ELSE
		BEGIN
			EXEC spPGMerchantFundInFailedLog @log_id, @transaction_note
		END
		------------------------------------------------------------------------------------------
		
		DELETE FROM dbo.merchant_transaction_pending_fundin_myr WHERE transaction_id = @transaction_id

		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundInSettleVND]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundInSettleVND]
(
	@transaction_id varchar(50),
	@transaction_status varchar(20),
	@transaction_note varchar(500),
	@trigger_by varchar(20)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @date_stamp datetime
		, @merchant_id varchar(10), @merchant_transaction_id varchar(50)
		, @gateway_transaction_status varchar(20), @transaction_hash varchar(50)
		, @currency varchar(10), @amount decimal(18,4), @key_tran varchar(50)
		, @log_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
		, @gateway_transaction_status = CASE WHEN @transaction_status = 'FAILED' AND @transaction_note <> '' THEN 'ERROR' ELSE @transaction_status END
	---------------------------------------------------------------------------------------------
	SELECT @key_tran = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'TRANSACTION_KEY'
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundin_vnd WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF (SELECT transaction_status FROM dbo.merchant_transaction_history_fundin_vnd WITH(NOLOCK)
				WHERE transaction_id = @transaction_id) = 'FAILED'
			BEGIN
				SELECT @merchant_id = merchant_id, @merchant_transaction_id = merchant_transaction_id
					, @currency = currency, @amount = amount
				FROM dbo.merchant_transaction_pending_fundin_vnd WITH(NOLOCK)
				WHERE transaction_id = @transaction_id

				SELECT @date_stamp = dbo.fnGetDateGMT7() 
				SELECT @transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + transaction_id
					+ merchant_transaction_id + currency + @transaction_status
					+ FORMAT(amount, '#0.###0') + merchant_id + @key_tran
				FROM dbo.merchant_transaction_history_fundin_vnd WITH(NOLOCK)
				WHERE transaction_id = @transaction_id

				SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

				BEGIN TRY
					BEGIN TRANSACTION

					UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_IN_SETTLE_VND'

					INSERT INTO dbo.merchant_transaction_history_fundin_vnd_log(
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, return_url, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
						, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
						, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score, transaction_hash
						, merchant_code, req_log_id
					)
					SELECT
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, return_url, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
						, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id
						, transaction_note, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score, transaction_hash
						, merchant_code, log_id
					FROM dbo.merchant_transaction_history_fundin_vnd WITH(NOLOCK)
					WHERE transaction_id = @transaction_id

					UPDATE dbo.merchant_transaction_history_fundin_vnd
					SET transaction_status = @transaction_status
						, date_stamp = @date_stamp
						, @merchant_id = merchant_id
						, @merchant_transaction_id = merchant_transaction_id
						, gateway_transaction_status = @gateway_transaction_status
						, trigger_by = @trigger_by
						, transaction_hash = @transaction_hash
					WHERE transaction_id = @transaction_id

					INSERT INTO dbo.merchant_statement_vnd_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
					VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDIN')

					COMMIT TRANSACTION
				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
				END CATCH
			END
		END

		SELECT @result_code = 39999, @error_message = 'Transaction ID in History'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundin_vnd WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Transaction ID Not Found or Already Settle'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_id = merchant_id, @merchant_transaction_id = merchant_transaction_id
		, @currency = currency, @amount = amount, @log_id = log_id
	FROM dbo.merchant_transaction_pending_fundin_vnd WITH(NOLOCK)
	WHERE transaction_id = @transaction_id
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()
		SELECT @transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + @transaction_id
				+ @merchant_transaction_id + @currency + @transaction_status
				+ FORMAT(@amount, '#0.###0') + @merchant_id + @key_tran

		SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_IN_SETTLE_VND'

		INSERT INTO dbo.merchant_transaction_history_fundin_vnd(transaction_id, merchant_transaction_id
			, merchant_code, merchant_id, merchant_name, amount, request_date, request_url, return_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp_req, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, transaction_note, date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
			, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
			, transaction_hash, log_id
		)
		SELECT transaction_id, merchant_transaction_id
			, merchant_code, merchant_id, merchant_name, amount, request_date, request_url, return_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, @transaction_status, date_stamp, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, @transaction_note, @date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, @gateway_transaction_status
			, payment_channel_id_vendor, @trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
			, @transaction_hash, log_id
		FROM dbo.merchant_transaction_pending_fundin_vnd WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.merchant_transaction_notify_fundin_vnd(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, transaction_status
			, request_url, date_stamp, payment_channel_id, trigger_by, transaction_hash)
		SELECT transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, @transaction_status
			, request_url, @date_stamp, payment_channel_id, @trigger_by, @transaction_hash
		FROM dbo.merchant_transaction_pending_fundin_vnd WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.payment_gateway_fundin_statistic_request(date_transaction, currency
			, pg_id, bank_code, transaction_amount, transaction_status, date_stamp
			, pg_pool_id, pg_pool_score)
		SELECT date_stamp, currency
			, pg_id, bank_code, amount, @transaction_status, @date_stamp
			, pg_pool_id, pg_pool_score
		FROM dbo.merchant_transaction_pending_fundin_vnd WITH(NOLOCK)
		WHERE transaction_id = @transaction_id
		
		------------------------------------------------------------------------------------------
		IF @transaction_status = 'SUCCESS'
		BEGIN
			INSERT INTO dbo.merchant_statement_vnd_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
			VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDIN')
		END
		ELSE
		BEGIN
			EXEC spPGMerchantFundInFailedLog @log_id, @transaction_note
		END
		------------------------------------------------------------------------------------------
		
		DELETE FROM dbo.merchant_transaction_pending_fundin_vnd WHERE transaction_id = @transaction_id

		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundOutCheck]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundOutCheck]
(
	@merchant_id varchar(50),
	@amount decimal(18, 4),
	@currency varchar(10),
	@bank_code varchar(10),
	@log_id bigint
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @merchant_name nvarchar(200), @pg_id varchar(50), @pg_name nvarchar(200)
		, @merchant_status varchar(1), @payment_channel_id varchar(20)
		, @pg_pool_id varchar(50), @pg_merchant_id varchar(50), @pg_status varchar(1)
		, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4)
		, @gateway_fee_type varchar(50), @payment_channel_id_vendor varchar(20)
		, @merchant_amount_min decimal(18,4), @merchant_amount_max decimal(18,4)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 30500, @error_message = 'Merchant Setting Not Found - 0'
	---------------------------------------------------------------------------------------------
	IF @currency NOT IN ('IDR','THB','VND','MYR')
	BEGIN
		SELECT @result_code = 30001, @error_message = 'Currency Not Supported'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_name = merchant_name, @merchant_status = merchant_status
		, @payment_channel_id = payment_channel_id
	FROM dbo.merchant_list WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @merchant_status = 'N'
	BEGIN
		SELECT @result_code = 30500, @error_message = 'merchant status is N'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Min - Max Per Merchant
	---------------------------------------------------------------------------------------------
	SELECT @merchant_amount_min = fundout_amount_min, @merchant_amount_max = fundout_amount_max
	FROM dbo.merchant_setting WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @merchant_amount_min > @amount
	BEGIN
		SELECT @result_code = 30004, @error_message = 'Amount Invalid. Below Minimum Amount'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF @merchant_amount_max < @amount
	BEGIN
		SELECT @result_code = 30005, @error_message = 'Amount Invalid. Above Maximum Amount'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Pool of PG
	---------------------------------------------------------------------------------------------
	SELECT @pg_pool_id = pg_pool_id, @gateway_fee = fundout_fix_rate
		, @gateway_percent = fundout_fee_percent, @gateway_fee_type = gateway_fee_type
	FROM dbo.merchant_setting WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @gateway_fee_type = 'FIXED'
	BEGIN
		SELECT @gateway_percent = 0
	END
	ELSE IF @gateway_fee_type = 'PERCENT'
	BEGIN
		SELECT @gateway_fee = (@amount * @gateway_percent)/100
	END
	ELSE
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Setting gateway fee type not found'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT TOP 1 @pg_id = pg_id, @pg_merchant_id = pg_merchant_id, @pg_name = pg_name
		, @pg_status = pg_status, @payment_channel_id_vendor = pg_payment_channel_id_vendor
		, @error_message = pg_error_message
	FROM dbo.fnGetPaymentGatewayMerchantFundOut(@pg_pool_id, @payment_channel_id, @bank_code, @amount)
	---------------------------------------------------------------------------------------------
	IF @pg_status IN ('', 'N') OR @pg_status IS NULL
	BEGIN
		SELECT @result_code = 30500
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''

	SELECT @result_code, @error_message
	SELECT @pg_id 'pg_id', @pg_merchant_id 'pg_merchant_id', @gateway_fee_type 'gateway_fee_type'
		, @gateway_fee 'gateway_fee',  @payment_channel_id 'payment_channel_id'
		, @payment_channel_id_vendor 'payment_channel_id_vendor', @bank_code 'bank_code'
	RETURN
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundOutInsertIDR]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundOutInsertIDR]
(
	@merchant_id varchar(50),
	@merchant_pass_key varchar(50),
	@merchant_transaction_id varchar(50),
	@amount decimal(18, 4),
	@request_date datetime,
	@request_url varchar(2000),
	@currency varchar(10),
	@language varchar(10),
	@bank_code varchar(10),
	@ip_address varchar(15),
	@bank_account_no varchar(50),
	@bank_account_name nvarchar(100),
	@bank_branch varchar(50),
	@bank_city varchar(50),
	@bank_province varchar(50),
	@log_id bigint
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50), @generator_no bigint, @date_stamp datetime
		, @merchant_name nvarchar(200), @pg_id varchar(50), @pg_name nvarchar(200)
		, @merchant_status varchar(1), @payment_channel_id varchar(20), @payment_channel_name varchar(200)
		, @pg_pool_id varchar(50), @pg_merchant_id varchar(50), @pg_status varchar(1)
		, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4)
		, @gateway_fee_type varchar(50), @merchant_balance_fundout decimal(18,4)
		, @payment_channel_id_vendor varchar(20)
		, @pg_pool_weight decimal(18,4), @pg_pool_score_current decimal(18,4)
		, @merchant_code varchar(50), @bank_name nvarchar(50)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	IF @currency <> 'IDR'
	BEGIN
		SELECT @result_code = 30001, @error_message = 'Currency Not Supported'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF dbo.fnCheckDateInterval(@request_date) = 'N'
	BEGIN
		SELECT @result_code = 30002, @error_message = 'Invalid Date Time'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT merchant_transaction_id FROM dbo.merchant_transaction_fundout_idr_check WITH(NOLOCK)
		WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 30003, @error_message = 'Merchant Transaction ID Exists'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_name = merchant_name, @merchant_status = merchant_status
		, @payment_channel_id = payment_channel_id, @payment_channel_name = payment_channel_name
		, @merchant_code = merchant_code
	FROM dbo.merchant_list WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @merchant_status = 'N'
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Status is N'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @bank_name = bank_name
	FROM dbo.master_bank WITH(NOLOCK)
	WHERE bank_code = @bank_code
	---------------------------------------------------------------------------------------------
	-- Pool of PG
	---------------------------------------------------------------------------------------------
	SELECT @pg_pool_id = pg_pool_id, @gateway_fee = fundout_fix_rate
		, @gateway_percent = fundout_fee_percent, @gateway_fee_type = gateway_fee_type
	FROM dbo.merchant_setting WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @gateway_fee_type = 'FIXED'
	BEGIN
		SELECT @gateway_percent = 0
	END
	ELSE IF @gateway_fee_type = 'PERCENT'
	BEGIN
		SELECT @gateway_fee = (@amount * @gateway_percent)/100
	END
	ELSE
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Setting gateway fee type Not Found'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT TOP 1 @pg_id = pg_id, @pg_merchant_id = pg_merchant_id, @pg_name = pg_name
		, @pg_status = pg_status, @payment_channel_id_vendor = pg_payment_channel_id_vendor
		, @pg_pool_weight =  pg_pool_weight, @pg_pool_score_current = pg_pool_score_current
		, @error_message = pg_error_message
	FROM dbo.fnGetPaymentGatewayMerchantFundOut(@pg_pool_id, @payment_channel_id, @bank_code, @amount)
	---------------------------------------------------------------------------------------------
	IF @pg_status IN ('', 'N')
	BEGIN
		SELECT @result_code = 30500
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_OUT_IDR'

		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @transaction_id = generator_code + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'FUND_OUT' AND currency = 'IDR'

		UPDATE dbo.merchant_master_balance
        SET merchant_outstanding_fundout = merchant_outstanding_fundout + @amount + @gateway_fee
        WHERE merchant_code = @merchant_code
        AND currency = @currency

		INSERT INTO dbo.merchant_transaction_fundout_idr_check(merchant_transaction_id, merchant_id, date_stamp
			, transaction_id)
		VALUES(@merchant_transaction_id, @merchant_id, @date_stamp
			, @transaction_id)

		INSERT INTO dbo.merchant_transaction_pending_fundout_idr(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, amount, request_date, request_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp
			, bank_name, bank_account_no, bank_account_name, bank_branch
			, bank_city, bank_province, payment_channel_id, payment_channel_name
			, pg_merchant_id, gateway_fee, gateway_percent, gateway_fee_type
			, payment_channel_id_vendor, pg_pool_id, pg_pool_weight, pg_pool_score
			, merchant_code, log_id)
		VALUES(@transaction_id, @merchant_transaction_id
			, @merchant_id, @merchant_name, @amount, @request_date, @request_url
			, @currency, @language, @bank_code, @ip_address, @pg_id, @pg_name
			, 'PENDING', @date_stamp
			, @bank_name, @bank_account_no, @bank_account_name, @bank_branch
			, @bank_city, @bank_province, @payment_channel_id, @payment_channel_name
			, @pg_merchant_id, @gateway_fee, @gateway_percent, @gateway_fee_type
			, @payment_channel_id_vendor, @pg_pool_id, @pg_pool_weight, @pg_pool_score_current
			, @merchant_code, @log_id)

		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		SELECT @pg_id, @pg_merchant_id, @transaction_id, @gateway_fee_type, @gateway_fee
			, @payment_channel_id, @payment_channel_id_vendor
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundOutInsertMYR]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundOutInsertMYR]
(
	@merchant_id varchar(50),
	@merchant_pass_key varchar(50),
	@merchant_transaction_id varchar(50),
	@amount decimal(18, 4),
	@request_date datetime,
	@request_url varchar(2000),
	@currency varchar(10),
	@language varchar(10),
	@bank_code varchar(10),
	@ip_address varchar(15),
	@bank_account_no varchar(50),
	@bank_account_name nvarchar(100),
	@bank_branch varchar(50),
	@bank_city varchar(50),
	@bank_province varchar(50),
	@log_id bigint
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50), @generator_no bigint, @date_stamp datetime
		, @merchant_name nvarchar(200), @pg_id varchar(50), @pg_name nvarchar(200)
		, @merchant_status varchar(1), @payment_channel_id varchar(20), @payment_channel_name varchar(200)
		, @pg_pool_id varchar(50), @pg_merchant_id varchar(50), @pg_status varchar(1)
		, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4)
		, @gateway_fee_type varchar(50), @merchant_balance_fundout decimal(18,4)
		, @payment_channel_id_vendor varchar(20)
		, @pg_pool_weight decimal(18,4), @pg_pool_score_current decimal(18,4)
		, @merchant_code varchar(50), @bank_name nvarchar(50)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	IF @currency <> 'MYR'
	BEGIN
		SELECT @result_code = 30001, @error_message = 'Currency Not Supported'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF dbo.fnCheckDateInterval(@request_date) = 'N'
	BEGIN
		SELECT @result_code = 30002, @error_message = 'Invalid Date Time'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT merchant_transaction_id FROM dbo.merchant_transaction_fundout_myr_check WITH(NOLOCK)
		WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 30003, @error_message = 'Merchant Transaction ID Exists'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_name = merchant_name, @merchant_status = merchant_status
		, @payment_channel_id = payment_channel_id, @payment_channel_name = payment_channel_name
		, @merchant_code = merchant_code
	FROM dbo.merchant_list WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	SELECT @bank_name = bank_name
	FROM master_bank WITH(NOLOCK)
	WHERE bank_code = @bank_code
	---------------------------------------------------------------------------------------------
	IF @merchant_status = 'N'
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Status is N'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Pool of PG
	---------------------------------------------------------------------------------------------
	SELECT @pg_pool_id = pg_pool_id, @gateway_fee = fundout_fix_rate
		, @gateway_percent = fundout_fee_percent, @gateway_fee_type = gateway_fee_type
	FROM dbo.merchant_setting WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @gateway_fee_type = 'FIXED'
	BEGIN
		SELECT @gateway_percent = 0
	END
	ELSE IF @gateway_fee_type = 'PERCENT'
	BEGIN
		SELECT @gateway_fee = (@amount * @gateway_percent)/100
	END
	ELSE
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Setting gateway fee type Not Found'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT TOP 1 @pg_id = pg_id, @pg_merchant_id = pg_merchant_id, @pg_name = pg_name
		, @pg_status = pg_status, @payment_channel_id_vendor = pg_payment_channel_id_vendor
		, @pg_pool_weight =  pg_pool_weight, @pg_pool_score_current = pg_pool_score_current
		, @error_message = pg_error_message
	FROM dbo.fnGetPaymentGatewayMerchantFundOut(@pg_pool_id, @payment_channel_id, @bank_code, @amount)
	---------------------------------------------------------------------------------------------
	IF @pg_status IN ('', 'N')
	BEGIN
		SELECT @result_code = 30500
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_OUT_MYR'

		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @transaction_id = generator_code + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'FUND_OUT' AND currency = 'MYR'

		UPDATE dbo.merchant_master_balance
        SET merchant_outstanding_fundout = merchant_outstanding_fundout + @amount + @gateway_fee
        WHERE merchant_code = @merchant_code
        AND currency = @currency

		INSERT INTO dbo.merchant_transaction_fundout_myr_check(merchant_transaction_id, merchant_id, date_stamp
			, transaction_id)
		VALUES(@merchant_transaction_id, @merchant_id, @date_stamp
			, @transaction_id)

		INSERT INTO dbo.merchant_transaction_pending_fundout_myr(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, amount, request_date, request_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp
			, bank_name, bank_account_no, bank_account_name, bank_branch
			, bank_city, bank_province, payment_channel_id, payment_channel_name
			, pg_merchant_id, gateway_fee, gateway_percent, gateway_fee_type
			, payment_channel_id_vendor, pg_pool_id, pg_pool_weight, pg_pool_score
			, merchant_code, log_id)
		VALUES(@transaction_id, @merchant_transaction_id
			, @merchant_id, @merchant_name, @amount, @request_date, @request_url
			, @currency, @language, @bank_code, @ip_address, @pg_id, @pg_name
			, 'PENDING', @date_stamp
			, @bank_name, @bank_account_no, @bank_account_name, @bank_branch
			, @bank_city, @bank_province, @payment_channel_id, @payment_channel_name
			, @pg_merchant_id, @gateway_fee, @gateway_percent, @gateway_fee_type
			, @payment_channel_id_vendor, @pg_pool_id, @pg_pool_weight, @pg_pool_score_current
			, @merchant_code, @log_id)

		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		SELECT @pg_id, @pg_merchant_id, @transaction_id, @gateway_fee_type, @gateway_fee
			, @payment_channel_id, @payment_channel_id_vendor
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundOutInsertTHB]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundOutInsertTHB]
(
	@merchant_id varchar(50),
	@merchant_pass_key varchar(50),
	@merchant_transaction_id varchar(50),
	@amount decimal(18, 4),
	@request_date datetime,
	@request_url varchar(2000),
	@currency varchar(10),
	@language varchar(10),
	@bank_code varchar(10),
	@ip_address varchar(15),
	@bank_account_no varchar(50),
	@bank_account_name nvarchar(100),
	@bank_branch varchar(50),
	@bank_city varchar(50),
	@bank_province varchar(50),
	@log_id bigint
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50), @generator_no bigint, @date_stamp datetime
		, @merchant_name nvarchar(200), @pg_id varchar(50), @pg_name nvarchar(200)
		, @merchant_status varchar(1), @payment_channel_id varchar(20), @payment_channel_name varchar(200)
		, @pg_pool_id varchar(50), @pg_merchant_id varchar(50), @pg_status varchar(1)
		, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4)
		, @gateway_fee_type varchar(50), @merchant_balance_fundout decimal(18,4)
		, @payment_channel_id_vendor varchar(20)
		, @pg_pool_weight decimal(18,4), @pg_pool_score_current decimal(18,4)
		, @merchant_code varchar(50), @bank_name nvarchar(50)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	IF @currency <> 'THB'
	BEGIN
		SELECT @result_code = 30001, @error_message = 'Currency Not Supported'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF dbo.fnCheckDateInterval(@request_date) = 'N'
	BEGIN
		SELECT @result_code = 30002, @error_message = 'Invalid Date Time'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT merchant_transaction_id FROM dbo.merchant_transaction_fundout_thb_check WITH(NOLOCK)
		WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 30003, @error_message = 'Merchant Transaction ID Exists'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_name = merchant_name, @merchant_status = merchant_status
		, @payment_channel_id = payment_channel_id, @payment_channel_name = payment_channel_name
		, @merchant_code = merchant_code
	FROM dbo.merchant_list WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @merchant_status = 'N'
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Status is N'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @bank_name = bank_name
	FROM master_bank WITH(NOLOCK)
	WHERE bank_code = @bank_code
	---------------------------------------------------------------------------------------------
	-- Pool of PG
	---------------------------------------------------------------------------------------------
	SELECT @pg_pool_id = pg_pool_id, @gateway_fee = fundout_fix_rate
		, @gateway_percent = fundout_fee_percent, @gateway_fee_type = gateway_fee_type
	FROM dbo.merchant_setting WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @gateway_fee_type = 'FIXED'
	BEGIN
		SELECT @gateway_percent = 0
	END
	ELSE IF @gateway_fee_type = 'PERCENT'
	BEGIN
		SELECT @gateway_fee = (@amount * @gateway_percent)/100
	END
	ELSE
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Setting gateway fee type Not Found'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT TOP 1 @pg_id = pg_id, @pg_merchant_id = pg_merchant_id, @pg_name = pg_name
		, @pg_status = pg_status, @payment_channel_id_vendor = pg_payment_channel_id_vendor
		, @pg_pool_weight =  pg_pool_weight, @pg_pool_score_current = pg_pool_score_current
		, @error_message = pg_error_message
	FROM dbo.fnGetPaymentGatewayMerchantFundOut(@pg_pool_id, @payment_channel_id, @bank_code, @amount)
	---------------------------------------------------------------------------------------------
	IF @pg_status IN ('', 'N')
	BEGIN
		SELECT @result_code = 30500
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_OUT_THB'

		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @transaction_id = generator_code + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'FUND_OUT' AND currency = 'THB'

		UPDATE dbo.merchant_master_balance
        SET merchant_outstanding_fundout = merchant_outstanding_fundout + @amount + @gateway_fee
        WHERE merchant_code = @merchant_code
        AND currency = @currency

		INSERT INTO dbo.merchant_transaction_fundout_thb_check(merchant_transaction_id, merchant_id, date_stamp
			, transaction_id)
		VALUES(@merchant_transaction_id, @merchant_id, @date_stamp
			, @transaction_id)

		INSERT INTO dbo.merchant_transaction_pending_fundout_thb(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, amount, request_date, request_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp
			, bank_name, bank_account_no, bank_account_name, bank_branch
			, bank_city, bank_province, payment_channel_id, payment_channel_name
			, pg_merchant_id, gateway_fee, gateway_percent, gateway_fee_type
			, payment_channel_id_vendor, pg_pool_id, pg_pool_weight, pg_pool_score
			, merchant_code, log_id)
		VALUES(@transaction_id, @merchant_transaction_id
			, @merchant_id, @merchant_name, @amount, @request_date, @request_url
			, @currency, @language, @bank_code, @ip_address, @pg_id, @pg_name
			, 'PENDING', @date_stamp
			, @bank_name, @bank_account_no, @bank_account_name, @bank_branch
			, @bank_city, @bank_province, @payment_channel_id, @payment_channel_name
			, @pg_merchant_id, @gateway_fee, @gateway_percent, @gateway_fee_type
			, @payment_channel_id_vendor, @pg_pool_id, @pg_pool_weight, @pg_pool_score_current
			, @merchant_code, @log_id)

		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		SELECT @pg_id, @pg_merchant_id, @transaction_id, @gateway_fee_type, @gateway_fee
			, @payment_channel_id, @payment_channel_id_vendor
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundOutInsertVND]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundOutInsertVND]
(
	@merchant_id varchar(50),
	@merchant_pass_key varchar(50),
	@merchant_transaction_id varchar(50),
	@amount decimal(18, 4),
	@request_date datetime,
	@request_url varchar(2000),
	@currency varchar(10),
	@language varchar(10),
	@bank_code varchar(10),
	@ip_address varchar(15),
	@bank_account_no varchar(50),
	@bank_account_name nvarchar(100),
	@bank_branch varchar(50),
	@bank_city varchar(50),
	@bank_province varchar(50),
	@log_id bigint
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @transaction_id varchar(50), @generator_no bigint, @date_stamp datetime
		, @merchant_name nvarchar(200), @pg_id varchar(50), @pg_name nvarchar(200)
		, @merchant_status varchar(1), @payment_channel_id varchar(20), @payment_channel_name varchar(200)
		, @pg_pool_id varchar(50), @pg_merchant_id varchar(50), @pg_status varchar(1)
		, @gateway_fee decimal(18,4), @gateway_percent decimal(18,4)
		, @gateway_fee_type varchar(50), @merchant_balance_fundout decimal(18,4)
		, @payment_channel_id_vendor varchar(20)
		, @pg_pool_weight decimal(18,4), @pg_pool_score_current decimal(18,4)
		, @merchant_code varchar(50), @bank_name nvarchar(50)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	IF @currency <> 'VND'
	BEGIN
		SELECT @result_code = 30001, @error_message = 'Currency Not Supported'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF dbo.fnCheckDateInterval(@request_date) = 'N'
	BEGIN
		SELECT @result_code = 30002, @error_message = 'Invalid Date Time'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT merchant_transaction_id FROM dbo.merchant_transaction_fundout_vnd_check WITH(NOLOCK)
		WHERE merchant_transaction_id = @merchant_transaction_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 30003, @error_message = 'Merchant Transaction ID Exists'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_name = merchant_name, @merchant_status = merchant_status
		, @payment_channel_id = payment_channel_id, @payment_channel_name = payment_channel_name
		, @merchant_code = merchant_code
	FROM dbo.merchant_list WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @merchant_status = 'N'
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Status is N'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @bank_name = bank_name
	FROM master_bank WITH(NOLOCK)
	WHERE bank_code = @bank_code
	---------------------------------------------------------------------------------------------
	-- Pool of PG
	---------------------------------------------------------------------------------------------
	SELECT @pg_pool_id = pg_pool_id, @gateway_fee = fundout_fix_rate
		, @gateway_percent = fundout_fee_percent, @gateway_fee_type = gateway_fee_type
	FROM dbo.merchant_setting WITH(NOLOCK)
	WHERE merchant_id = @merchant_id
	---------------------------------------------------------------------------------------------
	IF @gateway_fee_type = 'FIXED'
	BEGIN
		SELECT @gateway_percent = 0
	END
	ELSE IF @gateway_fee_type = 'PERCENT'
	BEGIN
		SELECT @gateway_fee = (@amount * @gateway_percent)/100
	END
	ELSE
	BEGIN
		SELECT @result_code = 30500, @error_message = 'Merchant Setting gateway fee type Not Found'
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT TOP 1 @pg_id = pg_id, @pg_merchant_id = pg_merchant_id, @pg_name = pg_name
		, @pg_status = pg_status, @payment_channel_id_vendor = pg_payment_channel_id_vendor
		, @pg_pool_weight =  pg_pool_weight, @pg_pool_score_current = pg_pool_score_current
		, @error_message = pg_error_message
	FROM dbo.fnGetPaymentGatewayMerchantFundOut(@pg_pool_id, @payment_channel_id, @bank_code, @amount)
	---------------------------------------------------------------------------------------------
	IF @pg_status IN ('', 'N')
	BEGIN
		SELECT @result_code = 30500
		EXEC spPGMerchantFundOutFailedLog @log_id, @error_message

		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_OUT_VND'

		UPDATE dbo.master_generator_id
		SET @generator_no = generator_no
			, @transaction_id = generator_code + CAST(@generator_no AS VARCHAR(12)) + CAST(LEFT(CAST(RAND()*1000 AS INT),1) AS VARCHAR(1))
			, generator_no = generator_no + 1
		WHERE generator_id = 'FUND_OUT' AND currency = 'VND'

		UPDATE dbo.merchant_master_balance
        SET merchant_outstanding_fundout = merchant_outstanding_fundout + @amount + @gateway_fee
        WHERE merchant_code = @merchant_code
        AND currency = @currency

		INSERT INTO dbo.merchant_transaction_fundout_vnd_check(merchant_transaction_id, merchant_id, date_stamp
			, transaction_id)
		VALUES(@merchant_transaction_id, @merchant_id, @date_stamp
			, @transaction_id)

		INSERT INTO dbo.merchant_transaction_pending_fundout_vnd(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, amount, request_date, request_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp
			, bank_name, bank_account_no, bank_account_name, bank_branch
			, bank_city, bank_province, payment_channel_id, payment_channel_name
			, pg_merchant_id, gateway_fee, gateway_percent, gateway_fee_type
			, payment_channel_id_vendor, pg_pool_id, pg_pool_weight, pg_pool_score
			, merchant_code, log_id)
		VALUES(@transaction_id, @merchant_transaction_id
			, @merchant_id, @merchant_name, @amount, @request_date, @request_url
			, @currency, @language, @bank_code, @ip_address, @pg_id, @pg_name
			, 'PENDING', @date_stamp
			, @bank_name, @bank_account_no, @bank_account_name, @bank_branch
			, @bank_city, @bank_province, @payment_channel_id, @payment_channel_name
			, @pg_merchant_id, @gateway_fee, @gateway_percent, @gateway_fee_type
			, @payment_channel_id_vendor, @pg_pool_id, @pg_pool_weight, @pg_pool_score_current
			, @merchant_code, @log_id)

		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		SELECT @pg_id, @pg_merchant_id, @transaction_id, @gateway_fee_type, @gateway_fee
			, @payment_channel_id, @payment_channel_id_vendor
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundOutSettleIDR]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundOutSettleIDR]
(
	@transaction_id varchar(50),
	@transaction_status varchar(20),
	@transaction_note varchar(500),
	@bank_fee decimal(18,4) = 0,
	@trigger_by varchar(20)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @date_stamp datetime
		, @merchant_id varchar(10), @merchant_transaction_id varchar(50)
		, @gateway_transaction_status varchar(20), @amount decimal(18,4), @gateway_fee decimal(18,4)
		, @transaction_hash varchar(50), @currency varchar(10), @key_tran varchar(50)
		, @merchant_code varchar(50), @log_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
		, @gateway_transaction_status = CASE WHEN @transaction_status = 'FAILED' AND @transaction_note <> '' THEN 'ERROR' ELSE @transaction_status END
	---------------------------------------------------------------------------------------------
	SELECT @key_tran = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'TRANSACTION_KEY'
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundout_idr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF (SELECT transaction_status FROM dbo.merchant_transaction_history_fundout_idr WITH(NOLOCK)
				WHERE transaction_id = @transaction_id) = 'FAILED'
			BEGIN
				SELECT @merchant_id = merchant_id, @merchant_transaction_id = merchant_transaction_id
					, @currency = currency, @amount = amount
				FROM dbo.merchant_transaction_pending_fundout_idr WITH(NOLOCK)
				WHERE transaction_id = @transaction_id

				SELECT @date_stamp = dbo.fnGetDateGMT7(), 
					@transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + transaction_id
					+ merchant_transaction_id + currency + @transaction_status
					+ FORMAT(amount, '#0.###0') + merchant_id + @key_tran
				FROM dbo.merchant_transaction_history_fundout_idr WITH(NOLOCK)
				WHERE transaction_id = @transaction_id

				SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

				BEGIN TRY
					BEGIN TRANSACTION

					UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_OUT_SETTLE_IDR'

					INSERT INTO dbo.merchant_transaction_history_fundout_idr_log (
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, currency, merchant_language, bank_code, ip_address, bank_name, bank_account_no
						, bank_account_name, bank_branch, bank_city, bank_province, pg_id, pg_name, transaction_status
						, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id, transaction_note
						, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, bank_fee, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
						, transaction_hash, merchant_code, req_log_id
					)
					SELECT
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, currency, merchant_language, bank_code, ip_address, bank_name, bank_account_no
						, bank_account_name, bank_branch, bank_city, bank_province, pg_id, pg_name, transaction_status
						, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id, transaction_note
						, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, bank_fee, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
						, transaction_hash, merchant_code, log_id
					FROM dbo.merchant_transaction_history_fundout_idr WITH(NOLOCK)
					WHERE transaction_id = @transaction_id

					UPDATE dbo.merchant_transaction_history_fundout_idr
					SET transaction_status = @transaction_status
						, date_stamp = @date_stamp
						, @merchant_id = merchant_id
						, @merchant_transaction_id = merchant_transaction_id
						, @amount = amount
						, @gateway_fee = gateway_fee
						, gateway_transaction_status = @gateway_transaction_status
						, trigger_by = @trigger_by
						, transaction_hash = @transaction_hash
					WHERE transaction_id = @transaction_id

					--job merchant_statement [merchant_outstanding_fundout--]
					UPDATE dbo.merchant_master_balance
					SET merchant_outstanding_fundout = merchant_outstanding_fundout + @amount + @gateway_fee
					WHERE merchant_code = @merchant_code
						AND currency = @currency

					INSERT INTO dbo.merchant_statement_idr_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
					VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDOUT')

					COMMIT TRANSACTION
				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
				END CATCH
			END
		END

		SELECT @result_code = 39999, @error_message = 'Transaction ID in History'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundout_idr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Transaction ID Exists'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_id = merchant_id, @merchant_transaction_id = merchant_transaction_id
		, @amount = amount, @gateway_fee = gateway_fee, @currency = currency
		, @merchant_code = merchant_code, @log_id = log_id
	FROM dbo.merchant_transaction_pending_fundout_idr WITH(NOLOCK)
	WHERE transaction_id = @transaction_id
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()
		SELECT @transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + @transaction_id
				+ @merchant_transaction_id + @currency + @transaction_status
				+ FORMAT(@amount, '#0.###0') + @merchant_id + @key_tran

		SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_OUT_SETTLE_IDR'

		IF @transaction_status = 'FAILED'
		BEGIN
			--Balikin Outstanding
			UPDATE dbo.merchant_master_balance
			SET merchant_outstanding_fundout = merchant_outstanding_fundout + @amount + @gateway_fee
			WHERE merchant_code = @merchant_code
				AND currency = @currency
		END

		INSERT INTO dbo.merchant_transaction_history_fundout_idr(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, amount, request_date, request_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp_req
			, bank_name, bank_account_no, bank_account_name, bank_branch
			, bank_city, bank_province, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, transaction_note, date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
			, bank_fee, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight
			, pg_pool_score, transaction_hash, merchant_code, log_id
		)
		SELECT transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, amount, request_date, request_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, @transaction_status, date_stamp
			, bank_name, bank_account_no, bank_account_name, bank_branch
			, bank_city, bank_province, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, @transaction_note, @date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, @gateway_transaction_status
			, @bank_fee, payment_channel_id_vendor, @trigger_by, pg_pool_id, pg_pool_weight
			, pg_pool_score, @transaction_hash, merchant_code, log_id
		FROM dbo.merchant_transaction_pending_fundout_idr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.merchant_transaction_notify_fundout_idr(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, transaction_status
			, request_url, date_stamp, trigger_by, transaction_hash)
		SELECT transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, @transaction_status
			, request_url, @date_stamp, @trigger_by, @transaction_hash
		FROM dbo.merchant_transaction_pending_fundout_idr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.payment_gateway_fundout_statistic_request(date_transaction, currency
			, pg_id, bank_code, transaction_amount, transaction_status, date_stamp
			, pg_pool_id, pg_pool_score)
		SELECT date_stamp, currency
			, pg_id, bank_code, amount, @transaction_status, @date_stamp
			, pg_pool_id, pg_pool_score
		FROM dbo.merchant_transaction_pending_fundout_idr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		------------------------------------------------------------------------------------------
		IF @transaction_status = 'SUCCESS'
		BEGIN
			INSERT INTO dbo.merchant_statement_idr_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
			VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDOUT')
		END
		ELSE
		BEGIN
			EXEC spPGMerchantFundOutFailedLog @log_id, @transaction_note
		END
		------------------------------------------------------------------------------------------
		
		DELETE FROM dbo.merchant_transaction_pending_fundout_idr WHERE transaction_id = @transaction_id

		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundOutSettleMYR]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundOutSettleMYR]
(
	@transaction_id varchar(50),
	@transaction_status varchar(20),
	@transaction_note varchar(500),
	@bank_fee decimal(18,4) = 0,
	@trigger_by varchar(20)
)
AS
BEGIN
/*

	rf_column_list merchant_statement_myr
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @date_stamp datetime
		, @merchant_id varchar(10), @merchant_transaction_id varchar(50)
		, @gateway_transaction_status varchar(20), @amount decimal(18,4), @gateway_fee decimal(18,4)
		, @transaction_hash varchar(50), @currency varchar(10), @key_tran varchar(50)
		, @merchant_code varchar(50), @log_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
		, @gateway_transaction_status = CASE WHEN @transaction_status = 'FAILED' AND @transaction_note <> '' THEN 'ERROR' ELSE @transaction_status END
	---------------------------------------------------------------------------------------------
	SELECT @key_tran = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'TRANSACTION_KEY'
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundout_myr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF (SELECT transaction_status FROM dbo.merchant_transaction_history_fundout_myr WITH(NOLOCK)
				WHERE transaction_id = @transaction_id) = 'FAILED'
			BEGIN
				SELECT @merchant_id = merchant_id, @merchant_transaction_id = merchant_transaction_id
					, @currency = currency, @amount = amount
				FROM dbo.merchant_transaction_pending_fundout_myr WITH(NOLOCK)
				WHERE transaction_id = @transaction_id

				SELECT @date_stamp = dbo.fnGetDateGMT7(), 
					@transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + transaction_id
					+ merchant_transaction_id + currency + @transaction_status
					+ FORMAT(amount, '#0.###0') + merchant_id + @key_tran
				FROM dbo.merchant_transaction_history_fundout_myr WITH(NOLOCK)
				WHERE transaction_id = @transaction_id

				SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

				BEGIN TRY
					BEGIN TRANSACTION

					UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_OUT_SETTLE_MYR'

					INSERT INTO dbo.merchant_transaction_history_fundout_myr_log (
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, currency, merchant_language, bank_code, ip_address, bank_name, bank_account_no
						, bank_account_name, bank_branch, bank_city, bank_province, pg_id, pg_name, transaction_status
						, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id, transaction_note
						, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, bank_fee, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
						, transaction_hash, merchant_code, req_log_id
					)
					SELECT
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, currency, merchant_language, bank_code, ip_address, bank_name, bank_account_no
						, bank_account_name, bank_branch, bank_city, bank_province, pg_id, pg_name, transaction_status
						, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id, transaction_note
						, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, bank_fee, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
						, transaction_hash, merchant_code, log_id
					FROM dbo.merchant_transaction_history_fundout_myr WITH(NOLOCK)
					WHERE transaction_id = @transaction_id

					UPDATE dbo.merchant_transaction_history_fundout_myr
					SET transaction_status = @transaction_status
						, date_stamp = @date_stamp
						, @merchant_id = merchant_id
						, @merchant_transaction_id = merchant_transaction_id
						, @amount = amount
						, @gateway_fee = gateway_fee						
						, gateway_transaction_status = @gateway_transaction_status
						, trigger_by = @trigger_by
						, transaction_hash = @transaction_hash
					WHERE transaction_id = @transaction_id

					--job merchant_statement [merchant_outstanding_fundout--]
					UPDATE dbo.merchant_master_balance
					SET merchant_outstanding_fundout = merchant_outstanding_fundout + @amount + @gateway_fee
					WHERE merchant_code = @merchant_code
						AND currency = @currency

					INSERT INTO dbo.merchant_statement_myr_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
					VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDOUT')

					COMMIT TRANSACTION
				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
				END CATCH
			END
		END

		SELECT @result_code = 39999, @error_message = 'Transaction ID in History'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundout_myr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Transaction ID Exists'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_id = merchant_id, @merchant_transaction_id = merchant_transaction_id
		, @amount = amount, @gateway_fee = gateway_fee, @currency = currency
		, @merchant_code = merchant_code, @log_id = log_id
	FROM dbo.merchant_transaction_pending_fundout_myr WITH(NOLOCK)
	WHERE transaction_id = @transaction_id
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()
		SELECT @transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + @transaction_id
				+ @merchant_transaction_id + @currency + @transaction_status
				+ FORMAT(@amount, '#0.###0') + @merchant_id + @key_tran

		SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_OUT_SETTLE_MYR'

		IF @transaction_status = 'FAILED'
		BEGIN
			--Balikin Outstanding
			UPDATE dbo.merchant_master_balance
			SET merchant_outstanding_fundout = merchant_outstanding_fundout + @amount + @gateway_fee
			WHERE merchant_code = @merchant_code
				AND currency = @currency
		END

		INSERT INTO dbo.merchant_transaction_history_fundout_myr(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, amount, request_date, request_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp_req
			, bank_name, bank_account_no, bank_account_name, bank_branch
			, bank_city, bank_province, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, transaction_note, date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
			, bank_fee, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight
			, pg_pool_score, transaction_hash, merchant_code, log_id
		)
		SELECT transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, amount, request_date, request_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, @transaction_status, date_stamp
			, bank_name, bank_account_no, bank_account_name, bank_branch
			, bank_city, bank_province, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, @transaction_note, @date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, @gateway_transaction_status
			, @bank_fee, payment_channel_id_vendor, @trigger_by, pg_pool_id, pg_pool_weight
			, pg_pool_score, @transaction_hash, merchant_code, log_id
		FROM dbo.merchant_transaction_pending_fundout_myr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.merchant_transaction_notify_fundout_myr(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, transaction_status
			, request_url, date_stamp, trigger_by, transaction_hash)
		SELECT transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, @transaction_status
			, request_url, @date_stamp, @trigger_by, @transaction_hash
		FROM dbo.merchant_transaction_pending_fundout_myr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.payment_gateway_fundout_statistic_request(date_transaction, currency
			, pg_id, bank_code, transaction_amount, transaction_status, date_stamp
			, pg_pool_id, pg_pool_score)
		SELECT date_stamp, currency
			, pg_id, bank_code, amount, @transaction_status, @date_stamp
			, pg_pool_id, pg_pool_score
		FROM dbo.merchant_transaction_pending_fundout_myr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		------------------------------------------------------------------------------------------
		IF @transaction_status = 'SUCCESS'
		BEGIN			
			INSERT INTO dbo.merchant_statement_myr_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
			VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDOUT')
		END
		ELSE
		BEGIN
			EXEC spPGMerchantFundOutFailedLog @log_id, @transaction_note
		END
		------------------------------------------------------------------------------------------

		DELETE FROM dbo.merchant_transaction_pending_fundout_myr WHERE transaction_id = @transaction_id

		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundOutSettleTHB]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundOutSettleTHB]
(
	@transaction_id varchar(50),
	@transaction_status varchar(20),
	@transaction_note varchar(500),
	@bank_fee decimal(18,4) = 0,
	@trigger_by varchar(20)
)
AS
BEGIN
/*

	rf_column_list merchant_statement_thb
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @date_stamp datetime
		, @merchant_id varchar(10), @merchant_transaction_id varchar(50)
		, @gateway_transaction_status varchar(20), @amount decimal(18,4), @gateway_fee decimal(18,4)
		, @transaction_hash varchar(50), @currency varchar(10), @key_tran varchar(50)
		, @merchant_code varchar(50), @log_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
		, @gateway_transaction_status = CASE WHEN @transaction_status = 'FAILED' AND @transaction_note <> '' THEN 'ERROR' ELSE @transaction_status END
	---------------------------------------------------------------------------------------------
	SELECT @key_tran = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'TRANSACTION_KEY'
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundout_thb WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF (SELECT transaction_status FROM dbo.merchant_transaction_history_fundout_thb WITH(NOLOCK)
				WHERE transaction_id = @transaction_id) = 'FAILED'
			BEGIN
				SELECT @merchant_id = merchant_id, @merchant_transaction_id = merchant_transaction_id
					, @currency = currency, @amount = amount
				FROM dbo.merchant_transaction_pending_fundout_thb WITH(NOLOCK)
				WHERE transaction_id = @transaction_id

				SELECT @date_stamp = dbo.fnGetDateGMT7(), 
					@transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + transaction_id
					+ merchant_transaction_id + currency + @transaction_status
					+ FORMAT(amount, '#0.###0') + merchant_id + @key_tran
				FROM dbo.merchant_transaction_history_fundout_thb WITH(NOLOCK)
				WHERE transaction_id = @transaction_id

				SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

				BEGIN TRY
					BEGIN TRANSACTION

					UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_OUT_SETTLE_THB'

					INSERT INTO dbo.merchant_transaction_history_fundout_thb_log (
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, currency, merchant_language, bank_code, ip_address, bank_name, bank_account_no
						, bank_account_name, bank_branch, bank_city, bank_province, pg_id, pg_name, transaction_status
						, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id, transaction_note
						, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, bank_fee, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
						, transaction_hash, merchant_code, req_log_id
					)
					SELECT
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, currency, merchant_language, bank_code, ip_address, bank_name, bank_account_no
						, bank_account_name, bank_branch, bank_city, bank_province, pg_id, pg_name, transaction_status
						, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id, transaction_note
						, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, bank_fee, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
						, transaction_hash, merchant_code, log_id
					FROM dbo.merchant_transaction_history_fundout_thb WITH(NOLOCK)
					WHERE transaction_id = @transaction_id

					UPDATE dbo.merchant_transaction_history_fundout_thb
					SET transaction_status = @transaction_status
						, date_stamp = @date_stamp
						, @merchant_id = merchant_id
						, @merchant_transaction_id = merchant_transaction_id
						, @amount = amount
						, @gateway_fee = gateway_fee						
						, gateway_transaction_status = @gateway_transaction_status
						, trigger_by = @trigger_by
						, transaction_hash = @transaction_hash
					WHERE transaction_id = @transaction_id

					--job merchant_statement [merchant_outstanding_fundout--]
					UPDATE dbo.merchant_master_balance
					SET merchant_outstanding_fundout = merchant_outstanding_fundout + @amount + @gateway_fee
					WHERE merchant_code = @merchant_code
						AND currency = @currency

					INSERT INTO dbo.merchant_statement_thb_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
					VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDOUT')

					COMMIT TRANSACTION
				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
				END CATCH
			END
		END

		SELECT @result_code = 39999, @error_message = 'Transaction ID in History'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundout_thb WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Transaction ID Exists'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_id = merchant_id, @merchant_transaction_id = merchant_transaction_id
		, @amount = amount, @gateway_fee = gateway_fee, @currency = currency
		, @merchant_code = merchant_code, @log_id = log_id
	FROM dbo.merchant_transaction_pending_fundout_thb WITH(NOLOCK)
	WHERE transaction_id = @transaction_id
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()
		SELECT @transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + @transaction_id
				+ @merchant_transaction_id + @currency + @transaction_status
				+ FORMAT(@amount, '#0.###0') + @merchant_id + @key_tran

		SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_OUT_SETTLE_THB'

		IF @transaction_status = 'FAILED'
		BEGIN
			--Balikin Outstanding
			UPDATE dbo.merchant_master_balance
			SET merchant_outstanding_fundout = merchant_outstanding_fundout + @amount + @gateway_fee
			WHERE merchant_code = @merchant_code
				AND currency = @currency
		END

		INSERT INTO dbo.merchant_transaction_history_fundout_thb(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, amount, request_date, request_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp_req
			, bank_name, bank_account_no, bank_account_name, bank_branch
			, bank_city, bank_province, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, transaction_note, date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
			, bank_fee, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight
			, pg_pool_score, transaction_hash, merchant_code, log_id
		)
		SELECT transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, amount, request_date, request_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, @transaction_status, date_stamp
			, bank_name, bank_account_no, bank_account_name, bank_branch
			, bank_city, bank_province, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, @transaction_note, @date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, @gateway_transaction_status
			, @bank_fee, payment_channel_id_vendor, @trigger_by, pg_pool_id, pg_pool_weight
			, pg_pool_score, @transaction_hash, merchant_code, log_id
		FROM dbo.merchant_transaction_pending_fundout_thb WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.merchant_transaction_notify_fundout_thb(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, transaction_status
			, request_url, date_stamp, trigger_by, transaction_hash)
		SELECT transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, @transaction_status
			, request_url, @date_stamp, @trigger_by, @transaction_hash
		FROM dbo.merchant_transaction_pending_fundout_thb WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.payment_gateway_fundout_statistic_request(date_transaction, currency
			, pg_id, bank_code, transaction_amount, transaction_status, date_stamp
			, pg_pool_id, pg_pool_score)
		SELECT date_stamp, currency
			, pg_id, bank_code, amount, @transaction_status, @date_stamp
			, pg_pool_id, pg_pool_score
		FROM dbo.merchant_transaction_pending_fundout_thb WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		------------------------------------------------------------------------------------------
		IF @transaction_status = 'SUCCESS'
		BEGIN			
			INSERT INTO dbo.merchant_statement_thb_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
			VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDOUT')
		END
		ELSE
		BEGIN
			EXEC spPGMerchantFundOutFailedLog @log_id, @transaction_note
		END
		------------------------------------------------------------------------------------------

		DELETE FROM dbo.merchant_transaction_pending_fundout_thb WHERE transaction_id = @transaction_id

		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGMerchantTransactionFundOutSettleVND]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGMerchantTransactionFundOutSettleVND]
(
	@transaction_id varchar(50),
	@transaction_status varchar(20),
	@transaction_note varchar(500),
	@bank_fee decimal(18,4) = 0,
	@trigger_by varchar(20)
)
AS
BEGIN
/*

	rf_column_list merchant_statement_vnd
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @date_stamp datetime
		, @merchant_id varchar(10), @merchant_transaction_id varchar(50)
		, @gateway_transaction_status varchar(20), @amount decimal(18,4), @gateway_fee decimal(18,4)
		, @transaction_hash varchar(50), @currency varchar(10), @key_tran varchar(50)
		, @merchant_code varchar(50), @log_id bigint
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
		, @gateway_transaction_status = CASE WHEN @transaction_status = 'FAILED' AND @transaction_note <> '' THEN 'ERROR' ELSE @transaction_status END
	---------------------------------------------------------------------------------------------
	SELECT @key_tran = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'TRANSACTION_KEY'
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_history_fundout_vnd WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		IF @transaction_status = 'SUCCESS'
		BEGIN
			IF (SELECT transaction_status FROM dbo.merchant_transaction_history_fundout_vnd WITH(NOLOCK)
				WHERE transaction_id = @transaction_id) = 'FAILED'
			BEGIN
				SELECT @merchant_id = merchant_id, @merchant_transaction_id = merchant_transaction_id
					, @currency = currency, @amount = amount
				FROM dbo.merchant_transaction_pending_fundout_vnd WITH(NOLOCK)
				WHERE transaction_id = @transaction_id

				SELECT @date_stamp = dbo.fnGetDateGMT7(), 
					@transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + transaction_id
					+ merchant_transaction_id + currency + @transaction_status
					+ FORMAT(amount, '#0.###0') + merchant_id + @key_tran
				FROM dbo.merchant_transaction_history_fundout_vnd WITH(NOLOCK)
				WHERE transaction_id = @transaction_id

				SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

				BEGIN TRY
					BEGIN TRANSACTION

					UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_OUT_SETTLE_VND'

					INSERT INTO dbo.merchant_transaction_history_fundout_vnd_log (
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, currency, merchant_language, bank_code, ip_address, bank_name, bank_account_no
						, bank_account_name, bank_branch, bank_city, bank_province, pg_id, pg_name, transaction_status
						, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id, transaction_note
						, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, bank_fee, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
						, transaction_hash, merchant_code, req_log_id
					)
					SELECT
						transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date
						, request_url, currency, merchant_language, bank_code, ip_address, bank_name, bank_account_no
						, bank_account_name, bank_branch, bank_city, bank_province, pg_id, pg_name, transaction_status
						, date_stamp_req, payment_channel_id, payment_channel_name, pg_merchant_id, transaction_note
						, date_stamp, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
						, bank_fee, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight, pg_pool_score
						, transaction_hash, merchant_code, log_id
					FROM dbo.merchant_transaction_history_fundout_vnd WITH(NOLOCK)
					WHERE transaction_id = @transaction_id

					UPDATE dbo.merchant_transaction_history_fundout_vnd
					SET transaction_status = @transaction_status
						, date_stamp = @date_stamp
						, @merchant_id = merchant_id
						, @merchant_transaction_id = merchant_transaction_id
						, @amount = amount
						, @gateway_fee = gateway_fee						
						, gateway_transaction_status = @gateway_transaction_status
						, trigger_by = @trigger_by
						, transaction_hash = @transaction_hash
					WHERE transaction_id = @transaction_id

					--job merchant_statement [merchant_outstanding_fundout--]
					UPDATE dbo.merchant_master_balance
					SET merchant_outstanding_fundout = merchant_outstanding_fundout + @amount + @gateway_fee
					WHERE merchant_code = @merchant_code
						AND currency = @currency

					INSERT INTO dbo.merchant_statement_vnd_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
					VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDOUT')

					COMMIT TRANSACTION
				END TRY
				BEGIN CATCH
					ROLLBACK TRANSACTION
				END CATCH
			END
		END

		SELECT @result_code = 39999, @error_message = 'Transaction ID in History'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundout_vnd WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant Transaction ID Exists'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_id = merchant_id, @merchant_transaction_id = merchant_transaction_id
		, @amount = amount, @gateway_fee = gateway_fee, @currency = currency
		, @merchant_code = merchant_code, @log_id = log_id
	FROM dbo.merchant_transaction_pending_fundout_vnd WITH(NOLOCK)
	WHERE transaction_id = @transaction_id
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		SELECT @date_stamp = dbo.fnGetDateGMT7()
		SELECT @transaction_hash = FORMAT(@date_stamp, 'yyyyMMddHHmmss') + @transaction_id
				+ @merchant_transaction_id + @currency + @transaction_status
				+ FORMAT(@amount, '#0.###0') + @merchant_id + @key_tran

		SELECT @transaction_hash = CONVERT(VARCHAR(32), HashBytes('MD5', UPPER(@transaction_hash)), 2)

		BEGIN TRANSACTION

		UPDATE dbo.master_counter SET counter_value = counter_value + 1 WHERE counter_id = 'FUND_OUT_SETTLE_VND'

		IF @transaction_status = 'FAILED'
		BEGIN
			--Balikin Outstanding
			UPDATE dbo.merchant_master_balance
			SET merchant_outstanding_fundout = merchant_outstanding_fundout + @amount + @gateway_fee
			WHERE merchant_code = @merchant_code
				AND currency = @currency
		END

		INSERT INTO dbo.merchant_transaction_history_fundout_vnd(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, amount, request_date, request_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, transaction_status, date_stamp_req
			, bank_name, bank_account_no, bank_account_name, bank_branch
			, bank_city, bank_province, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, transaction_note, date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, gateway_transaction_status
			, bank_fee, payment_channel_id_vendor, trigger_by, pg_pool_id, pg_pool_weight
			, pg_pool_score, transaction_hash, merchant_code, log_id
		)
		SELECT transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, amount, request_date, request_url
			, currency, merchant_language, bank_code, ip_address, pg_id, pg_name
			, @transaction_status, date_stamp
			, bank_name, bank_account_no, bank_account_name, bank_branch
			, bank_city, bank_province, payment_channel_id, payment_channel_name
			, pg_merchant_id
			, @transaction_note, @date_stamp
			, gateway_fee, gateway_percent, gateway_fee_type, @gateway_transaction_status
			, @bank_fee, payment_channel_id_vendor, @trigger_by, pg_pool_id, pg_pool_weight
			, pg_pool_score, @transaction_hash, merchant_code, log_id
		FROM dbo.merchant_transaction_pending_fundout_vnd WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.merchant_transaction_notify_fundout_vnd(transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, transaction_status
			, request_url, date_stamp, trigger_by, transaction_hash)
		SELECT transaction_id, merchant_transaction_id
			, merchant_id, merchant_name, currency, amount, @transaction_status
			, request_url, @date_stamp, @trigger_by, @transaction_hash
		FROM dbo.merchant_transaction_pending_fundout_vnd WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		INSERT INTO dbo.payment_gateway_fundout_statistic_request(date_transaction, currency
			, pg_id, bank_code, transaction_amount, transaction_status, date_stamp
			, pg_pool_id, pg_pool_score)
		SELECT date_stamp, currency
			, pg_id, bank_code, amount, @transaction_status, @date_stamp
			, pg_pool_id, pg_pool_score
		FROM dbo.merchant_transaction_pending_fundout_vnd WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		------------------------------------------------------------------------------------------
		IF @transaction_status = 'SUCCESS'
		BEGIN			
			INSERT INTO dbo.merchant_statement_vnd_request(transaction_id, merchant_transaction_id, merchant_id, statement_type)
			VALUES(@transaction_id, @merchant_transaction_id, @merchant_id, 'FUNDOUT')
		END
		ELSE
		BEGIN
			EXEC spPGMerchantFundOutFailedLog @log_id, @transaction_note
		END
		------------------------------------------------------------------------------------------

		DELETE FROM dbo.merchant_transaction_pending_fundout_vnd WHERE transaction_id = @transaction_id

		SELECT @result_code = 1, @error_message = ''

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGPaymentHTMLGenerateTHB]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGPaymentHTMLGenerateTHB]
(
	@transaction_id varchar(50),
	@html_text nvarchar(max)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @date_stamp datetime, @session_token varchar(50), @url varchar(2000)
		, @merchant_id varchar(50), @currency varchar(10)
		, @signature varchar(2000), @html_key varchar(50)
		, @query_string varchar(2000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundin_thb WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Transaction ID Not Found or Already Settle'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_id = merchant_id, @currency = currency
	FROM dbo.merchant_transaction_pending_fundin_thb WITH(NOLOCK)
	WHERE transaction_id = @transaction_id
	---------------------------------------------------------------------------------------------
	SELECT @url = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'PAYMENT_HTML_URL'
	---------------------------------------------------------------------------------------------
	SELECT @html_key = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'PAYMENT_HTML_KEY'
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		SELECT @date_stamp = dbo.fnGetDateGMT7(), @session_token = NEWID()
			, @signature = CONVERT(VARCHAR(500), HASHBYTES('SHA2_256', @session_token + @merchant_id + @currency + @html_key), 2)

		INSERT INTO [dbo].[merchant_transaction_payment_html_thb]([session_token]
			, [transaction_id], [merchant_transaction_id], [merchant_id], [merchant_name]
			, [currency], [html_string], [date_stamp]
		)
		SELECT @session_token
			, transaction_id, merchant_transaction_id, merchant_id, merchant_name
			, currency, @html_text, @date_stamp
		FROM [dbo].[merchant_transaction_pending_fundin_thb] WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		SELECT @result_code = 1, @error_message = ''
			, @query_string = 'session_token=' + @session_token + '&merchant_id=' + @merchant_id
				+ '&currency=' + @currency + '&signature=' + @signature

		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		SELECT @url, @query_string
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGPaymentHTMLSessionTHB]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGPaymentHTMLSessionTHB]
(
	@session_token varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
	SELECT html_string
	FROM dbo.merchant_transaction_payment_html_thb WITH(NOLOCK)
	WHERE session_token = @session_token
	RETURN
END
GO
/****** Object:  StoredProcedure [dbo].[spPGVirtualAccountGenerateIDR]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGVirtualAccountGenerateIDR]
(
	@transaction_id varchar(50),
	@virtual_account_number varchar(50),
	@virtual_account_expire datetime,
	@amount_total decimal(18,4)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @date_stamp datetime, @session_token varchar(50), @url varchar(2000)
		, @merchant_id varchar(50), @currency varchar(10)
		, @signature varchar(2000), @va_key varchar(50), @query_string varchar(2000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	-- Checking
	---------------------------------------------------------------------------------------------
	IF NOT EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundin_idr WITH(NOLOCK)
		WHERE transaction_id = @transaction_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Transaction ID Not Found or Already Settle'
		SELECT @result_code, @error_message
		RETURN
	END
	---------------------------------------------------------------------------------------------
	SELECT @merchant_id = merchant_id, @currency = currency
	FROM dbo.merchant_transaction_pending_fundin_idr WITH(NOLOCK)
	WHERE transaction_id = @transaction_id
	---------------------------------------------------------------------------------------------
	SELECT @url = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'VA_URL'
	---------------------------------------------------------------------------------------------
	SELECT @va_key = parameter_value
	FROM dbo.master_parameter WITH(NOLOCK)
	WHERE parameter_key = 'VA_KEY'
	---------------------------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		SELECT @date_stamp = dbo.fnGetDateGMT7(), @session_token = NEWID()
			, @signature = CONVERT(VARCHAR(500), HASHBYTES('SHA2_256', @session_token + @merchant_id + @currency + @va_key), 2)

		INSERT INTO [dbo].[merchant_transaction_virtual_account_idr]([session_token]
			, [transaction_id], [merchant_transaction_id], [merchant_id], [merchant_name]
			, [currency], [bank_code], [amount_total], [amount], [gateway_fee]
			, [gateway_percent], [gateway_fee_type], [virtual_account_number]
			, [virtual_account_expire], [date_stamp]
		)
		SELECT @session_token
			, transaction_id, merchant_transaction_id, merchant_id, merchant_name
			, currency, bank_code, @amount_total, amount, gateway_fee
			, [gateway_percent], [gateway_fee_type], @virtual_account_number
			, @virtual_account_expire, @date_stamp
		FROM [dbo].[merchant_transaction_pending_fundin_idr] WITH(NOLOCK)
		WHERE transaction_id = @transaction_id

		SELECT @result_code = 1, @error_message = ''
			, @query_string = 'session_token=' + @session_token + '&merchant_id=' + @merchant_id
				+ '&currency=' + @currency + '&payment_channel=va&signature=' + @signature
		COMMIT TRANSACTION

		SELECT @result_code, @error_message
		SELECT @url, @query_string
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[spPGVirtualAccountSessionIDR]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGVirtualAccountSessionIDR]
(
	@session_token varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
	SELECT [virtual_account_number], [virtual_account_expire], [bank_code]
		, [currency], [amount_total], [gateway_fee]
	FROM dbo.merchant_transaction_virtual_account_idr WITH(NOLOCK)
	WHERE session_token = @session_token
	RETURN
END
GO
/****** Object:  StoredProcedure [dbo].[spPGVTPConfirmation]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[spPGVTPConfirmation]
(
	@transaction_id varchar(50),
	@currency varchar(10)
)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
		, @url varchar(2000)
	---------------------------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = '', @url = ''
	---------------------------------------------------------------------------------------------
	IF @currency = 'VND'
	BEGIN
		IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundin_vnd WITH(NOLOCK)
			WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @url = return_url
			FROM dbo.merchant_transaction_pending_fundin_vnd WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END

		IF @url = '' OR @url IS NULL
		BEGIN
			SELECT @url = return_url
			FROM dbo.merchant_transaction_history_fundin_vnd WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END
	END
	ELSE IF @currency = 'THB'
	BEGIN
		IF EXISTS(SELECT transaction_id FROM dbo.merchant_transaction_pending_fundin_thb WITH(NOLOCK)
			WHERE transaction_id = @transaction_id)
		BEGIN
			SELECT @url = return_url
			FROM dbo.merchant_transaction_pending_fundin_thb WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END

		IF @url = '' OR @url IS NULL
		BEGIN
			SELECT @url = return_url
			FROM dbo.merchant_transaction_history_fundin_thb WITH(NOLOCK)
			WHERE transaction_id = @transaction_id
		END
	END
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
	SELECT @url
	RETURN
END
GO
/****** Object:  StoredProcedure [dbo].[spReportGatewayStatement]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spReportGatewayStatement]
(
	@pg_merchant_id varchar(50),
	@currency varchar(10),
	@date_from datetime,
	@date_to datetime,
	@merchant_transaction_id varchar(50),
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	[Operator] > Gateway > Gateway Statement

	rf_param spReportGatewayStatement

	EXEC PacmanMainDB.dbo.spReportGatewayStatement @pg_merchant_id='PACIDRIB01', @currency='IDR', 
		@date_from='02/07/2023 00:00:00', @date_to='02/07/2023 23:59:59', @merchant_transaction_id='', @page=1, @page_size=25, @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@total_rows int, @total_fund_out_top_up decimal(18,4), @start_balance decimal(18,4), @end_balance decimal(18,4),
			@total_fund_in decimal(18,4), @total_fund_in_fee decimal(18,4),
			@total_fund_out decimal(18,4), @total_fund_out_fee decimal(18,4),
			@total_settlement decimal(18,4), @total_settlement_fee decimal(18,4)

	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997'),
		@merchant_transaction_id = CASE WHEN @merchant_transaction_id = '' THEN '%' ELSE @merchant_transaction_id+'%' END
	
	IF @currency = 'VND'
	BEGIN
		SELECT TOP 1 @start_balance = gateway_balance_before
		FROM dbo.gateway_statement_vnd WITH (NOLOCK)
		WHERE request_date >= @date_from
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		ORDER BY statement_id ASC

		SELECT TOP 1 @end_balance = gateway_balance_after
		FROM dbo.gateway_statement_vnd WITH (NOLOCK)
		WHERE request_date between @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		ORDER BY statement_id DESC

		SELECT @start_balance = ISNULL(@start_balance,0.00),
			@end_balance = ISNULL(@end_balance,0.00)
		---------------------------------------------------------------------------------------------------------
		SELECT @total_fund_out_top_up = 0.00,
			@total_fund_in = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_in_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_fund_out = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_out_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_settlement = SUM(CASE statement_type WHEN 'SETTLE' THEN statement_amount ELSE 0.00 END),
			@total_settlement_fee = SUM(CASE statement_type WHEN 'SETTLE' THEN gateway_fee ELSE 0.00 END)
		FROM dbo.gateway_statement_vnd WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency

		SELECT 
			@total_fund_out_top_up = ISNULL(@total_fund_out_top_up,0.00),
			@total_fund_in = ISNULL(@total_fund_in,0.00),
			@total_fund_in_fee = ISNULL(@total_fund_in_fee,0.00),
			@total_fund_out = ISNULL(@total_fund_out,0.00),
			@total_fund_out_fee = ISNULL(@total_fund_out_fee,0.00),
			@total_settlement = ISNULL(@total_settlement,0.00),
			@total_settlement_fee = ISNULL(@total_settlement_fee,0.00)
		---------------------------------------------------------------------------------------------------------

		SELECT @total_rows = count(1)				
		FROM dbo.gateway_statement_vnd WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		AND merchant_transaction_id LIKE @merchant_transaction_id

		SET @total_rows = ISNULL(@total_rows,0)
		---------------------------------------------------------------------------------------------------------
					
		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message

		SELECT total_rows = @total_rows, 
			total_fund_out_top_up = @total_fund_out_top_up,
			start_balance = @start_balance,
			total_fund_in = @total_fund_in, total_fund_in_fee = @total_fund_in_fee,
			total_fund_out = @total_fund_out, total_fund_out_fee = @total_fund_out_fee,
			total_settlement = @total_settlement, total_settlement_fee = @total_settlement_fee,
			end_balance = @end_balance

		SELECT request_date, statement_type, 
			statement_description = CASE statement_type WHEN 'FUNDIN' THEN 'Fund-In' WHEN 'FUNDOUT' THEN 'Fund-Out' ELSE statement_type END, 
			statement_amount, merchant_transaction_id, gateway_fee = 0.00, gateway_percent = 0.00,
			currency, gateway_amount_debit, gateway_amount_credit, gateway_balance_after
		FROM dbo.gateway_statement_vnd WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		AND merchant_transaction_id LIKE @merchant_transaction_id
		ORDER BY statement_id DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
	END
	ELSE IF @currency = 'IDR'
	BEGIN
		SELECT TOP 1 @start_balance = merchant_balance_before
		FROM dbo.gateway_statement_idr WITH (NOLOCK)
		WHERE request_date >= @date_from
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		ORDER BY statement_id ASC

		SELECT TOP 1 @end_balance = gateway_balance_after
		FROM dbo.gateway_statement_idr WITH (NOLOCK)
		WHERE request_date between @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		ORDER BY statement_id DESC

		SELECT @start_balance = ISNULL(@start_balance,0.00),
			@end_balance = ISNULL(@end_balance,0.00)
		---------------------------------------------------------------------------------------------------------
		SELECT @total_fund_out_top_up = 0.00,
			@total_fund_in = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_in_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_fund_out = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_out_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_settlement = SUM(CASE statement_type WHEN 'SETTLE' THEN statement_amount ELSE 0.00 END),
			@total_settlement_fee = SUM(CASE statement_type WHEN 'SETTLE' THEN gateway_fee ELSE 0.00 END)
		FROM dbo.gateway_statement_idr WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency

		SELECT 
			@total_fund_out_top_up = ISNULL(@total_fund_out_top_up,0.00),
			@total_fund_in = ISNULL(@total_fund_in,0.00),
			@total_fund_in_fee = ISNULL(@total_fund_in_fee,0.00),
			@total_fund_out = ISNULL(@total_fund_out,0.00),
			@total_fund_out_fee = ISNULL(@total_fund_out_fee,0.00),
			@total_settlement = ISNULL(@total_settlement,0.00),
			@total_settlement_fee = ISNULL(@total_settlement_fee,0.00)
		---------------------------------------------------------------------------------------------------------

		SELECT @total_rows = count(1)				
		FROM dbo.gateway_statement_idr WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		AND merchant_transaction_id LIKE @merchant_transaction_id

		SET @total_rows = ISNULL(@total_rows,0)
		---------------------------------------------------------------------------------------------------------
					
		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message

		SELECT total_rows = @total_rows, 
			total_fund_out_top_up = @total_fund_out_top_up,
			start_balance = @start_balance,
			total_fund_in = @total_fund_in, total_fund_in_fee = @total_fund_in_fee,
			total_fund_out = @total_fund_out, total_fund_out_fee = @total_fund_out_fee,
			total_settlement = @total_settlement, total_settlement_fee = @total_settlement_fee,
			end_balance = @end_balance

		SELECT request_date, statement_type, 
			statement_description = CASE statement_type 
				WHEN 'FUNDIN' THEN 'Fund-In' 
				WHEN 'FUNDOUT' THEN 'Fund-Out' 
				WHEN 'TOPIN' THEN 'Top Up (Fund In)' 
				WHEN 'TOPBANK' THEN 'Top Up (Bank Transfer)' 
				WHEN 'SETTLE' THEN 'Settlement' 
				WHEN 'SETTLE-FAILED' THEN 'Settlement Refund' 
				ELSE statement_type END, 
			statement_amount, merchant_transaction_id, gateway_fee, gateway_percent,
			currency, gateway_amount_debit, gateway_amount_credit, gateway_balance_after
		FROM dbo.gateway_statement_idr WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		AND merchant_transaction_id LIKE @merchant_transaction_id
		ORDER BY statement_id DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
	END
	ELSE IF @currency = 'THB'
	BEGIN
		SELECT TOP 1 @start_balance = merchant_balance_before
		FROM dbo.gateway_statement_thb WITH (NOLOCK)
		WHERE request_date >= @date_from
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		ORDER BY statement_id ASC

		SELECT TOP 1 @end_balance = gateway_balance_after
		FROM dbo.gateway_statement_thb WITH (NOLOCK)
		WHERE request_date between @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		ORDER BY statement_id DESC

		SELECT @start_balance = ISNULL(@start_balance,0.00),
			@end_balance = ISNULL(@end_balance,0.00)
		---------------------------------------------------------------------------------------------------------
		SELECT @total_fund_out_top_up = 0.00,
			@total_fund_in = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_in_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_fund_out = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_out_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_settlement = SUM(CASE statement_type WHEN 'SETTLE' THEN statement_amount ELSE 0.00 END),
			@total_settlement_fee = SUM(CASE statement_type WHEN 'SETTLE' THEN gateway_fee ELSE 0.00 END)
		FROM dbo.gateway_statement_thb WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency

		SELECT 
			@total_fund_out_top_up = ISNULL(@total_fund_out_top_up,0.00),
			@total_fund_in = ISNULL(@total_fund_in,0.00),
			@total_fund_in_fee = ISNULL(@total_fund_in_fee,0.00),
			@total_fund_out = ISNULL(@total_fund_out,0.00),
			@total_fund_out_fee = ISNULL(@total_fund_out_fee,0.00),
			@total_settlement = ISNULL(@total_settlement,0.00),
			@total_settlement_fee = ISNULL(@total_settlement_fee,0.00)
		---------------------------------------------------------------------------------------------------------

		SELECT @total_rows = count(1)				
		FROM dbo.gateway_statement_thb WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		AND merchant_transaction_id LIKE @merchant_transaction_id

		SET @total_rows = ISNULL(@total_rows,0)
		---------------------------------------------------------------------------------------------------------
					
		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message

		SELECT total_rows = @total_rows, 
			total_fund_out_top_up = @total_fund_out_top_up,
			start_balance = @start_balance,
			total_fund_in = @total_fund_in, total_fund_in_fee = @total_fund_in_fee,
			total_fund_out = @total_fund_out, total_fund_out_fee = @total_fund_out_fee,
			total_settlement = @total_settlement, total_settlement_fee = @total_settlement_fee,
			end_balance = @end_balance

		SELECT request_date, statement_type, 
			statement_description = CASE statement_type WHEN 'FUNDIN' THEN 'Fund-In' WHEN 'FUNDOUT' THEN 'Fund-Out' ELSE statement_type END, 
			statement_amount, merchant_transaction_id, gateway_fee, gateway_percent,
			currency, gateway_amount_debit, gateway_amount_credit, gateway_balance_after
		FROM dbo.gateway_statement_thb WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		AND merchant_transaction_id LIKE @merchant_transaction_id
		ORDER BY statement_id DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
	END
	ELSE IF @currency = 'MYR'
	BEGIN
		SELECT TOP 1 @start_balance = merchant_balance_before
		FROM dbo.gateway_statement_myr WITH (NOLOCK)
		WHERE request_date >= @date_from
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		ORDER BY statement_id ASC

		SELECT TOP 1 @end_balance = gateway_balance_after
		FROM dbo.gateway_statement_myr WITH (NOLOCK)
		WHERE request_date between @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		ORDER BY statement_id DESC

		SELECT @start_balance = ISNULL(@start_balance,0.00),
			@end_balance = ISNULL(@end_balance,0.00)
		---------------------------------------------------------------------------------------------------------
		SELECT @total_fund_out_top_up = 0.00,
			@total_fund_in = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_in_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_fund_out = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_out_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_settlement = SUM(CASE statement_type WHEN 'SETTLE' THEN statement_amount ELSE 0.00 END),
			@total_settlement_fee = SUM(CASE statement_type WHEN 'SETTLE' THEN gateway_fee ELSE 0.00 END)
		FROM dbo.gateway_statement_myr WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency

		SELECT 
			@total_fund_out_top_up = ISNULL(@total_fund_out_top_up,0.00),
			@total_fund_in = ISNULL(@total_fund_in,0.00),
			@total_fund_in_fee = ISNULL(@total_fund_in_fee,0.00),
			@total_fund_out = ISNULL(@total_fund_out,0.00),
			@total_fund_out_fee = ISNULL(@total_fund_out_fee,0.00),
			@total_settlement = ISNULL(@total_settlement,0.00),
			@total_settlement_fee = ISNULL(@total_settlement_fee,0.00)
		---------------------------------------------------------------------------------------------------------

		SELECT @total_rows = count(1)				
		FROM dbo.gateway_statement_myr WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		AND merchant_transaction_id LIKE @merchant_transaction_id

		SET @total_rows = ISNULL(@total_rows,0)
		---------------------------------------------------------------------------------------------------------
					
		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message

		SELECT total_rows = @total_rows, 
			total_fund_out_top_up = @total_fund_out_top_up,
			start_balance = @start_balance,
			total_fund_in = @total_fund_in, total_fund_in_fee = @total_fund_in_fee,
			total_fund_out = @total_fund_out, total_fund_out_fee = @total_fund_out_fee,
			total_settlement = @total_settlement, total_settlement_fee = @total_settlement_fee,
			end_balance = @end_balance

		SELECT request_date, statement_type, 
			statement_description = CASE statement_type WHEN 'FUNDIN' THEN 'Fund-In' WHEN 'FUNDOUT' THEN 'Fund-Out' ELSE statement_type END, 
			statement_amount, merchant_transaction_id, gateway_fee, gateway_percent,
			currency, gateway_amount_debit, gateway_amount_credit, gateway_balance_after
		FROM dbo.gateway_statement_myr WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND pg_merchant_id = @pg_merchant_id
		AND currency = @currency
		AND merchant_transaction_id LIKE @merchant_transaction_id
		ORDER BY statement_id DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spReportMerchantFundIn]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spReportMerchantFundIn]
(
	@merchant_code varchar(20) = '',
	@currency varchar(10) = '',
	@payment_channel_id varchar(20) = '',
	@date_from datetime,
	@date_to datetime,
	@merchant_transaction_id varchar(50),
	@transaction_id varchar(50),
	@bank_code varchar(10),
	@gateway_transaction_status varchar(20), --'', PENDING, FAILED, SUCCESS
	@page int,
	@page_size int,
	@stamp_user varchar(20),
	@merchant_id varchar(10) = '' --remove
)
AS
BEGIN
/*
	[Merchant] > Fund In > Fund In List

	rf_param spReportMerchantFundIn
	rf_column_list merchant_transaction_history_fundin_vnd,'@sp'
	
	EXEC PacmanMainDB.dbo.spReportMerchantFundIn @merchant_id='', @date_from='02/07/2023 00:00:00', @date_to='02/07/2023 00:00:00', 
		@merchant_transaction_id='', @transaction_id='', @bank_code='', @gateway_transaction_status='', @page=1, @page_size=25, @stamp_user='developer13'

	EXEC spReportMerchantFundIn @merchant_id='1B90353613', @date_from='2022-01-01', @date_to='2023-12-01', @merchant_transaction_id='', @transaction_id='', @bank_code='', @gateway_transaction_status='', @page=1, @page_size=50, @stamp_user=''
	EXEC spReportMerchantFundIn @merchant_id='1B90353613', @date_from='2022-01-01', @date_to='2023-12-01', @merchant_transaction_id='', @transaction_id='', @bank_code='', @gateway_transaction_status='PENDING', @page=1, @page_size=50, @stamp_user=''

*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@top int, @total_rows int, @merchant_name nvarchar(50)			
	
	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997'),
		@merchant_transaction_id = CASE WHEN @merchant_transaction_id = '' THEN '%' ELSE @merchant_transaction_id+'%' END,
		@transaction_id = CASE WHEN @transaction_id = '' THEN '%' ELSE @transaction_id+'%' END,
		@bank_code = CASE WHEN @bank_code = '' THEN '%' ELSE @bank_code END,
		@gateway_transaction_status = CASE WHEN @gateway_transaction_status = '' THEN '%' ELSE @gateway_transaction_status END
	
	SELECT 
		@top = @page * @page_size,
		@total_rows = 0

	------------------------------

	CREATE TABLE #tbl_merchant (
		merchant_code varchar(20), 
		currency varchar(10), 
		payment_channel_id varchar(20), 
		merchant_id varchar(10)
	)

	INSERT INTO #tbl_merchant (merchant_code, currency, payment_channel_id, merchant_id)
	SELECT merchant_code, currency, payment_channel_id, merchant_id 
	FROM dbo.fnUserMerchant(@stamp_user, '', '', '', @currency, @payment_channel_id, @merchant_code)

	------------------------------
	
	CREATE TABLE #tbl_transaction (
		transaction_id varchar(50),
		merchant_transaction_id varchar(50),
		merchant_id varchar(10),
		merchant_name nvarchar(200),
		amount decimal(18,4),
		request_date datetime,
		currency varchar(10),
		bank_code varchar(10),
		ip_address varchar(50),
		gateway_transaction_status varchar(20),
		date_stamp datetime,
		gateway_fee decimal(18,4),
		payment_channel_id varchar(10),
		order_by int
	)

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'VND')
	BEGIN
		--Pending
		IF @gateway_transaction_status IN ('PENDING')
		BEGIN
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id,
				order_by)
			SELECT m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.transaction_status, 
				date_stamp = NULL, m.gateway_fee, m.payment_channel_id,
				order_by = 1
			FROM dbo.merchant_transaction_pending_fundin_vnd m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
		
			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_pending_fundin_vnd m WITH (NOLOCK)		
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
		END		
		ELSE 
		BEGIN
			--History
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id, 
				order_by)
			SELECT TOP (@top) m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.gateway_transaction_status, 
				m.date_stamp, m.gateway_fee, m.payment_channel_id, 
				order_by = 2
			FROM dbo.merchant_transaction_history_fundin_vnd m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
			ORDER BY m.request_date DESC

			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_history_fundin_vnd m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
		END
	END
	
	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'IDR')
	BEGIN
		--Pending
		IF @gateway_transaction_status IN ('PENDING')
		BEGIN
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id,
				order_by)
			SELECT m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.transaction_status, 
				date_stamp = NULL, m.gateway_fee, m.payment_channel_id,
				order_by = 1
			FROM dbo.merchant_transaction_pending_fundin_idr m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
		
			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_pending_fundin_idr m WITH (NOLOCK)		
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
		END		
		ELSE 
		BEGIN
			--History
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id, 
				order_by)
			SELECT TOP (@top) m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.gateway_transaction_status, 
				m.date_stamp, m.gateway_fee, m.payment_channel_id, 
				order_by = 2
			FROM dbo.merchant_transaction_history_fundin_idr m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
			ORDER BY m.request_date DESC

			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_history_fundin_idr m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
		END
	END

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'THB')
	BEGIN
		--Pending
		IF @gateway_transaction_status IN ('PENDING')
		BEGIN
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id,
				order_by)
			SELECT m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.transaction_status, 
				date_stamp = NULL, m.gateway_fee, m.payment_channel_id,
				order_by = 1
			FROM dbo.merchant_transaction_pending_fundin_thb m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
		
			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_pending_fundin_thb m WITH (NOLOCK)		
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
		END		
		ELSE 
		BEGIN
			--History
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id, 
				order_by)
			SELECT TOP (@top) m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.gateway_transaction_status, 
				m.date_stamp, m.gateway_fee, m.payment_channel_id, 
				order_by = 2
			FROM dbo.merchant_transaction_history_fundin_thb m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
			ORDER BY m.request_date DESC

			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_history_fundin_thb m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
		END
	END

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'MYR')
	BEGIN
		--Pending
		IF @gateway_transaction_status IN ('PENDING')
		BEGIN
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id,
				order_by)
			SELECT m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.transaction_status, 
				date_stamp = NULL, m.gateway_fee, m.payment_channel_id,
				order_by = 1
			FROM dbo.merchant_transaction_pending_fundin_myr m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
		
			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_pending_fundin_myr m WITH (NOLOCK)		
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
		END		
		ELSE 
		BEGIN
			--History
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id, 
				order_by)
			SELECT TOP (@top) m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.gateway_transaction_status, 
				m.date_stamp, m.gateway_fee, m.payment_channel_id, 
				order_by = 2
			FROM dbo.merchant_transaction_history_fundin_myr m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
			ORDER BY m.request_date DESC

			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_history_fundin_myr m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
		END
	END
	---------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows

	SELECT tbl.request_date, tbl.date_stamp, tbl.merchant_id, tbl.merchant_name, tbl.merchant_transaction_id, tbl.transaction_id, tbl.currency, tbl.amount, 
		gateway_fee = CASE tbl.gateway_transaction_status WHEN 'SUCCESS' THEN tbl.gateway_fee ELSE 0.00 END, 
		fundin_amount = CASE tbl.gateway_transaction_status WHEN 'SUCCESS' THEN tbl.amount - tbl.gateway_fee ELSE 0.00 END, 
		tbl.payment_channel_id, tbl.bank_code, tbl.gateway_transaction_status, tbl.ip_address, ml.merchant_code
	FROM #tbl_transaction tbl WITH (NOLOCK)
	LEFT JOIN dbo.merchant_list ml WITH (NOLOCK) ON tbl.merchant_id = ml.merchant_id
	ORDER BY tbl.order_by, tbl.request_date DESC
	OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY

END
GO
/****** Object:  StoredProcedure [dbo].[spReportMerchantFundInSummary]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spReportMerchantFundInSummary]
(
	@merchant_code varchar(20) = '',
	@currency varchar(10) = '', 
	@payment_channel_id varchar(20) = '',
	@date_from datetime,
	@date_to datetime,
	@stamp_user varchar(20),
	@merchant_id varchar(10) = '' --remove
)
AS
BEGIN
/*
	[Merchant] > Fund In > Fund In List

	rf_param spReportMerchantFundInSummary2

	EXEC spReportMerchantFundInSummary @merchant_code='', @currency='MYR', @payment_channel_id='', @date_from='2022-01-01', @date_to='2023-12-01', @stamp_user='developer13'
	EXEC PacmanMainDB.dbo.spReportMerchantFundInSummary @merchant_id='77MERCHE77', @date_from='02/07/2023 00:00:00', @date_to='02/07/2023 00:00:00', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
			
	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997')
	
	------------------------------

	CREATE TABLE #tbl_merchant (
		merchant_code varchar(20), 
		currency varchar(10), 
		payment_channel_id varchar(20), 
		merchant_id varchar(10)
	)

	INSERT INTO #tbl_merchant (merchant_code, currency, payment_channel_id, merchant_id)
	SELECT merchant_code, currency, payment_channel_id, merchant_id 
	FROM dbo.fnUserMerchant(@stamp_user, '', '', '', @currency, @payment_channel_id, @merchant_code)

	------------------------------

	CREATE TABLE #tbl_amount (
		merchant_id varchar(10), 
		total_pending int default(0), 
		total_pending_amount decimal(18,4) default(0.00),
		total_success int default(0), 
		total_failed int default(0), 
		total_amount decimal(18,4) default(0.00),
		total_gateway_fee decimal(18,4) default(0.00)
	)

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'VND')
	BEGIN
		--Pending
		INSERT INTO #tbl_amount(merchant_id, total_pending, total_pending_amount)
		SELECT m.merchant_id, COUNT(1), ISNULL(SUM(amount),0.00)
		FROM dbo.merchant_transaction_pending_fundin_vnd m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		GROUP BY m.merchant_id
		
		--History
		INSERT INTO #tbl_amount(merchant_id, total_success, total_failed, total_amount, total_gateway_fee)
		SELECT m.merchant_id, 
			total_success = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN 1 ELSE 0 END),0),
			total_failed = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'FAILED' THEN 1 ELSE 0 END),0),
			total_amount = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN amount ELSE 0.00 END),0.00),
			total_gateway_fee = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN gateway_fee ELSE 0.00 END),0.00)
		FROM dbo.merchant_transaction_history_fundin_vnd m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		WHERE m.date_stamp BETWEEN @date_from AND @date_to
		AND m.gateway_transaction_status <> 'ERROR'
		GROUP BY m.merchant_id
	END

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'IDR')
	BEGIN
		--Pending
		INSERT INTO #tbl_amount(merchant_id, total_pending, total_pending_amount)
		SELECT m.merchant_id, COUNT(1), ISNULL(SUM(amount),0.00)
		FROM dbo.merchant_transaction_pending_fundin_idr m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		GROUP BY m.merchant_id
		
		--History
		INSERT INTO #tbl_amount(merchant_id, total_success, total_failed, total_amount, total_gateway_fee)
		SELECT m.merchant_id, 
			total_success = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN 1 ELSE 0 END),0),
			total_failed = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'FAILED' THEN 1 ELSE 0 END),0),
			total_amount = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN amount ELSE 0.00 END),0.00),
			total_gateway_fee = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN gateway_fee ELSE 0.00 END),0.00)
		FROM dbo.merchant_transaction_history_fundin_idr m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		WHERE m.date_stamp BETWEEN @date_from AND @date_to
		AND m.gateway_transaction_status <> 'ERROR'
		GROUP BY m.merchant_id
	END

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'THB')
	BEGIN
		--Pending
		INSERT INTO #tbl_amount(merchant_id, total_pending, total_pending_amount)
		SELECT m.merchant_id, COUNT(1), ISNULL(SUM(amount),0.00)
		FROM dbo.merchant_transaction_pending_fundin_thb m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		GROUP BY m.merchant_id
		
		--History
		INSERT INTO #tbl_amount(merchant_id, total_success, total_failed, total_amount, total_gateway_fee)
		SELECT m.merchant_id, 
			total_success = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN 1 ELSE 0 END),0),
			total_failed = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'FAILED' THEN 1 ELSE 0 END),0),
			total_amount = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN amount ELSE 0.00 END),0.00),
			total_gateway_fee = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN gateway_fee ELSE 0.00 END),0.00)
		FROM dbo.merchant_transaction_history_fundin_thb m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		WHERE m.date_stamp BETWEEN @date_from AND @date_to
		AND m.gateway_transaction_status <> 'ERROR'
		GROUP BY m.merchant_id
	END

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'MYR')
	BEGIN
		--Pending
		INSERT INTO #tbl_amount(merchant_id, total_pending, total_pending_amount)
		SELECT m.merchant_id, COUNT(1), ISNULL(SUM(amount),0.00)
		FROM dbo.merchant_transaction_pending_fundin_myr m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		GROUP BY m.merchant_id
		
		--History
		INSERT INTO #tbl_amount(merchant_id, total_success, total_failed, total_amount, total_gateway_fee)
		SELECT m.merchant_id, 
			total_success = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN 1 ELSE 0 END),0),
			total_failed = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'FAILED' THEN 1 ELSE 0 END),0),
			total_amount = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN amount ELSE 0.00 END),0.00),
			total_gateway_fee = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN gateway_fee ELSE 0.00 END),0.00)
		FROM dbo.merchant_transaction_history_fundin_myr m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		WHERE m.date_stamp BETWEEN @date_from AND @date_to
		AND m.gateway_transaction_status <> 'ERROR'
		GROUP BY m.merchant_id
	END

	---------------------------------------------------------
	--@merchant_balance_fundin
	CREATE TABLE #tbl_balance (
		merchant_code varchar(20),
		merchant_name nvarchar(50),
		currency varchar(10), 
		merchant_balance_fundin decimal(18,4)
	)

	INSERT INTO #tbl_balance(merchant_code, merchant_name, currency, merchant_balance_fundin)
	SELECT m.merchant_code, m.merchant_name, m.currency, m.merchant_balance_fundin
	FROM dbo.merchant_master_balance m WITH (NOLOCK)
	INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code and m.currency = tbl.currency
	GROUP BY m.merchant_code, m.merchant_name, m.currency, m.merchant_balance_fundin
	
	---------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	;WITH cte_sum
	AS
	(
		SELECT	ml.merchant_code, ml.currency,
				total_success = SUM(total_success),
				total_failed = SUM(total_failed),
				total_pending = SUM(total_pending),
				total_amount = SUM(total_amount),
				total_gateway_fee = SUM(total_gateway_fee),
				total_fundin_amount = SUM(total_amount) - SUM(total_gateway_fee),
				total_pending_amount = SUM(total_pending_amount)
		FROM #tbl_amount tbl WITH (NOLOCK)
		LEFT JOIN dbo.merchant_list ml WITH (NOLOCK) ON tbl.merchant_id = ml.merchant_id
		GROUP BY ml.merchant_code, ml.currency
	)

	SELECT	tbl.merchant_name,
			cte.currency,
			cte.total_success,
			cte.total_failed,
			cte.total_pending,
			total_transaction = cte.total_success + cte.total_failed,
			success_rate = ISNULL(CAST(100.00 * cte.total_success / NULLIF(cte.total_success + cte.total_failed,0) AS DECIMAL(5,2)),0.00),
			cte.total_amount,
			cte.total_gateway_fee,
			cte.total_fundin_amount,
			tbl.merchant_balance_fundin,
			cte.total_pending_amount
	FROM cte_sum cte
	INNER JOIN #tbl_balance tbl WITH (NOLOCK) ON cte.merchant_code = tbl.merchant_code AND cte.currency = tbl.currency
	ORDER BY cte.currency, cte.merchant_code

END
GO
/****** Object:  StoredProcedure [dbo].[spReportMerchantFundOut]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spReportMerchantFundOut]
(
	@merchant_code varchar(20) = '',
	@currency varchar(10) = '',
	@payment_channel_id varchar(20) = '',
	@date_from datetime,
	@date_to datetime,
	@merchant_transaction_id varchar(50),
	@transaction_id varchar(50),
	@bank_code varchar(10),
	@bank_account_name varchar(50),
	@gateway_transaction_status varchar(20), --'', PENDING, FAILED, SUCCESS
	@page int,
	@page_size int,
	@stamp_user varchar(20),
	@merchant_id varchar(10) = '' --remove	
)
AS
BEGIN
/*
	[Merchant] > Fund Out > Fund Out List

	rf_param spReportMerchantFundOut

	rf_column_list merchant_transaction_history_fundout_vnd,'@sp'

	select * from merchant_transaction_history_fundout_vnd

	EXEC spReportMerchantFundOut @merchant_code='', @currency='', @payment_channel_id='', @date_from='2022-12-01', @date_to='2023-12-01', @merchant_transaction_id='', @transaction_id='', 
		@bank_code='', @bank_account_name='', @gateway_transaction_status='', @page=1, @page_size=25, @stamp_user='develoepr13'

*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@top int, @total_rows int, @merchant_name nvarchar(50)			
		
	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997'),
		@merchant_transaction_id = CASE WHEN @merchant_transaction_id = '' THEN '%' ELSE @merchant_transaction_id+'%' END,
		@transaction_id = CASE WHEN @transaction_id = '' THEN '%' ELSE @transaction_id+'%' END,
		@bank_code = CASE WHEN @bank_code = '' THEN '%' ELSE @bank_code END,
		@bank_account_name = CASE WHEN @bank_account_name = '' THEN '%' ELSE @bank_account_name+'%' END,
		@gateway_transaction_status = CASE WHEN @gateway_transaction_status = '' THEN '%' ELSE @gateway_transaction_status END
	
	SELECT 
		@top = @page * @page_size,
		@total_rows = 0

	------------------------------

	CREATE TABLE #tbl_merchant (
		merchant_code varchar(20), 
		currency varchar(10), 
		payment_channel_id varchar(20), 
		merchant_id varchar(10)
	)

	INSERT INTO #tbl_merchant (merchant_code, currency, payment_channel_id, merchant_id)
	SELECT merchant_code, currency, payment_channel_id, merchant_id 
	FROM dbo.fnUserMerchant(@stamp_user, '', '', '', @currency, @payment_channel_id, @merchant_code)

	------------------------------

	CREATE TABLE #tbl_transaction (
		transaction_id varchar(50),
		merchant_transaction_id varchar(50),
		merchant_id varchar(10),
		merchant_name nvarchar(200),
		amount decimal(18,4),
		request_date datetime,
		currency varchar(10),
		bank_code varchar(10),
		ip_address varchar(50),
		bank_account_no varchar(50),
		bank_account_name nvarchar(100),
		gateway_transaction_status varchar(20),
		date_stamp datetime,
		gateway_fee decimal(18,4),
		payment_channel_id varchar(10),
		order_by int
	)

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'VND')
	BEGIN
		--Pending
		IF @gateway_transaction_status IN ('PENDING')
		BEGIN
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, bank_account_no, bank_account_name, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id,
				order_by)
			SELECT m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.bank_account_no, m.bank_account_name, m.transaction_status, 
				date_stamp = NULL, m.gateway_fee, m.payment_channel_id,
				order_by = 1
			FROM dbo.merchant_transaction_pending_fundout_vnd m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name
		
			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_pending_fundout_vnd m WITH (NOLOCK)		
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name
		END		
		ELSE 
		BEGIN
			--History
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, bank_account_no, bank_account_name, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id, 
				order_by)
			SELECT TOP (@top) m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.bank_account_no, m.bank_account_name, m.gateway_transaction_status, 
				m.date_stamp, m.gateway_fee, m.payment_channel_id, 
				order_by = 2
			FROM dbo.merchant_transaction_history_fundout_vnd m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
			ORDER BY m.request_date DESC

			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_history_fundout_vnd m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
		END
	END
	
	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'IDR')
	BEGIN
		--Pending
		IF @gateway_transaction_status IN ('PENDING')
		BEGIN
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, bank_account_no, bank_account_name, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id,
				order_by)
			SELECT m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.bank_account_no, m.bank_account_name, m.transaction_status, 
				date_stamp = NULL, m.gateway_fee, m.payment_channel_id,
				order_by = 1
			FROM dbo.merchant_transaction_pending_fundout_idr m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name
		
			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_pending_fundout_idr m WITH (NOLOCK)		
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name
		END		
		ELSE 
		BEGIN
			--History
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, bank_account_no, bank_account_name, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id, 
				order_by)
			SELECT TOP (@top) m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.bank_account_no, m.bank_account_name, m.gateway_transaction_status, 
				m.date_stamp, m.gateway_fee, m.payment_channel_id, 
				order_by = 2
			FROM dbo.merchant_transaction_history_fundout_idr m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
			ORDER BY m.request_date DESC

			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_history_fundout_idr m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
		END
	END

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'THB')
	BEGIN
		--Pending
		IF @gateway_transaction_status IN ('PENDING')
		BEGIN
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, bank_account_no, bank_account_name, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id,
				order_by)
			SELECT m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.bank_account_no, m.bank_account_name, m.transaction_status, 
				date_stamp = NULL, m.gateway_fee, m.payment_channel_id,
				order_by = 1
			FROM dbo.merchant_transaction_pending_fundout_thb m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name
		
			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_pending_fundout_thb m WITH (NOLOCK)		
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name			
		END		
		ELSE 
		BEGIN
			--History
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, bank_account_no, bank_account_name, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id, 
				order_by)
			SELECT TOP (@top) m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.bank_account_no, m.bank_account_name, m.gateway_transaction_status, 
				m.date_stamp, m.gateway_fee, m.payment_channel_id, 
				order_by = 2
			FROM dbo.merchant_transaction_history_fundout_thb m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name			
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
			ORDER BY m.request_date DESC

			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_history_fundout_thb m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name			
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
		END
	END

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'MYR')
	BEGIN
		--Pending
		IF @gateway_transaction_status IN ('PENDING')
		BEGIN
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, bank_account_no, bank_account_name, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id,
				order_by)
			SELECT m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.bank_account_no, m.bank_account_name, m.transaction_status, 
				date_stamp = NULL, m.gateway_fee, m.payment_channel_id,
				order_by = 1
			FROM dbo.merchant_transaction_pending_fundout_myr m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name
			
			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_pending_fundout_myr m WITH (NOLOCK)		
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.request_date BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name			
		END		
		ELSE 
		BEGIN
			--History
			INSERT INTO #tbl_transaction (
				transaction_id, merchant_transaction_id, merchant_id, merchant_name, amount, request_date, 
				currency, bank_code, ip_address, bank_account_no, bank_account_name, gateway_transaction_status, 
				date_stamp, gateway_fee, payment_channel_id, 
				order_by)
			SELECT TOP (@top) m.transaction_id, m.merchant_transaction_id, m.merchant_id, m.merchant_name, m.amount, m.request_date, 
				m.currency, m.bank_code, m.ip_address, m.bank_account_no, m.bank_account_name, m.gateway_transaction_status, 
				m.date_stamp, m.gateway_fee, m.payment_channel_id, 
				order_by = 2
			FROM dbo.merchant_transaction_history_fundout_myr m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
			ORDER BY m.request_date DESC

			SELECT @total_rows = @total_rows + COUNT(1)
			FROM dbo.merchant_transaction_history_fundout_myr m WITH (NOLOCK)
			INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
			WHERE m.date_stamp BETWEEN @date_from AND @date_to
			AND m.merchant_transaction_id LIKE @merchant_transaction_id
			AND m.transaction_id LIKE @transaction_id
			AND m.bank_code LIKE @bank_code
			AND m.bank_account_name LIKE @bank_account_name
			AND m.gateway_transaction_status LIKE @gateway_transaction_status
			AND m.gateway_transaction_status <> 'ERROR'
		END
	END
	---------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows

	SELECT tbl.request_date, tbl.date_stamp, tbl.merchant_id, tbl.merchant_name, tbl.merchant_transaction_id, tbl.transaction_id, tbl.currency, tbl.amount, 
		gateway_fee = CASE tbl.gateway_transaction_status WHEN 'SUCCESS' THEN tbl.gateway_fee ELSE 0.00 END, 
		fundout_amount = CASE tbl.gateway_transaction_status WHEN 'SUCCESS' THEN tbl.amount - tbl.gateway_fee ELSE 0.00 END, 
		tbl.payment_channel_id, tbl.bank_code, tbl.bank_account_no, tbl.bank_account_name, tbl.gateway_transaction_status, tbl.ip_address, ml.merchant_code
	FROM #tbl_transaction tbl WITH (NOLOCK)
	LEFT JOIN dbo.merchant_list ml WITH (NOLOCK) ON tbl.merchant_id = ml.merchant_id
	ORDER BY tbl.order_by, tbl.request_date DESC
	OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY

END
GO
/****** Object:  StoredProcedure [dbo].[spReportMerchantFundOutSummary]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spReportMerchantFundOutSummary]
(
	@merchant_code varchar(20) = '',
	@currency varchar(10) = '', 
	@payment_channel_id varchar(20) = '',
	@date_from datetime,
	@date_to datetime,
	@stamp_user varchar(20),
	@merchant_id varchar(10) = '' --remove
)
AS
BEGIN
/*
	[Merchant] > Fund Out > Fund Out List

	rf_param spReportMerchantFundOutSummary

	rf_column_list merchant_transaction_history_fundout_vnd,'@sp'

	select * from merchant_transaction_history_fundout_vnd

	EXEC spReportMerchantFundOutSummary @merchant_code='', @currency='', @payment_channel_id='', @date_from='2022-12-01', @date_to='2023-12-01', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)
	
	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997')
	
	------------------------------

	CREATE TABLE #tbl_merchant (
		merchant_code varchar(20), 
		currency varchar(10),
		payment_channel_id varchar(20),
		merchant_id varchar(10)
	)

	INSERT INTO #tbl_merchant (merchant_code, currency, payment_channel_id, merchant_id)
	SELECT merchant_code, currency, payment_channel_id, merchant_id
	FROM dbo.fnUserMerchant(@stamp_user, '', '', '', @currency, @payment_channel_id, @merchant_code)

	------------------------------
	CREATE TABLE #tbl_amount (
		merchant_id varchar(10), 
		total_pending int default(0), 
		total_pending_amount decimal(18,4) default(0.00),
		total_success int default(0), 
		total_failed int default(0), 
		total_amount decimal(18,4) default(0.00),
		total_gateway_fee decimal(18,4) default(0.00)
	)

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'VND')
	BEGIN
		--Pending
		INSERT INTO #tbl_amount(merchant_id, total_pending, total_pending_amount)
		SELECT m.merchant_id, COUNT(1), ISNULL(SUM(amount),0.00)
		FROM dbo.merchant_transaction_pending_fundout_vnd m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		GROUP BY m.merchant_id
		
		--History
		INSERT INTO #tbl_amount(merchant_id, total_success, total_failed, total_amount, total_gateway_fee)
		SELECT m.merchant_id, 
			total_success = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN 1 ELSE 0 END),0),
			total_failed = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'FAILED' THEN 1 ELSE 0 END),0),
			total_amount = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN amount ELSE 0.00 END),0.00),
			total_gateway_fee = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN gateway_fee ELSE 0.00 END),0.00)
		FROM dbo.merchant_transaction_history_fundout_vnd m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		WHERE m.date_stamp BETWEEN @date_from AND @date_to
		AND m.gateway_transaction_status <> 'ERROR'
		GROUP BY m.merchant_id
	END

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'IDR')
	BEGIN
		--Pending
		INSERT INTO #tbl_amount(merchant_id, total_pending, total_pending_amount)
		SELECT m.merchant_id, COUNT(1), ISNULL(SUM(amount),0.00)
		FROM dbo.merchant_transaction_pending_fundout_idr m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		GROUP BY m.merchant_id
		
		--History
		INSERT INTO #tbl_amount(merchant_id, total_success, total_failed, total_amount, total_gateway_fee)
		SELECT m.merchant_id, 
			total_success = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN 1 ELSE 0 END),0),
			total_failed = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'FAILED' THEN 1 ELSE 0 END),0),
			total_amount = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN amount ELSE 0.00 END),0.00),
			total_gateway_fee = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN gateway_fee ELSE 0.00 END),0.00)
		FROM dbo.merchant_transaction_history_fundout_idr m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		WHERE m.date_stamp BETWEEN @date_from AND @date_to
		AND m.gateway_transaction_status <> 'ERROR'
		GROUP BY m.merchant_id
	END

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'THB')
	BEGIN
		--Pending
		INSERT INTO #tbl_amount(merchant_id, total_pending, total_pending_amount)
		SELECT m.merchant_id, COUNT(1), ISNULL(SUM(amount),0.00)
		FROM dbo.merchant_transaction_pending_fundout_thb m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		GROUP BY m.merchant_id
		
		--History
		INSERT INTO #tbl_amount(merchant_id, total_success, total_failed, total_amount, total_gateway_fee)
		SELECT m.merchant_id, 
			total_success = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN 1 ELSE 0 END),0),
			total_failed = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'FAILED' THEN 1 ELSE 0 END),0),
			total_amount = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN amount ELSE 0.00 END),0.00),
			total_gateway_fee = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN gateway_fee ELSE 0.00 END),0.00)
		FROM dbo.merchant_transaction_history_fundout_thb m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		WHERE m.date_stamp BETWEEN @date_from AND @date_to
		AND m.gateway_transaction_status <> 'ERROR'
		GROUP BY m.merchant_id
	END

	IF EXISTS(SELECT currency FROM #tbl_merchant WITH (NOLOCK) WHERE currency = 'MYR')
	BEGIN
		--Pending
		INSERT INTO #tbl_amount(merchant_id, total_pending, total_pending_amount)
		SELECT m.merchant_id, COUNT(1), ISNULL(SUM(amount),0.00)
		FROM dbo.merchant_transaction_pending_fundout_myr m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		GROUP BY m.merchant_id
		
		--History
		INSERT INTO #tbl_amount(merchant_id, total_success, total_failed, total_amount, total_gateway_fee)
		SELECT m.merchant_id, 
			total_success = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN 1 ELSE 0 END),0),
			total_failed = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'FAILED' THEN 1 ELSE 0 END),0),
			total_amount = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN amount ELSE 0.00 END),0.00),
			total_gateway_fee = ISNULL(SUM(CASE m.gateway_transaction_status WHEN 'SUCCESS' THEN gateway_fee ELSE 0.00 END),0.00)
		FROM dbo.merchant_transaction_history_fundout_myr m WITH (NOLOCK)
		INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_id = tbl.merchant_id
		WHERE m.date_stamp BETWEEN @date_from AND @date_to
		AND m.gateway_transaction_status <> 'ERROR'
		GROUP BY m.merchant_id
	END

	---------------------------------------------------------
	--@merchant_balance_fundout
	CREATE TABLE #tbl_balance (
		merchant_code varchar(20),
		merchant_name nvarchar(50),
		currency varchar(10), 
		merchant_balance_fundout decimal(18,4)
	)

	INSERT INTO #tbl_balance(merchant_code, merchant_name, currency, merchant_balance_fundout)
	SELECT m.merchant_code, m.merchant_name, m.currency, m.merchant_balance_fundout
	FROM dbo.merchant_master_balance m WITH (NOLOCK)
	INNER JOIN #tbl_merchant tbl WITH (NOLOCK) ON m.merchant_code = tbl.merchant_code and m.currency = tbl.currency
	GROUP BY m.merchant_code, m.merchant_name, m.currency, m.merchant_balance_fundout
	
	---------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	;WITH cte_sum
	AS
	(
		SELECT	ml.merchant_code, ml.currency,
				total_success = SUM(total_success),
				total_failed = SUM(total_failed),
				total_pending = SUM(total_pending),
				total_amount = SUM(total_amount),
				total_gateway_fee = SUM(total_gateway_fee),
				total_fundout_amount = SUM(total_amount) - SUM(total_gateway_fee),
				total_pending_amount = SUM(total_pending_amount)
		FROM #tbl_amount tbl WITH (NOLOCK)
		LEFT JOIN dbo.merchant_list ml WITH (NOLOCK) ON tbl.merchant_id = ml.merchant_id
		GROUP BY ml.merchant_code, ml.currency
	)

	SELECT	tbl.merchant_name,
			cte.currency,
			cte.total_success,
			cte.total_failed,
			cte.total_pending,
			total_transaction = cte.total_success + cte.total_failed,
			success_rate = ISNULL(CAST(100.00 * cte.total_success / NULLIF(cte.total_success + cte.total_failed,0) AS DECIMAL(5,2)),0.00),
			cte.total_amount,
			cte.total_gateway_fee,
			cte.total_fundout_amount,
			tbl.merchant_balance_fundout,
			cte.total_pending_amount
	FROM cte_sum cte
	INNER JOIN #tbl_balance tbl WITH (NOLOCK) ON cte.merchant_code = tbl.merchant_code AND cte.currency = tbl.currency
	ORDER BY cte.currency, cte.merchant_code
	
END
GO
/****** Object:  StoredProcedure [dbo].[spReportMerchantStatement]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spReportMerchantStatement]
(
	@merchant_code varchar(20) = '', --no all
	@currency varchar(10) = '', --no all
	@payment_channel_id varchar(20) = '', --''
	@date_from datetime,
	@date_to datetime,
	@merchant_transaction_id varchar(50),
	@page int,
	@page_size int,
	@stamp_user varchar(20),
	@merchant_id varchar(50) = '' --remove
)
AS
BEGIN
/*
	[Merchant] > Statement > Account Statement

	rf_param spReportMerchantStatement

	select * from merchant_statement_idr with (nolock)

	EXEC PacmanMainDB.dbo.spReportMerchantStatement @merchant_code='Merchant Name 2', @currency='IDR', @payment_channel_id='',
		@date_from='02/07/2023 00:00:00', @date_to='02/07/2023 23:59:59', @merchant_transaction_id='', @page=1, @page_size=25, @stamp_user='developer13'


*/
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@total_rows int, @total_fund_out_top_up decimal(18,4), @start_balance decimal(18,4), @end_balance decimal(18,4),
			@total_fund_in decimal(18,4), @total_fund_in_fee decimal(18,4),
			@total_fund_out decimal(18,4), @total_fund_out_fee decimal(18,4),
			@total_settlement decimal(18,4), @total_settlement_fee decimal(18,4)

	SELECT 
		@date_from = FORMAT(@date_from,'yyyy-MM-dd 00:00:00'),
		@date_to = FORMAT(@date_to,'yyyy-MM-dd 23:59:59.997'),
		@merchant_transaction_id = CASE WHEN @merchant_transaction_id = '' THEN '%' ELSE @merchant_transaction_id+'%' END,
		@payment_channel_id = CASE WHEN @payment_channel_id = '' THEN '%' ELSE @payment_channel_id END
	
	IF @currency = 'VND'
	BEGIN
		SELECT TOP 1 @start_balance = merchant_balance_before
		FROM dbo.merchant_statement_vnd WITH (NOLOCK)
		WHERE request_date >= @date_from
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		ORDER BY statement_id ASC

		SELECT TOP 1 @end_balance = merchant_balance_after
		FROM dbo.merchant_statement_vnd WITH (NOLOCK)
		WHERE request_date between @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		ORDER BY statement_id DESC

		SELECT @start_balance = ISNULL(@start_balance,0.00),
			@end_balance = ISNULL(@end_balance,0.00)
		---------------------------------------------------------------------------------------------------------
		SELECT @total_fund_out_top_up = 0.00,
			@total_fund_in = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_in_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_fund_out = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_out_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_settlement = SUM(CASE statement_type WHEN 'SETTLE' THEN statement_amount ELSE 0.00 END),
			@total_settlement_fee = SUM(CASE statement_type WHEN 'SETTLE' THEN gateway_fee ELSE 0.00 END)
		FROM dbo.merchant_statement_vnd WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id

		SELECT 
			@total_fund_out_top_up = ISNULL(@total_fund_out_top_up,0.00),
			@total_fund_in = ISNULL(@total_fund_in,0.00),
			@total_fund_in_fee = ISNULL(@total_fund_in_fee,0.00),
			@total_fund_out = ISNULL(@total_fund_out,0.00),
			@total_fund_out_fee = ISNULL(@total_fund_out_fee,0.00),
			@total_settlement = ISNULL(@total_settlement,0.00),
			@total_settlement_fee = ISNULL(@total_settlement_fee,0.00)
		---------------------------------------------------------------------------------------------------------

		SELECT @total_rows = count(1)				
		FROM dbo.merchant_statement_vnd WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		AND merchant_transaction_id LIKE @merchant_transaction_id

		SET @total_rows = ISNULL(@total_rows,0)
		---------------------------------------------------------------------------------------------------------
					
		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message

		SELECT total_rows = @total_rows, 
			total_fund_out_top_up = @total_fund_out_top_up,
			start_balance = @start_balance,
			total_fund_in = @total_fund_in, total_fund_in_fee = @total_fund_in_fee,
			total_fund_out = @total_fund_out, total_fund_out_fee = @total_fund_out_fee,
			total_settlement = @total_settlement, total_settlement_fee = @total_settlement_fee,
			end_balance = @end_balance

		SELECT request_date, statement_type, 
			statement_description = CASE statement_type WHEN 'FUNDIN' THEN 'Fund-In' WHEN 'FUNDOUT' THEN 'Fund-Out' ELSE statement_type END, 
			statement_amount, merchant_transaction_id, gateway_fee, gateway_percent,
			currency, merchant_amount_debit, merchant_amount_credit, merchant_balance_after
		FROM dbo.merchant_statement_vnd WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		AND merchant_transaction_id LIKE @merchant_transaction_id
		ORDER BY statement_id DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
	END
	ELSE IF @currency = 'IDR'
	BEGIN
		SELECT TOP 1 @start_balance = merchant_balance_before
		FROM dbo.merchant_statement_idr WITH (NOLOCK)
		WHERE request_date >= @date_from
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		ORDER BY statement_id ASC

		SELECT TOP 1 @end_balance = merchant_balance_after
		FROM dbo.merchant_statement_idr WITH (NOLOCK)
		WHERE request_date between @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		ORDER BY statement_id DESC

		SELECT @start_balance = ISNULL(@start_balance,0.00),
			@end_balance = ISNULL(@end_balance,0.00)
		---------------------------------------------------------------------------------------------------------
		SELECT @total_fund_out_top_up = 0.00,
			@total_fund_in = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_in_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_fund_out = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_out_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_settlement = SUM(CASE statement_type WHEN 'SETTLE' THEN statement_amount ELSE 0.00 END),
			@total_settlement_fee = SUM(CASE statement_type WHEN 'SETTLE' THEN gateway_fee ELSE 0.00 END)
		FROM dbo.merchant_statement_idr WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id

		SELECT 
			@total_fund_out_top_up = ISNULL(@total_fund_out_top_up,0.00),
			@total_fund_in = ISNULL(@total_fund_in,0.00),
			@total_fund_in_fee = ISNULL(@total_fund_in_fee,0.00),
			@total_fund_out = ISNULL(@total_fund_out,0.00),
			@total_fund_out_fee = ISNULL(@total_fund_out_fee,0.00),
			@total_settlement = ISNULL(@total_settlement,0.00),
			@total_settlement_fee = ISNULL(@total_settlement_fee,0.00)
		---------------------------------------------------------------------------------------------------------

		SELECT @total_rows = count(1)				
		FROM dbo.merchant_statement_idr WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		AND merchant_transaction_id LIKE @merchant_transaction_id

		SET @total_rows = ISNULL(@total_rows,0)
		---------------------------------------------------------------------------------------------------------
					
		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message

		SELECT total_rows = @total_rows, 
			total_fund_out_top_up = @total_fund_out_top_up,
			start_balance = @start_balance,
			total_fund_in = @total_fund_in, total_fund_in_fee = @total_fund_in_fee,
			total_fund_out = @total_fund_out, total_fund_out_fee = @total_fund_out_fee,
			total_settlement = @total_settlement, total_settlement_fee = @total_settlement_fee,
			end_balance = @end_balance

		SELECT request_date, statement_type, 
			statement_description = CASE statement_type 
				WHEN 'FUNDIN' THEN 'Fund-In' 
				WHEN 'FUNDOUT' THEN 'Fund-Out' 
				WHEN 'TOPIN' THEN 'Top Up (Fund In)' 
				WHEN 'TOPBANK' THEN 'Top Up (Bank Transfer)' 
				WHEN 'SETTLE' THEN 'Settlement' 
				WHEN 'SETTLE-FAILED' THEN 'Settlement Refund' 
				ELSE statement_type END, 
			statement_amount, merchant_transaction_id, gateway_fee, gateway_percent,
			currency, merchant_amount_debit, merchant_amount_credit, merchant_balance_after
		FROM dbo.merchant_statement_idr WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		AND merchant_transaction_id LIKE @merchant_transaction_id
		ORDER BY statement_id DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
	END
	ELSE IF @currency = 'THB'
	BEGIN
		SELECT TOP 1 @start_balance = merchant_balance_before
		FROM dbo.merchant_statement_thb WITH (NOLOCK)
		WHERE request_date >= @date_from
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		ORDER BY statement_id ASC

		SELECT TOP 1 @end_balance = merchant_balance_after
		FROM dbo.merchant_statement_thb WITH (NOLOCK)
		WHERE request_date between @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		ORDER BY statement_id DESC

		SELECT @start_balance = ISNULL(@start_balance,0.00),
			@end_balance = ISNULL(@end_balance,0.00)
		---------------------------------------------------------------------------------------------------------
		SELECT @total_fund_out_top_up = 0.00,
			@total_fund_in = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_in_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_fund_out = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_out_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_settlement = SUM(CASE statement_type WHEN 'SETTLE' THEN statement_amount ELSE 0.00 END),
			@total_settlement_fee = SUM(CASE statement_type WHEN 'SETTLE' THEN gateway_fee ELSE 0.00 END)
		FROM dbo.merchant_statement_thb WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id

		SELECT 
			@total_fund_out_top_up = ISNULL(@total_fund_out_top_up,0.00),
			@total_fund_in = ISNULL(@total_fund_in,0.00),
			@total_fund_in_fee = ISNULL(@total_fund_in_fee,0.00),
			@total_fund_out = ISNULL(@total_fund_out,0.00),
			@total_fund_out_fee = ISNULL(@total_fund_out_fee,0.00),
			@total_settlement = ISNULL(@total_settlement,0.00),
			@total_settlement_fee = ISNULL(@total_settlement_fee,0.00)
		---------------------------------------------------------------------------------------------------------

		SELECT @total_rows = count(1)				
		FROM dbo.merchant_statement_thb WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		AND merchant_transaction_id LIKE @merchant_transaction_id

		SET @total_rows = ISNULL(@total_rows,0)
		---------------------------------------------------------------------------------------------------------
					
		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message

		SELECT total_rows = @total_rows, 
			total_fund_out_top_up = @total_fund_out_top_up,
			start_balance = @start_balance,
			total_fund_in = @total_fund_in, total_fund_in_fee = @total_fund_in_fee,
			total_fund_out = @total_fund_out, total_fund_out_fee = @total_fund_out_fee,
			total_settlement = @total_settlement, total_settlement_fee = @total_settlement_fee,
			end_balance = @end_balance

		SELECT request_date, statement_type, 
			statement_description = CASE statement_type WHEN 'FUNDIN' THEN 'Fund-In' WHEN 'FUNDOUT' THEN 'Fund-Out' ELSE statement_type END, 
			statement_amount, merchant_transaction_id, gateway_fee, gateway_percent,
			currency, merchant_amount_debit, merchant_amount_credit, merchant_balance_after
		FROM dbo.merchant_statement_thb WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		AND merchant_transaction_id LIKE @merchant_transaction_id
		ORDER BY statement_id DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
	END
	ELSE IF @currency = 'MYR'
	BEGIN
		SELECT TOP 1 @start_balance = merchant_balance_before
		FROM dbo.merchant_statement_myr WITH (NOLOCK)
		WHERE request_date >= @date_from
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		ORDER BY statement_id ASC

		SELECT TOP 1 @end_balance = merchant_balance_after
		FROM dbo.merchant_statement_myr WITH (NOLOCK)
		WHERE request_date between @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		ORDER BY statement_id DESC

		SELECT @start_balance = ISNULL(@start_balance,0.00),
			@end_balance = ISNULL(@end_balance,0.00)
		---------------------------------------------------------------------------------------------------------
		SELECT @total_fund_out_top_up = 0.00,
			@total_fund_in = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_in_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_fund_out = SUM(CASE statement_type WHEN 'FUNDIN' THEN statement_amount ELSE 0.00 END),
			@total_fund_out_fee = SUM(CASE statement_type WHEN 'FUNDIN' THEN gateway_fee ELSE 0.00 END),
			@total_settlement = SUM(CASE statement_type WHEN 'SETTLE' THEN statement_amount ELSE 0.00 END),
			@total_settlement_fee = SUM(CASE statement_type WHEN 'SETTLE' THEN gateway_fee ELSE 0.00 END)
		FROM dbo.merchant_statement_myr WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id

		SELECT 
			@total_fund_out_top_up = ISNULL(@total_fund_out_top_up,0.00),
			@total_fund_in = ISNULL(@total_fund_in,0.00),
			@total_fund_in_fee = ISNULL(@total_fund_in_fee,0.00),
			@total_fund_out = ISNULL(@total_fund_out,0.00),
			@total_fund_out_fee = ISNULL(@total_fund_out_fee,0.00),
			@total_settlement = ISNULL(@total_settlement,0.00),
			@total_settlement_fee = ISNULL(@total_settlement_fee,0.00)
		---------------------------------------------------------------------------------------------------------

		SELECT @total_rows = count(1)				
		FROM dbo.merchant_statement_myr WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		AND merchant_transaction_id LIKE @merchant_transaction_id

		SET @total_rows = ISNULL(@total_rows,0)
		---------------------------------------------------------------------------------------------------------
					
		SELECT @result_code = 1, @error_message = ''
		SELECT @result_code, @error_message

		SELECT total_rows = @total_rows, 
			total_fund_out_top_up = @total_fund_out_top_up,
			start_balance = @start_balance,
			total_fund_in = @total_fund_in, total_fund_in_fee = @total_fund_in_fee,
			total_fund_out = @total_fund_out, total_fund_out_fee = @total_fund_out_fee,
			total_settlement = @total_settlement, total_settlement_fee = @total_settlement_fee,
			end_balance = @end_balance

		SELECT request_date, statement_type, 
			statement_description = CASE statement_type WHEN 'FUNDIN' THEN 'Fund-In' WHEN 'FUNDOUT' THEN 'Fund-Out' ELSE statement_type END, 
			statement_amount, merchant_transaction_id, gateway_fee, gateway_percent,
			currency, merchant_amount_debit, merchant_amount_credit, merchant_balance_after
		FROM dbo.merchant_statement_myr WITH (NOLOCK)
		WHERE request_date BETWEEN @date_from AND @date_to
		AND merchant_code = @merchant_code
		AND currency = @currency
		AND payment_channel_id LIKE @payment_channel_id
		AND merchant_transaction_id LIKE @merchant_transaction_id
		ORDER BY statement_id DESC
		OFFSET ((@page-1)*@page_size) ROWS FETCH NEXT @page_size ROWS ONLY
	END
END
GO
/****** Object:  StoredProcedure [dbo].[spUserAuthenticatorGet]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserAuthenticatorGet]
(
	@user_guid varchar(20)
)
AS
BEGIN
/*
	EXEC spUserAuthenticatorGet @user_guid='43D7786F372542598FF0'
*/
	SET NOCOUNT ON;

	DECLARE @result_code INT, @error_message VARCHAR(8000)

	IF NOT EXISTS(SELECT user_guid FROM dbo.master_user WITH (NOLOCK) WHERE user_guid = @user_guid)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

	SELECT first_set_authenticator, key_authenticator
	FROM dbo.master_user WITH (NOLOCK)
	WHERE user_guid = @user_guid

END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupAdd]
(
	@level_id varchar(1),
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@user_group_name varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	
	rf_param spUserGroupAdd

	EXEC spUserGroupAdd @level_id='O', @company_id='000', @operator_id='00', @merchant_group_id='', @user_group_name='User Group 3', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(1000),
			@merchant_group_name nvarchar(100), @getdate datetime,
			@module_id_operator varchar(10), @module_id_merchant varchar(10), @module_id varchar(10)

	IF @level_id NOT IN ('O','M') OR @user_group_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Param'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT operator_id FROM dbo.master_operator WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Operator'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @level_id = 'M' AND NOT EXISTS(SELECT merchant_group_id FROM dbo.master_merchant_group WITH (NOLOCK) WHERE merchant_group_id = @merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Merchant Group'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT user_group_name FROM dbo.user_group WITH (NOLOCK) WHERE user_group_name = @user_group_name)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group Name already been used'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @module_id_operator = module_id FROM dbo.master_operator WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id
	SELECT @merchant_group_name = merchant_group_name, @module_id_merchant = module_id FROM dbo.master_merchant_group WITH (NOLOCK) WHERE merchant_group_id = @merchant_group_id
	
	SET @merchant_group_name = ISNULL(@merchant_group_name,'')
	SET @module_id = CASE @level_id WHEN 'O' THEN @module_id_operator WHEN 'M' THEN @module_id_merchant ELSE '' END

	BEGIN TRY
		BEGIN TRANSACTION
		
		SET @getdate = dbo.fnGetDateGMT7()

		INSERT INTO dbo.user_group(level_id, user_group_name, company_id, operator_id, merchant_group_id, merchant_group_name, module_id, create_date)
		VALUES(@level_id, @user_group_name, @company_id, @operator_id, @merchant_group_id, @merchant_group_name, @module_id, @getdate)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupAuthorizationAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupAuthorizationAdd]
(
	@user_group_menu_id int,
	@user_group_id int, 
	@user_group_name varchar(50), --graylog
	@menu_id varchar(10),
	@menu_name varchar(50), --graylog
	@authorization_id varchar(10),
	@authorization_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	select * from user_group_menu

	rf_param spUserGroupAuthorizationAdd

	EXEC spUserGroupAuthorizationAdd @user_group_menu_id=0, @user_group_id=0, @user_group_name='', @menu_id='', @menu_name='', @authorization_id='', @authorization_name='', @stamp_user=''

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(8000),
			@module_id varchar(10), @getdate datetime

	IF NOT EXISTS(SELECT user_group_menu_id FROM dbo.user_group_menu WITH (NOLOCK) WHERE user_group_menu_id = @user_group_menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group Menu not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF NOT EXISTS(SELECT user_group_id FROM dbo.user_group WITH (NOLOCK) WHERE user_group_id = @user_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT authorization_id FROM dbo.master_authorization WITH (NOLOCK) WHERE authorization_id = @authorization_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Authorization not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	IF EXISTS(SELECT authorization_id FROM dbo.user_group_authorization WITH (NOLOCK) WHERE user_group_id = @user_group_id AND authorization_id = @authorization_id)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Authorization already added'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT	@user_group_name = user_group_name,
			@module_id = module_id
	FROM dbo.user_group WITH (NOLOCK)
	WHERE user_group_id = @user_group_id

	BEGIN TRY
		BEGIN TRANSACTION
		
		SET @getdate = dbo.fnGetDateGMT7()

		INSERT INTO dbo.user_group_authorization(user_group_id, user_group_name, module_id, menu_id, authorization_id, create_date)
		VALUES(@user_group_id, @user_group_name, @module_id, @menu_id, @authorization_id, @getdate)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupAuthorizationDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupAuthorizationDelete]
(
	@user_group_authorization_id int, 
	@authorization_id varchar(10),
	@user_group_name varchar(50), --graylog
	@menu_name varchar(50), --graylog
	@authorization_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	select * from user_group_authorization

	rf_param spUserGroupAuthorizationDelete

	EXEC spUserGroupAuthorizationDelete @user_group_authorization_id=1, @authorization_id='UG001',@user_group_name='', @menu_name='', @authorization_name='', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(8000),
			@module_id varchar(10), @section_id varchar(10), 
			@company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20), @merchant_group_name nvarchar(100),
			@getdate datetime

	IF NOT EXISTS(SELECT user_group_authorization_id FROM dbo.user_group_authorization WITH (NOLOCK) WHERE user_group_authorization_id = @user_group_authorization_id AND authorization_id = @authorization_id)
	BEGIN
		SELECT @result_code = 1, @error_message = 'Authorization already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
		
		DELETE FROM dbo.user_group_authorization WHERE user_group_authorization_id = @user_group_authorization_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupDelete]
(
	@user_group_id int,
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@user_group_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*

	rf_param spUserGroupDelete

	EXEC spUserGroupDelete @user_group_id=3, @company_id='000', @operator_id='00', @merchant_group_id='', @user_group_name='', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(8000),
			@getdate datetime

	IF NOT EXISTS(SELECT user_group_id FROM dbo.user_group WITH (NOLOCK) WHERE user_group_id = @user_group_id AND company_id = @company_id 
		AND operator_id = @operator_id AND merchant_group_id = @merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT user_group_id FROM dbo.user_group_menu WITH (NOLOCK) WHERE user_group_id = @user_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group have Menu'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT user_group_id FROM dbo.user_group_user WITH (NOLOCK) WHERE user_group_id = @user_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group have User'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
		
		DELETE FROM dbo.user_group WHERE user_group_id = @user_group_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupEdit]
(
	@user_group_id int,
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@user_group_name varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*

	rf_param spUserGroupEdit

	EXEC spUserGroupEdit @user_group_id=4, @company_id='000', @operator_id='00', @merchant_group_id='', @user_group_name='User Group 3', @stamp_user=''
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(8000),
			@getdate datetime

	IF @user_group_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User Group Name'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT user_group_id FROM dbo.user_group WITH (NOLOCK) WHERE user_group_id = @user_group_id AND company_id = @company_id 
		AND operator_id = @operator_id AND merchant_group_id = @merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT user_group_id FROM dbo.user_group WITH (NOLOCK) WHERE user_group_id <> @user_group_id AND user_group_name = @user_group_name)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group Name already used'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
		
		UPDATE dbo.user_group
		SET user_group_name = @user_group_name
		WHERE user_group_id = @user_group_id

		UPDATE dbo.user_group_menu
		SET user_group_name = @user_group_name
		WHERE user_group_id = @user_group_id

		UPDATE dbo.user_group_user
		SET user_group_name = @user_group_name
		WHERE user_group_id = @user_group_id

		UPDATE dbo.user_group_authorization
		SET user_group_name = @user_group_name
		WHERE user_group_id = @user_group_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupEditStatus]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupEditStatus]
(
	@user_group_id int,
	@company_id varchar(3),
	@operator_id varchar(2),
	@type varchar(10), -- ACTIVE
	@status varchar(1),
	@stamp_guid varchar(20),
	@stamp_user varchar(20)
)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	------------
	DECLARE @result_code INT, @error_message VARCHAR(8000)

	IF @status NOT IN ('Y','N')
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Status invalid'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS (SELECT user_group_id FROM dbo.user_group WITH(NOLOCK) WHERE user_group_id = @user_group_id AND company_id = @company_id AND operator_id = @operator_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'user group not found'
		SELECT @result_code, @error_message
		RETURN
	END
	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		IF @type = 'ACTIVE'
		BEGIN
			UPDATE dbo.user_group
			SET status = @status,
				last_update = dbo.fnGetDateGMT7(),
				update_by = @stamp_user
			WHERE user_group_id = @user_group_id AND company_id = @company_id AND operator_id = @operator_id
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
	END CATCH

	------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupList]
(
	@level_id varchar(1), --C, O, M
	@company_id varchar(3) = '',
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	select * from user_group
	
	rf_param spUserGroupList

	EXEC spUserGroupList @level_id='C', @company_id='', @operator_id='', @merchant_group_id='', @page=1, @page_size=25, @stamp_user='opdem13'
	EXEC spUserGroupList @level_id='O', @company_id='', @operator_id='', @merchant_group_id='', @page=1, @page_size=25, @stamp_user='opdem13'
	EXEC spUserGroupList @level_id='M', @company_id='', @operator_id='', @merchant_group_id='', @page=1, @page_size=25, @stamp_user='developer13'
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(8000), 
			@total_rows int, @user_level_id varchar(1), @user_operator_id varchar(2), @user_company_id varchar(3), @user_merchant_group_id varchar(20)
	
	SELECT	@user_level_id = level_id,
			@user_company_id = company_id,
			@user_operator_id = operator_id,
			@user_merchant_group_id = merchant_group_id
	FROM dbo.master_user WITH (NOLOCK)
	WHERE user_login = @stamp_user

	IF (@user_level_id = 'D' AND @level_id NOT IN ('C','O','M'))
		OR (@user_level_id = 'C' AND @level_id NOT IN ('C','O','M'))
		OR (@user_level_id = 'O' AND @level_id NOT IN ('O','M'))
		OR (@user_level_id = 'M' AND @level_id NOT IN ('M'))
	BEGIN		
		SELECT @result_code = 39999, @error_message = 'Invalid Level'
		SELECT @result_code, @error_message
		RETURN
	END
	
	SELECT	@company_id = CASE WHEN @user_level_id IN ('C','O','M') THEN @user_company_id ELSE @company_id END,
			@operator_id = CASE WHEN @user_level_id IN ('O','M') THEN @user_operator_id ELSE @operator_id END,
			@merchant_group_id = CASE WHEN @user_level_id IN ('M') THEN @user_merchant_group_id ELSE @merchant_group_id END

	SELECT	@company_id = CASE WHEN @company_id = '' THEN '%' ELSE @company_id END,
			@operator_id = CASE WHEN @operator_id = '' THEN '%' ELSE @operator_id END,
			@merchant_group_id = CASE WHEN @merchant_group_id = '' THEN '%' ELSE @merchant_group_id END

	------------------------------------------------------------------------------
	
	SELECT @total_rows = COUNT(1)
	FROM dbo.user_group WITH (NOLOCK) 
	WHERE level_id = @level_id
	AND company_id LIKE @company_id
	AND operator_id LIKE @operator_id
	AND merchant_group_id LIKE @merchant_group_id

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows
	
	;WITH cte_user
	AS
	(
		SELECT user_group_id, user_login 
		FROM dbo.user_group_user WITH (NOLOCK) 
		WHERE level_id = @level_id
		AND company_id LIKE @company_id
		AND operator_id LIKE @operator_id
		AND merchant_group_id LIKE @merchant_group_id
	), cte_user_list
	AS
	(
		SELECT user_group_id, user_list = STUFF((SELECT ', '+c2.user_login FROM cte_user c2 WHERE c1.user_group_id = c2.user_group_id ORDER BY c2.user_login FOR XML PATH('')),1,2,'')
		FROM cte_user c1
		GROUP BY user_group_id
	)

	SELECT ug.user_group_id, ug.level_id, ug.user_group_name, ug.company_id, ug.operator_id, ug.merchant_group_id, ug.merchant_group_name,
		isAllowDelete = 'Y', ug.module_id,
		user_list = ISNULL(cte.user_list,'')
	FROM dbo.user_group ug WITH (NOLOCK)
	LEFT JOIN cte_user_list cte ON ug.user_group_id = cte.user_group_id
	WHERE ug.level_id = @level_id
	AND ug.company_id LIKE @company_id
	AND ug.operator_id LIKE @operator_id
	AND ug.merchant_group_id LIKE @merchant_group_id
	ORDER BY ug.operator_id, ug.merchant_group_id, ug.user_group_name
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupMenuAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupMenuAdd]
(
	@user_group_id int, 
	@user_group_name varchar(50), --graylog
	@menu_id varchar(10),
	@menu_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	rf_param spUserGroupMenuAdd

	EXEC spUserGroupMenuAdd @user_group_id=4, @user_group_name='', @menu_id='RPI', @menu_name='', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(8000),
			@module_id varchar(10), @section_id varchar(10), 
			@level_id varchar(1), @company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20), @merchant_group_name nvarchar(100),
			@getdate datetime

	IF NOT EXISTS(SELECT user_group_id FROM dbo.user_group WITH (NOLOCK) WHERE user_group_id = @user_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT menu_id FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT	@module_id = module_id,
			@user_group_name = user_group_name,
			@level_id = level_id,
			@company_id = company_id,
			@operator_id = operator_id,
			@merchant_group_id = merchant_group_id,
			@merchant_group_name = merchant_group_name
	FROM dbo.user_group WITH (NOLOCK) 
	WHERE user_group_id = @user_group_id

	IF NOT EXISTS(SELECT module_id FROM dbo.master_module_menu WITH (NOLOCK) WHERE module_id = @module_id AND menu_id = @menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu not found in Module'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @section_id = section_id FROM dbo.master_module_menu WITH (NOLOCK) WHERE module_id = @module_id AND menu_id = @menu_id
	SELECT @menu_name = menu_name FROM dbo.master_menu WITH (NOLOCK) WHERE menu_id = @menu_id

	BEGIN TRY
		BEGIN TRANSACTION
		
		SET @getdate = dbo.fnGetDateGMT7()

		INSERT INTO dbo.user_group_menu(user_group_id, user_group_name, level_id, company_id, operator_id, merchant_group_id, merchant_group_name, 
			module_id, section_id, menu_id, menu_name, create_date)
		VALUES(@user_group_id, @user_group_name, @level_id, @company_id, @operator_id, @merchant_group_id, @merchant_group_name, 
			@module_id, @section_id, @menu_id, @menu_name, @getdate)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupMenuAuthEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupMenuAuthEdit]
(
	@user_group_id int,
	@company_id varchar(3),
	@operator_id varchar(2),
	@auth_id varchar(10),
	@stamp_guid varchar(20),
	@stamp_user varchar(20)
)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	------------
	DECLARE @result_code INT, @error_message VARCHAR(8000), @type varchar(1), @module_id varchar(10)
	SELECT @type = 'ADD'
	------------------------------------------------------------------------
	
	IF NOT EXISTS (SELECT user_group_id FROM dbo.user_group WITH(NOLOCK) WHERE user_group_id = @user_group_id AND company_id = @company_id AND operator_id = @operator_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'user group not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	SELECT @module_id = module_id 
	FROM dbo.master_operator WHERE company_id = @company_id AND operator_id = @operator_id
	
	IF NOT EXISTS(SELECT module_id FROM dbo.master_module_authorization WITH(NOLOCK) WHERE module_id = @module_id AND authorization_id = @auth_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'user not exists'
		SELECT @result_code, @error_message
		RETURN
	END


	IF EXISTS (SELECT authorization_id FROM dbo.user_group_authorization WITH(NOLOCK) WHERE user_group_id = @user_group_id AND authorization_id = @auth_id)
	BEGIN
		SELECT @type = 'DELETE'
	END
	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		IF(@type = 'ADD')
		BEGIN
			INSERT INTO dbo.user_group_authorization(user_group_id, authorization_id)
			VALUES(@user_group_id, @auth_id)
		END
		ELSE IF(@type = 'DELETE')
		BEGIN
			DELETE FROM dbo.user_group_authorization 
			WHERE user_group_id = @user_group_id AND authorization_id = @auth_id
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
	END CATCH

	------------------------------------------------------------------------
	SELECT @result_code = 1, @error_message = ''

	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupMenuDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupMenuDelete]
(
	@user_group_menu_id int, 
	@user_group_id int, 
	@user_group_name varchar(50), --graylog
	@menu_id varchar(10),
	@menu_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	select * from user_group_menu 

	rf_param spUserGroupMenuDelete

	EXEC spUserGroupMenuDelete @user_group_menu_id=1, @user_group_id=4, @user_group_name='', @menu_id='RPI', @menu_name='', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(8000),
			@module_id varchar(10), @section_id varchar(10), 
			@company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20), @merchant_group_name nvarchar(100),
			@getdate datetime

	IF NOT EXISTS(SELECT user_group_menu_id FROM dbo.user_group_menu WITH (NOLOCK) WHERE user_group_menu_id = @user_group_menu_id 
		AND user_group_id = @user_group_id AND menu_id = @menu_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Menu already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		DELETE FROM dbo.user_group_menu 
		WHERE user_group_menu_id = @user_group_menu_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupMenuList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupMenuList]
(
	@user_group_id int,
	@user_group_name varchar(50), --graylog
	@section_id varchar(10),
	@stamp_user varchar(20)
)
AS
/*
	
	rf_param spUserGroupMenuList

	EXEC spUserGroupMenuList @user_group_id=4, @user_group_name='', @section_id='', @stamp_user='developer13'
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(8000),
			@total_rows int, @company_id varchar(3), @operator_id varchar(2), @module_id varchar(10), @level_id varchar(3),
			@merchant_group_id varchar(20), @merchant_group_name nvarchar(100)

	IF NOT EXISTS(SELECT user_group_id FROM dbo.user_group WITH (NOLOCK) WHERE user_group_id = @user_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SET @section_id = CASE WHEN @section_id = '' THEN '%' ELSE @section_id END

	SELECT	@level_id = level_id, @user_group_name = user_group_name, @company_id = company_id, @operator_id = operator_id, 
			@merchant_group_id = merchant_group_id
	FROM dbo.user_group WITH (NOLOCK) 
	WHERE user_group_id = @user_group_id

	SELECT @merchant_group_name = merchant_group_name FROM dbo.master_merchant_group WITH (NOLOCK) WHERE merchant_group_id = @merchant_group_id

	IF @level_id = 'O' --Operator
	BEGIN
		SELECT @module_id = module_id FROM dbo.master_operator WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id
	END
	IF @level_id = 'M' --Merchant
	BEGIN
		SELECT @module_id = module_id FROM dbo.master_merchant_group WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id AND @merchant_group_id = merchant_group_id
	END

	--------------------------------------------------------------------------------------------
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	--Menu
	SELECT um.user_group_menu_id, um.user_group_id, um.user_group_name, um.section_id, s.section_name, ms.section_order, um.menu_id, um.menu_name, mm.menu_order
	FROM dbo.user_group_menu um WITH (NOLOCK)
	LEFT JOIN dbo.master_module_section ms WITH (NOLOCK) ON um.module_id = ms.module_id AND um.section_id = ms.section_id
	LEFT JOIN dbo.master_module_menu mm WITH (NOLOCK) ON um.module_id = mm.module_id AND um.menu_id = mm.menu_id
	LEFT JOIN dbo.master_section s WITH (NOLOCK) ON um.section_id = s.section_id
	WHERE um.user_group_id = @user_group_id
	AND um.section_id LIKE @section_id

	UNION ALL

	SELECT user_group_menu_id = 0, user_group_id = '', user_group_name = '', mm.section_id, s.section_name, ms.section_order, mm.menu_id, mn.menu_name, mm.menu_order 
	FROM dbo.master_module_menu mm WITH (NOLOCK)
	INNER JOIN dbo.master_module_section ms WITH (NOLOCK) ON mm.module_id = ms.module_id AND mm.section_id = ms.section_id
	LEFT JOIN dbo.user_group_menu um WITH (NOLOCK) ON um.user_group_id = @user_group_id AND mm.module_id = um.module_id AND mm.menu_id = um.menu_id
	LEFT JOIN dbo.master_section s WITH (NOLOCK) ON mm.section_id = s.section_id
	LEFT JOIN dbo.master_menu mn WITH (NOLOCK) ON mm.menu_id = mn.menu_id
	WHERE um.menu_id IS NULL
	AND mm.module_id = @module_id
	AND mm.section_id LIKE @section_id
	AND mm.menu_id NOT IN ('USM','USO','USC','USG','UMG')  --User, User Group Menu, User Merchant Group (supervisor only)
	ORDER BY user_group_id DESC, section_order, menu_order


	--Authorization
	SELECT ua.user_group_authorization_id, ua.user_group_id, ua.user_group_name, ua.menu_id, m.menu_name, ua.authorization_id, a.authorization_name
	FROM dbo.user_group_authorization ua WITH (NOLOCK)
	INNER JOIN dbo.master_module_menu mm WITH (NOLOCK) ON ua.module_id = mm.module_id AND ua.menu_id = mm.menu_id
	LEFT JOIN dbo.master_menu m WITH (NOLOCK) ON ua.menu_id = m.menu_id
	LEFT JOIN dbo.master_authorization a WITH (NOLOCK) ON ua.authorization_id = a.authorization_id
	WHERE ua.user_group_id = @user_group_id
	AND mm.section_id LIKE @section_id
	
	UNION ALL

	SELECT user_group_menu_id = 0, user_group_id = '', user_group_name = '', ma.menu_id, m.menu_name, ma.authorization_id, a.authorization_name
	FROM dbo.master_module_authorization ma WITH (NOLOCK)
	INNER JOIN dbo.master_module_menu mm WITH (NOLOCK) ON ma.module_id = mm.module_id AND ma.menu_id = mm.menu_id
	LEFT JOIN dbo.user_group_authorization ua WITH (NOLOCK) ON ua.user_group_id = @user_group_id AND ma.module_id = ua.module_id AND ma.authorization_id = ua.authorization_id
	LEFT JOIN dbo.master_menu m WITH (NOLOCK) ON ma.menu_id = m.menu_id
	LEFT JOIN dbo.master_authorization a WITH (NOLOCK) ON ma.authorization_id = a.authorization_id
	WHERE ua.authorization_id IS NULL
	AND ma.module_id = @module_id
	AND mm.section_id LIKE @section_id
	AND mm.menu_id NOT IN ('USM','USO','USC','USG','UMG')  --User, User Group Menu, User Merchant Group (supervisor only)
	ORDER BY menu_id, user_group_id DESC, authorization_name
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupUserAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupUserAdd]
(
	@user_group_id int,
	@user_group_name varchar(50), --graylog
	@user_login varchar(20),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	rf_param spUserGroupUserAdd

	EXEC spUserGroupUserAdd @user_group_id=4, @user_group_name='', @user_login='opdem13', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@level_id varchar(1), @company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20), @merchant_group_name nvarchar(100),
			@getdate datetime, @user_guid varchar(20)

	IF NOT EXISTS(SELECT user_group_id FROM dbo.user_group WITH (NOLOCK) WHERE user_group_id = @user_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT	@level_id = level_id,
			@company_id = company_id, 
			@operator_id = operator_id, 
			@merchant_group_id = merchant_group_id,
			@user_group_name = user_group_name
	FROM dbo.user_group WITH (NOLOCK) 
	WHERE user_group_id = @user_group_id

	SELECT @merchant_group_name = merchant_group_name FROM dbo.master_merchant_group WITH (NOLOCK) WHERE merchant_group_id = @merchant_group_id

	IF NOT EXISTS(SELECT user_login FROM dbo.master_user WITH (NOLOCK) WHERE level_id = @level_id AND company_id = @company_id AND 
		operator_id = @operator_id AND merchant_group_id = @merchant_group_id AND user_login = @user_login)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @user_guid = user_guid FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @user_login

	BEGIN TRY
		BEGIN TRANSACTION
		
		SET @getdate = dbo.fnGetDateGMT7()

		DELETE FROM dbo.user_group_user WHERE user_login = @user_login

		INSERT INTO dbo.user_group_user(user_group_id, user_group_name, level_id, company_id, operator_id, merchant_group_id, merchant_group_name, 
			user_guid, user_login, create_date)
		VALUES(@user_group_id, @user_group_name, @level_id, @company_id, @operator_id, @merchant_group_id, @merchant_group_name, 
			@user_guid, @user_login, @getdate)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupUserDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupUserDelete]
(
	@user_group_user_id int,
	@user_group_id int,
	@user_group_name varchar(50), --graylog
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@user_login varchar(20),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	rf_param spUserGroupUserDelete

	EXEC spUserGroupUserDelete @user_group_user_id=2, @user_group_id=4, @user_group_name='', @company_id='000', @operator_id='00', @merchant_group_id='', @user_login='opdem13', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)

	IF NOT EXISTS(SELECT user_group_user_id FROM dbo.user_group_user WITH (NOLOCK) WHERE user_group_user_id = @user_group_user_id AND company_id = @company_id
		AND operator_id = @operator_id AND merchant_group_id = @merchant_group_id AND user_login = @user_login)
	BEGIN
		SELECT @result_code = 1, @error_message = 'User already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		DELETE FROM dbo.user_group_user WHERE user_group_user_id = @user_group_user_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupUserEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupUserEdit]
(
	@user_group_id int,
	@company_id varchar(3),
	@operator_id varchar(2),
	@user_guid varchar(20),
	@stamp_guid varchar(20),
	@stamp_user varchar(20)
)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	------------
	DECLARE @result_code INT, @error_message VARCHAR(8000), @type varchar(1)
	SELECT @type = 'ADD'
	------------------------------------------------------------------------


	IF NOT EXISTS(SELECT user_guid FROM dbo.master_user WITH(NOLOCK) WHERE user_guid = @user_guid)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'user not exists'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS (SELECT user_group_id FROM dbo.user_group WITH(NOLOCK) WHERE user_group_id = @user_group_id AND company_id = @company_id AND operator_id = @operator_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'user group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS (SELECT user_guid FROM dbo.user_group_user WITH(NOLOCK) WHERE user_group_id = @user_group_id)
	BEGIN
		SELECT @type = 'DELETE'
	END
	------------------------------------------------------------------------
	BEGIN TRY
		BEGIN TRANSACTION

		IF(@type = 'ADD')
		BEGIN
			INSERT INTO dbo.user_group_user(user_group_id, user_guid)
			VALUES(@user_group_id, @user_guid)
		END
		ELSE IF(@type = 'DELETE')
		BEGIN
			DELETE FROM dbo.user_group_user 
			WHERE user_group_id = @user_group_id AND user_guid = @user_guid
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION

		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
	END CATCH

	------------------------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserGroupUserList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserGroupUserList]
(
	@user_group_id int,
	@user_group_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
/*
	Desc : 1 User = 1 User Group

	rf_param spUserGroupUserList 

	EXEC spUserGroupUserList @user_group_id=4, @user_group_name='', @stamp_user='developer13'

*/
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@level_id varchar(1), @company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20)

	IF NOT EXISTS(SELECT user_group_id FROM dbo.user_group WITH (NOLOCK) WHERE user_group_id = @user_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT	@level_id = level_id,
			@company_id = company_id,
			@operator_id = operator_id,
			@merchant_group_id = merchant_group_id
	FROM dbo.user_group WITH (NOLOCK)
	WHERE user_group_id = @user_group_id

	----------------------------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT	user_group_user_id, user_group_id, user_group_name, company_id, operator_id, merchant_group_id, user_login,
			assign_user_group_name = ''
	FROM dbo.user_group_user WITH (NOLOCK)
	WHERE user_group_id = @user_group_id

	UNION ALL

	SELECT	user_group_user_id = 0, user_group_id = '', user_group_name = '', u.company_id, u.operator_id, u.merchant_group_id, u.user_login, 
			assign_user_group_name = ISNULL(uu2.user_group_name,'')
	FROM dbo.master_user u WITH (NOLOCK)
	LEFT JOIN dbo.user_group_user uu WITH (NOLOCK) ON uu.user_group_id = @user_group_id AND u.user_login = uu.user_login
	LEFT JOIN dbo.user_group_user uu2 WITH (NOLOCK) ON uu.user_group_id <> @user_group_id AND u.user_login = uu2.user_login
	WHERE uu.user_login IS NULL
	AND u.status_manager = 'N'
	AND u.status_supervisor = 'N'
	AND u.status_active = 'Y'
	AND u.status_hidden = 'N'
	AND u.level_id = @level_id
	AND u.company_id = @company_id
	AND u.operator_id = @operator_id
	AND u.merchant_group_id = @merchant_group_id
	ORDER BY user_group_id DESC, user_login
END
GO
/****** Object:  StoredProcedure [dbo].[spUserLogin]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserLogin]
(
	@IP varchar(15),
	@Password varchar(255),
	@UserLogin varchar(20),
	@Origin varchar(1),
	@Version nvarchar(100)='',
	@finger_print varchar(500) = '',
	@canvas_id varchar(500) = ''
)
AS
BEGIN
/*
	logout_status : 1-Manual, 2-Relogin, 3-Force Logoff
 
	SELECT top 10 * FROM dbo.[user_session_hist] WITH (NOLOCK) order by login_date desc
	SELECT * FROM dbo.[user] WITH (NOLOCK)
	SELECT * FROM dbo.[host] WITH (NOLOCK)
	EXEC spUserLogin @SessionID='0a60719d-884e-4516-8ce2-db20864d0bb4', @IP='127.0.0.1', @Password='482c811da5d5b4bc6d497ffa98491e38', @UserLogin='rf', @HostAddress='bo.harian88.id'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
 
	------------
	DECLARE @result_code int, @error_message varchar(8000),
			@login_date datetime, 
			@CompanyID varchar(3), @OperatorID varchar(2),
			@company_name nvarchar(50), @operator_name nvarchar(50),
			@status_authenticator varchar(1), @key_authenticator varchar(64),
			@user_id int, @table_password varchar(255), @status_active varchar(1), @status_suspend varchar(1),
			@login_fail int, @login_retry_date datetime, @status_first_login varchar(1), @UserGUID varchar(20),
			@user_group varchar(10), @session_token varchar(150),
			@session_id bigint, @level_id varchar(1), @settlement_password varchar(255), @settlement_password_status varchar(1),
			@merchant_group_id varchar(20) 
	------------------------------------------------
	SELECT @login_date = GETDATE(), @session_id = 0

	--* user admin sekarang unique for all
	IF NOT EXISTS(SELECT user_guid FROM dbo.[master_user] WITH (NOLOCK) WHERE user_login = @UserLogin) 
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User not found'
		SELECT @result_code, @error_message
		RETURN
	END
	ELSE
	BEGIN
		SELECT @session_id = user_session_id FROM dbo.[user_session] WITH (NOLOCK) WHERE user_login = @UserLogin AND origin =@Origin
	END

	------------------------------------------------
	--* user admin sekarang unique for all  
	SELECT	
		@CompanyID = company_id, 
		@OperatorID = operator_id, 
		@user_id = [user_id],
		@table_password = [password], 
		@status_active = status_active, 
		@status_suspend = status_suspend,
		@login_fail = login_fail, 
		@login_retry_date = login_retry_date, 
		@status_first_login = status_first_login,
		@UserGUID = user_guid, 
		@status_authenticator = status_authenticator,
		@key_authenticator = key_authenticator, 
		@level_id = level_id,
		@merchant_group_id = merchant_group_id
	FROM dbo.master_user WITH (NOLOCK)
	WHERE user_login = @UserLogin

	SELECT @company_name = company_name FROM dbo.master_company WITH(NOLOCK) WHERE company_id = @CompanyID

	SELECT @operator_name = operator_name FROM dbo.master_operator WITH(NOLOCK) WHERE operator_id = @OperatorID

	SELECT @user_id = ISNULL(@user_id,0), @table_password = ISNULL(@table_password,'')
 
	-----------------------------------------------------------------
	--@retVal
	IF @status_suspend = 'Y' AND @login_retry_date > @login_date
	BEGIN
		-- Login Again in 10 Minutes
		SELECT @result_code = 70000, @error_message = 'Login Again in 10 Minutes'
		SELECT @result_code, @error_message
		RETURN
	END
	ELSE IF (@user_id = 0) OR (@Password <> @table_password)
	BEGIN
		UPDATE dbo.[master_user] 
		SET @login_fail = login_fail + 1,
			login_fail = @login_fail,
			login_retry_date = @login_date + '00:10:00',
			status_suspend = case @login_fail when 5 THEN 'Y' ELSE status_suspend END
		WHERE [company_id] = @CompanyID
		AND [operator_id] = @OperatorID
		AND [user_login] = @UserLogin
  
		IF (@user_id = 0) 
		BEGIN
			-- User Not Found
			SELECT @result_code = 70001, @error_message = 'Invalid Username/Password'
			SELECT @result_code, @error_message
			RETURN
		END
		ELSE IF (@Password <> @table_password)
		BEGIN
			IF (@login_fail >= 3)
			BEGIN
				SELECT @result_code = 70018, @error_message = 'Invalid Username/Password'
				SELECT @result_code, @error_message
				RETURN
			END
			ELSE
			BEGIN
				SELECT @result_code = 70017, @error_message = 'Invalid Username/Password'
				SELECT @result_code, @error_message
				RETURN
			END
		END  
	END
	ELSE IF @status_active = 'N'
	BEGIN
		SELECT @result_code = 70002, @error_message = 'User Inactive'
		SELECT @result_code, @error_message
		RETURN
	END
 
	-----------------------------------------------------------------
	--check user already login, and prevent double login
	--DECLARE @user_session_id BIGint, @table_session_id varchar(150)

	--SELECT @user_session_id = user_session_id, @table_session_id = session_id
	--FROM dbo.user_session WITH (NOLOCK) 
	--WHERE [user_id] = @user_id

	--SET @user_session_id = ISNULL(@user_session_id,0)
	--SET @table_session_id = ISNULL(@table_session_id,'')

	--DECLARE @usergroup_id int
	--SELECT @usergroup_id = usergroup_id FROM dbo.usergroup_user WITH (NOLOCK) WHERE user_login = @UserLogin

	--SET @usergroup_id = ISNULL(@usergroup_id,0)

	----check have menu or not
	--IF @StatusDeveloper = 'N' AND (SELECT COUNT(1)
	-- FROM dbo.usergroup ug WITH (NOLOCK)
	-- INNER JOIN dbo.usergroup_menu um WITH (NOLOCK) ON ug.usergroup_id = um.usergroup_id
	-- WHERE ug.usergroup_id = @usergroup_id) = 0
	--BEGIN
	-- SELECT @result_code = 39999, @error_message = 'User not have menu assigned'
	-- SELECT @result_code, @error_message
	-- RETURN
	--END
 

	--@user_session_id
	BEGIN TRY
		BEGIN TRANSACTION

		IF @session_id > 0 
		BEGIN
			INSERT intO dbo.user_session_hist (user_session_id, company_id, company_name, operator_id, operator_name, [user_id], user_login, 
				session_token, login_date, login_ip, logout_date, logout_status, level_id, user_guid,origin)
			SELECT user_session_id, company_id, company_name, operator_id, operator_name, [user_id], user_login, 
				session_token, login_date, login_ip, GETDATE(), 'RELOGIN', level_id, user_guid,origin
			FROM dbo.user_session WITH (NOLOCK)
			WHERE user_session_id = @session_id 
			AND origin = @origin

			DELETE FROM dbo.user_session WHERE user_session_id = @session_id AND origin=@origin
		END
		----------

		SET @session_token = NEWID();

		INSERT intO dbo.user_session (company_id, company_name, operator_id, operator_name, [user_id], user_login, session_token, login_date, login_ip, level_id, user_guid,origin)
		VALUES(@CompanyID, @company_name, @OperatorID, @operator_name, @user_id, @UserLogin, @session_token, @login_date, @IP, @level_id, @UserGUID,@origin)
  
		UPDATE dbo.master_user
		SET login_fail = 0,
			login_retry_date = @login_date,
			status_suspend = 'N',
			last_login = @login_date,
			finger_print = @finger_print,
			canvas_id = @canvas_id
		WHERE user_login = @UserLogin

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH
	
	-----------------------------------
	--get User Group
	--DECLARE @UserGroup varchar(8000)
	--SET @UserGroup = ''

	--IF @StatusDeveloper = 'N'
	--BEGIN
	-- ;WITH cteUserGroup(usergroup_name)
	-- AS  
	-- (
	--  SELECT DISTINCT u.usergroup_name
	--  FROM dbo.usergroup u WITH (NOLOCK)
	--  INNER JOIN dbo.[usergroup_user] us WITH (NOLOCK) ON u.usergroup_id = us.usergroup_id
	--  WHERE us.user_guid = @UserGUID
	--  AND u.status_active = 'Y'
	-- )

	-- SELECT @UserGroup = @UserGroup + usergroup_name + ','
	-- FROM cteUserGroup 

	--END

	--cek settlement password
	--SELECT @settlement_password=settlement_password
	--FROM master_operator WITH (NOLOCK)
	--WHERE  operator_id=@OperatorID

	--IF @settlement_password='d41d8cd98f00b204e9800998ecf8427e'
	--BEGIN
	-- SET @settlement_password_status ='Y'
	--END
	--ELSE
	--BEGIN
	-- SET @settlement_password_status='N' 
	--END 
	-------------------------------------
	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message

	SELECT 
		[user_id] = @user_id,
		session_token = @session_token,
		user_group = @user_group,
		status_first_login = @status_first_login,
		company_id = @CompanyID,
		operator_id = @OperatorID, 
		user_guid = @UserGUID,
		status_authenticator = @status_authenticator,
		key_authenticator = @key_authenticator,
		settlement_password_status = @settlement_password_status,
		level_id = @level_id,
		currency = 'ALL',
		merchant_group_id = @merchant_group_id
END
GO
/****** Object:  StoredProcedure [dbo].[spUserLogout]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserLogout]
(
	@session_token VARCHAR(150)
)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(8000),
			@session_id bigint

	SELECT @session_id = user_session_id FROM dbo.user_session WITH(NOLOCK) WHERE session_token = @session_token

	BEGIN TRY
		BEGIN TRANSACTION

		INSERT INTO dbo.user_session_hist(user_session_id, company_id, company_name, operator_id, operator_name, [user_id], user_login, 
			session_token, login_date, login_ip, logout_date, level_id, user_guid, logout_status,origin)
		SELECT user_session_id, company_id, company_name, operator_id, operator_name, [user_id], user_login,
			session_token, login_date, login_ip, GETDATE(), level_id, user_guid, 'MANUAL',origin 
		FROM dbo.user_session WITH (NOLOCK)
		WHERE user_session_id = @session_id

		DELETE FROM dbo.user_session WHERE user_session_id = @session_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE() + CAST(ERROR_LINE() AS VARCHAR)
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = 'Success'
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserMerchantGroupAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserMerchantGroupAdd]
(
	@level_id varchar(1),
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@user_merchant_group_name varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	
	rf_param spUserMerchantGroupAdd

	EXEC spUserMerchantGroupAdd @level_id='O', @company_id='000', @operator_id='00', @merchant_group_id='', @user_merchant_group_name='OP Merchant 01', @stamp_user='developer13'
	EXEC spUserMerchantGroupAdd @level_id='M', @company_id='000', @operator_id='00', @merchant_group_id='MGDEV', @user_merchant_group_name='MG Merchant 01', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(8000),
			@merchant_group_name nvarchar(100), @getdate datetime

	IF @level_id NOT IN ('O','M') OR @user_merchant_group_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Param'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT operator_id FROM dbo.master_operator WITH (NOLOCK) WHERE company_id = @company_id AND operator_id = @operator_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Operator'
		SELECT @result_code, @error_message
		RETURN
	END

	IF @level_id = 'M' AND NOT EXISTS(SELECT merchant_group_id FROM dbo.master_merchant_group WITH (NOLOCK) 
		WHERE company_id = @company_id AND operator_id = @operator_id AND merchant_group_id = @merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid Merchant Group'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT user_merchant_group_name FROM dbo.user_merchant_group WITH (NOLOCK) WHERE user_merchant_group_name = @user_merchant_group_name)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group Name already been used'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
		
		SET @getdate = dbo.fnGetDateGMT7()

		INSERT INTO dbo.user_merchant_group(level_id, user_merchant_group_name, company_id, operator_id, merchant_group_id, create_date)
		VALUES(@level_id, @user_merchant_group_name, @company_id, @operator_id, @merchant_group_id, @getdate)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserMerchantGroupDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserMerchantGroupDelete]
(
	@user_merchant_group_id int,
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@user_merchant_group_name varchar(20), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*

	rf_param spUserMerchantGroupDelete

	EXEC spUserMerchantGroupDelete @user_merchant_group_id=1, @company_id='000', @operator_id='00', @merchant_group_id='', @user_merchant_group_name='', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)

	IF NOT EXISTS(SELECT user_merchant_group_id FROM dbo.user_merchant_group WITH (NOLOCK) WHERE user_merchant_group_id = @user_merchant_group_id AND company_id = @company_id 
		AND operator_id = @operator_id AND merchant_group_id = @merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Merchant Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT user_merchant_group_id FROM dbo.user_merchant_group_merchant WITH (NOLOCK) WHERE user_merchant_group_id = @user_merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Merchant Group have Merchant'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT user_merchant_group_id FROM dbo.user_merchant_group_user WITH (NOLOCK) WHERE user_merchant_group_id = @user_merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Merchant Group have User'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
		
		DELETE FROM dbo.user_merchant_group WHERE user_merchant_group_id = @user_merchant_group_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserMerchantGroupEdit]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserMerchantGroupEdit]
(
	@user_merchant_group_id int,
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@user_merchant_group_name varchar(50),
	@stamp_user varchar(20)
)
AS
BEGIN
/*

	rf_param spUserMerchantGroupEdit

	EXEC spUserMerchantGroupEdit @user_merchant_group_id=1, @company_id='000', @operator_id='00', @merchant_group_id='', @user_merchant_group_name='OP Merch 01', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(8000),
			@getdate datetime

	IF @user_merchant_group_name = ''
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Invalid User Group Name'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT user_merchant_group_id FROM dbo.user_merchant_group WITH (NOLOCK) WHERE user_merchant_group_id = @user_merchant_group_id AND company_id = @company_id 
		AND operator_id = @operator_id AND merchant_group_id = @merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF EXISTS(SELECT user_merchant_group_id FROM dbo.user_merchant_group WITH (NOLOCK) 
		WHERE user_merchant_group_id <> @user_merchant_group_id AND user_merchant_group_name = @user_merchant_group_name)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group Name already used'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
		
		UPDATE dbo.user_merchant_group
		SET user_merchant_group_name = @user_merchant_group_name
		WHERE user_merchant_group_id = @user_merchant_group_id

		UPDATE dbo.user_merchant_group_merchant
		SET user_merchant_group_name = @user_merchant_group_name
		WHERE user_merchant_group_id = @user_merchant_group_id

		UPDATE dbo.user_merchant_group_user
		SET user_merchant_group_name = @user_merchant_group_name
		WHERE user_merchant_group_id = @user_merchant_group_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserMerchantGroupList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserMerchantGroupList]
(
	@level_id varchar(1), --C, O, M
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@page int,
	@page_size int,
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	select * from user_merchant_group
	
	rf_param spUserMerchantGroupList

	EXEC spUserMerchantGroupList @level_id='O', @company_id='', @operator_id='', @merchant_group_id='', @page=1, @page_size=25, @stamp_user='developer13'
	EXEC spUserMerchantGroupList @level_id='M', @company_id='', @operator_id='', @merchant_group_id='', @page=1, @page_size=25, @stamp_user='developer13'
*/
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(1000), 
			@total_rows int, @user_level_id varchar(1), @user_company_id varchar(3), @user_operator_id varchar(2), @user_merchant_group_id varchar(20)
	
	SELECT	@user_level_id = level_id,
			@user_company_id = company_id,
			@user_operator_id = operator_id,
			@user_merchant_group_id = merchant_group_id
	FROM dbo.master_user WITH (NOLOCK)
	WHERE user_login = @stamp_user

	IF	(@user_level_id IN ('D','C') AND @level_id NOT IN ('C','O','M'))
		OR (@user_level_id = 'O' AND @level_id NOT IN ('O','M'))
		OR (@user_level_id = 'M' AND @level_id NOT IN ('M'))
	BEGIN		
		SELECT @result_code = 39999, @error_message = 'Invalid Level'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT	@company_id = CASE WHEN @user_level_id IN ('C','O','M') THEN @user_company_id ELSE @company_id END,
			@operator_id = CASE WHEN @user_level_id IN ('O','M') THEN @user_operator_id ELSE @operator_id END,
			@merchant_group_id = CASE WHEN @user_level_id IN ('M') THEN @user_merchant_group_id ELSE @merchant_group_id END

	SELECT	@company_id = CASE @company_id WHEN '' THEN '%' ELSE @company_id END,
			@operator_id = CASE @operator_id WHEN '' THEN '%' ELSE @operator_id END,
			@merchant_group_id = CASE @merchant_group_id WHEN '' THEN '%' ELSE @merchant_group_id END
	
	------------------------------------------------------------------------------
	
	SELECT @total_rows = COUNT(1)
	FROM dbo.user_merchant_group WITH (NOLOCK) 
	WHERE level_id = @level_id
	AND company_id LIKE @company_id
	AND operator_id LIKE @operator_id
	AND merchant_group_id LIKE @merchant_group_id

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT total_rows = @total_rows
	
	;WITH cte_used
	AS
	(	
		SELECT user_merchant_group_id
		FROM dbo.user_merchant_group_user WITH (NOLOCK) 
		WHERE level_id = @level_id
		AND company_id LIKE @company_id
		AND operator_id LIKE @operator_id
		AND merchant_group_id LIKE @merchant_group_id
		GROUP BY user_merchant_group_id
		
		UNION

		SELECT user_merchant_group_id 
		FROM dbo.user_merchant_group_merchant WITH (NOLOCK) 
		WHERE level_id = @level_id
		AND company_id LIKE @company_id
		AND operator_id LIKE @operator_id
		AND merchant_group_id LIKE @merchant_group_id
		GROUP BY user_merchant_group_id
	), cte_user
	AS
	(
		SELECT user_merchant_group_id, user_login
		FROM dbo.user_merchant_group_user WITH (NOLOCK) 
		WHERE level_id = @level_id
		AND company_id LIKE @company_id
		AND operator_id LIKE @operator_id
		AND merchant_group_id LIKE @merchant_group_id		
	), cte_group_user
	AS
	(
		SELECT user_merchant_group_id, user_list = STUFF((SELECT ', '+c2.user_login FROM cte_user c2 WHERE c1.user_merchant_group_id = c2.user_merchant_group_id 
			ORDER BY user_login FOR XML PATH('')),1,2,'')
		FROM cte_user c1
		GROUP BY user_merchant_group_id
	), cte_merchant
	AS
	(	-- Merchant Name 2		 IDR		 QR
		SELECT user_merchant_group_id, merchant_name, currency, payment_channel_id
		FROM dbo.user_merchant_group_merchant WITH (NOLOCK) 
		WHERE level_id = @level_id
		AND company_id LIKE @company_id
		AND operator_id LIKE @operator_id
		AND merchant_group_id LIKE @merchant_group_id		
	), cte_merchant_payment_channel
	AS
	(	-- Merchant Name 2		 IDR		 IB,QR,VA
		SELECT user_merchant_group_id, merchant_name, currency, channel_list = STUFF((SELECT ', '+c2.payment_channel_id
			FROM cte_merchant c2 WHERE c1.user_merchant_group_id = c2.user_merchant_group_id AND c1.merchant_name = c2.merchant_name
			AND c1.currency = c2.currency ORDER BY c2.payment_channel_id FOR XML PATH('')),1,2,'')
		FROM cte_merchant c1
		GROUP BY user_merchant_group_id, merchant_name, currency
	), cte_merchant_currency
	AS
	(	-- Merchant Name 2		 (IDR-IB,QR,VA), (THB-IB)
		SELECT user_merchant_group_id, merchant_name, currency_list = STUFF((SELECT ', ('+c2.currency+'-'+c2.channel_list+')'
			FROM cte_merchant_payment_channel c2 WHERE c1.user_merchant_group_id = c2.user_merchant_group_id AND c1.merchant_name = c2.merchant_name
			ORDER BY c2.currency FOR XML PATH('')),1,2,'')
		FROM cte_merchant_payment_channel c1
		GROUP BY user_merchant_group_id, merchant_name
	), cte_group_merchant
	AS
	(	--Merchant Name 2 (IDR-IB,QR,VA), (THB-IB)\n Merchant Global (IDR-QR), (THB-QR)
		SELECT user_merchant_group_id, merchant_list = STUFF((SELECT ', '+c2.merchant_name+' '+c2.currency_list+'\n'
			FROM cte_merchant_currency c2 WHERE c1.user_merchant_group_id = c2.user_merchant_group_id ORDER BY c2.merchant_name FOR XML PATH('')),1,2,'')
		FROM cte_merchant_currency c1
		GROUP BY user_merchant_group_id
	)

	SELECT ug.user_merchant_group_id, ug.level_id, ug.user_merchant_group_name, ug.company_id, ug.operator_id, ug.merchant_group_id, 
		merchant_group_name = ISNULL(m.merchant_group_name,''), isAllowDelete = CASE WHEN cte.user_merchant_group_id IS NULL THEN 'Y' ELSE 'N' END,
		user_list = ISNULL(cuser.user_list,''),
		merchant_list = ISNULL(cmc.merchant_list,'')
	FROM dbo.user_merchant_group ug WITH (NOLOCK)
	LEFT JOIN dbo.master_merchant_group m WITH (NOLOCK) ON ug.merchant_group_id = m.merchant_group_id
	LEFT JOIN cte_used cte ON ug.user_merchant_group_id = cte.user_merchant_group_id
	LEFT JOIN cte_group_user cuser ON ug.user_merchant_group_id = cuser.user_merchant_group_id
	LEFT JOIN cte_group_merchant cmc ON ug.user_merchant_group_id = cmc.user_merchant_group_id
	WHERE ug.level_id = @level_id
	AND ug.company_id LIKE @company_id
	AND ug.operator_id LIKE @operator_id
	AND ug.merchant_group_id LIKE @merchant_group_id
	ORDER BY ug.company_id, ug.operator_id, ug.user_merchant_group_name
	OFFSET (@page * @page_size) - @page_size ROWS FETCH NEXT @page_size ROWS ONLY
END
GO
/****** Object:  StoredProcedure [dbo].[spUserMerchantGroupMerchantAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserMerchantGroupMerchantAdd]
(
	@user_merchant_group_id int, 
	@user_merchant_group_name varchar(50), --graylog
	@merchant_id varchar(10),
	@merchant_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	user_merchant_group_merchant 

	rf_param spUserMerchantGroupMerchantAdd

	EXEC spUserMerchantGroupMerchantAdd 
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(8000),
			@level_id varchar(1), @company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20), @merchant_group_name nvarchar(100),
			@getdate datetime, @merchant_code varchar(20), @currency varchar(10), @payment_channel_id varchar(20)

	IF NOT EXISTS(SELECT user_merchant_group_id FROM dbo.user_merchant_group WITH (NOLOCK) WHERE user_merchant_group_id = @user_merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	IF NOT EXISTS(SELECT merchant_id FROM dbo.merchant_list WITH (NOLOCK) WHERE merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT	@user_merchant_group_name = user_merchant_group_name,
			@level_id = level_id,
			@company_id = company_id,
			@operator_id = operator_id,
			@merchant_group_id = merchant_group_id
	FROM dbo.user_merchant_group WITH (NOLOCK) 
	WHERE user_merchant_group_id = @user_merchant_group_id

	SELECT	@merchant_name = merchant_name,
			@merchant_code = merchant_code,
			@currency = currency,
			@payment_channel_id = payment_channel_id
	FROM dbo.merchant_list WITH (NOLOCK) 
	WHERE merchant_id = @merchant_id

	BEGIN TRY
		BEGIN TRANSACTION
		
		SET @getdate = dbo.fnGetDateGMT7()

		IF NOT EXISTS(SELECT user_merchant_group_id FROM dbo.user_merchant_group_merchant WITH (NOLOCK) 
			WHERE user_merchant_group_id = @user_merchant_group_id AND merchant_id = @merchant_id)
		BEGIN
			INSERT INTO dbo.user_merchant_group_merchant(user_merchant_group_id, user_merchant_group_name, 
				level_id, company_id, operator_id, merchant_group_id, merchant_code, merchant_id, merchant_name, currency, payment_channel_id,
				create_date)
			VALUES(@user_merchant_group_id, @user_merchant_group_name, 
				@level_id, @company_id, @operator_id, @merchant_group_id, @merchant_code, @merchant_id, @merchant_name, @currency, @payment_channel_id,
				@getdate)
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserMerchantGroupMerchantDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserMerchantGroupMerchantDelete]
(
	@user_merchant_group_merchant_id int, 
	@user_merchant_group_id int, 
	@user_merchant_group_name varchar(50), --graylog
	@merchant_id varchar(10),
	@merchant_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	rf_param spUserMerchantGroupMerchantDelete

	EXEC spUserMerchantGroupMerchantDelete
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code INT, @error_message VARCHAR(8000),
			@company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20), @merchant_group_name nvarchar(100)

	IF NOT EXISTS(SELECT user_merchant_group_merchant_id FROM dbo.user_merchant_group_merchant WITH (NOLOCK) 
		WHERE user_merchant_group_merchant_id = @user_merchant_group_merchant_id AND merchant_id = @merchant_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'Merchant already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
		
		DELETE FROM dbo.user_merchant_group_merchant WHERE user_merchant_group_merchant_id = @user_merchant_group_merchant_id
	
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserMerchantGroupMerchantList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserMerchantGroupMerchantList]
(
	@user_merchant_group_id int,
	@merchant_group_id varchar(20),
	@currency varchar(10),
	@payment_channel_id varchar(20),
	@user_merchant_group_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
/*	
	rf_param spUserMerchantGroupMerchantList

	EXEC spUserMerchantGroupMerchantList @user_merchant_group_id=4, @user_merchant_group_name='', @stamp_user='developer13'
*/
BEGIN
	SET NOCOUNT ON
	
	DECLARE @result_code INT, @error_message VARCHAR(8000),
			@level_id varchar(3), @company_id varchar(3), @operator_id varchar(2),  @merchant_group_name nvarchar(100),
			@merchant_group_id_usergroup varchar(20)

	IF NOT EXISTS(SELECT user_merchant_group_id FROM dbo.user_merchant_group WITH (NOLOCK) WHERE user_merchant_group_id = @user_merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Merchant Group not found'
		SELECT @result_code, @error_message
		RETURN
	END
	
	SELECT	@level_id = level_id,
			@company_id = company_id,
			@operator_id = operator_id,
			@merchant_group_id_usergroup = merchant_group_id
	FROM dbo.user_merchant_group WITH (NOLOCK)
	WHERE user_merchant_group_id = @user_merchant_group_id
	
	IF @level_id = 'M'
	BEGIN
		SET @merchant_group_id = @merchant_group_id_usergroup

		IF @merchant_group_id_usergroup = ''
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Merchant Group'
			SELECT @result_code, @error_message
			RETURN
		END
	END
	
	SET @merchant_group_id = CASE WHEN @merchant_group_id = '' THEN '%' ELSE @merchant_group_id END
	SET @currency = CASE WHEN @currency = '' THEN '%' ELSE @currency END
	SET @payment_channel_id = CASE WHEN @payment_channel_id = '' THEN '%' ELSE @payment_channel_id END

	--------------------------------------------------------------------------------------------
	
	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	--Merchant
	SELECT	um.user_merchant_group_merchant_id, um.user_merchant_group_id, um.user_merchant_group_name,
			um.company_id, um.operator_id, um.merchant_group_id, mm.merchant_group_name, um.merchant_id, m.merchant_name, m.currency, m.payment_channel_id
	FROM dbo.user_merchant_group_merchant um WITH (NOLOCK)
	LEFT JOIN dbo.master_merchant_group mm WITH (NOLOCK) ON um.merchant_group_id = mm.merchant_group_id
	LEFT JOIN dbo.merchant_list m WITH (NOLOCK) ON um.merchant_id = m.merchant_id
	WHERE um.user_merchant_group_id = @user_merchant_group_id
	AND um.merchant_group_id LIKE @merchant_group_id 
	AND m.currency LIKE @currency
	AND m.payment_channel_id LIKE @payment_channel_id

	UNION ALL

	SELECT	user_merchant_group_merchant_id = 0, user_merchant_group_id = '', user_merchant_group_name = '',
			me.company_id, me.operator_id, me.merchant_group_id, mm.merchant_group_name, me.merchant_id, me.merchant_name, me.currency, me.payment_channel_id
	FROM dbo.merchant_list me WITH (NOLOCK)
	LEFT JOIN dbo.user_merchant_group_merchant um WITH (NOLOCK) ON um.user_merchant_group_id = @user_merchant_group_id AND me.merchant_id = um.merchant_id
	LEFT JOIN dbo.master_merchant_group mm WITH (NOLOCK) ON me.merchant_group_id = mm.merchant_group_id
	WHERE um.merchant_id IS NULL
	AND me.company_id LIKE @company_id
	AND me.operator_id LIKE @operator_id
	AND me.merchant_group_id LIKE @merchant_group_id 
	AND me.currency LIKE @currency
	AND me.payment_channel_id LIKE @payment_channel_id	
	ORDER BY user_merchant_group_id DESC, merchant_name
END
GO
/****** Object:  StoredProcedure [dbo].[spUserMerchantGroupUserAdd]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserMerchantGroupUserAdd]
(
	@user_merchant_group_id int,
	@user_merchant_group_name varchar(50), --graylog
	@user_login varchar(20),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	rf_param spUserMerchantGroupUserAdd

	EXEC spUserMerchantGroupUserAdd @user_merchant_group_id=2, @user_merchant_group_name='', @user_login='mgdem13', @stamp_user='developer13'
*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@level_id varchar(1), @company_id varchar(3), @operator_id varchar(2), @merchant_group_id varchar(20),
			@getdate datetime, @user_guid varchar(20)

	IF NOT EXISTS(SELECT user_merchant_group_id FROM dbo.user_merchant_group WITH (NOLOCK) WHERE user_merchant_group_id = @user_merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT	@level_id = level_id,
			@company_id = company_id, 
			@operator_id = operator_id, 
			@merchant_group_id = merchant_group_id,
			@user_merchant_group_name = user_merchant_group_name
	FROM dbo.user_merchant_group WITH (NOLOCK) 
	WHERE user_merchant_group_id = @user_merchant_group_id

	IF NOT EXISTS(SELECT user_login FROM dbo.master_user WITH (NOLOCK) WHERE level_id = @level_id AND company_id = @company_id AND 
		operator_id = @operator_id AND merchant_group_id = @merchant_group_id AND user_login = @user_login)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT @user_guid = user_guid FROM dbo.master_user WITH (NOLOCK) WHERE user_login = @user_login

	BEGIN TRY
		BEGIN TRANSACTION
		
		SET @getdate = dbo.fnGetDateGMT7()

		IF NOT EXISTS(SELECT user_merchant_group_id FROM dbo.user_merchant_group_user WHERE user_merchant_group_id = @user_merchant_group_id AND user_login = @user_login)
		BEGIN
			INSERT INTO dbo.user_merchant_group_user(user_merchant_group_id, user_merchant_group_name, 
				level_id, company_id, operator_id, merchant_group_id, user_guid, user_login, create_date)
			VALUES(@user_merchant_group_id, @user_merchant_group_name, 
				@level_id, @company_id, @operator_id, @merchant_group_id, @user_guid, @user_login, @getdate)
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserMerchantGroupUserDelete]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserMerchantGroupUserDelete]
(
	@user_merchant_group_user_id int,
	@user_merchant_group_id int,
	@user_merchant_group_name varchar(50), --graylog
	@company_id varchar(3),
	@operator_id varchar(2),
	@merchant_group_id varchar(20),
	@user_login varchar(20),
	@stamp_user varchar(20)
)
AS
BEGIN
/*
	rf_param spUserMerchantGroupUserDelete

	EXEC spUserMerchantGroupUserDelete @user_merchant_group_user_id=1, @user_merchant_group_id=2, @user_merchant_group_name='', 
		@company_id='000', @operator_id='00', @merchant_group_id='MGDEV', @user_login='mgdem13', @stamp_user='developer13'

*/
	SET NOCOUNT ON;
	SET XACT_ABORT ON;
	
	DECLARE @result_code int, @error_message varchar(1000)

	IF NOT EXISTS(SELECT user_merchant_group_user_id FROM dbo.user_merchant_group_user WITH (NOLOCK) WHERE user_merchant_group_user_id = @user_merchant_group_user_id 
		AND company_id = @company_id AND operator_id = @operator_id AND merchant_group_id = @merchant_group_id AND user_login = @user_login)
	BEGIN
		SELECT @result_code = 1, @error_message = 'User already remove'
		SELECT @result_code, @error_message
		RETURN
	END

	BEGIN TRY
		BEGIN TRANSACTION
	
		DELETE FROM dbo.user_merchant_group_user WHERE user_merchant_group_user_id = @user_merchant_group_user_id

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SELECT @result_code = 39999, @error_message = ERROR_MESSAGE()
		SELECT @result_code, @error_message
		RETURN
	END CATCH

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message
END
GO
/****** Object:  StoredProcedure [dbo].[spUserMerchantGroupUserList]    Script Date: 3/9/2023 1:33:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[spUserMerchantGroupUserList]
(
	@user_merchant_group_id int,
	@merchant_group_id varchar(20),
	@user_merchant_group_name varchar(50), --graylog
	@stamp_user varchar(20)
)
AS
/*
	rf_param spUserMerchantGroupUserList 

	EXEC spUserMerchantGroupUserList @user_merchant_group_id=2, @merchant_group_id='', @user_merchant_group_name='', @stamp_user='developer13'

*/
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @result_code int, @error_message varchar(1000),
			@level_id varchar(1), @company_id varchar(3), @operator_id varchar(2), @merchant_group_id_usergroup varchar(20)

	IF NOT EXISTS(SELECT user_merchant_group_id FROM dbo.user_merchant_group WITH (NOLOCK) WHERE user_merchant_group_id = @user_merchant_group_id)
	BEGIN
		SELECT @result_code = 39999, @error_message = 'User Merchant Group not found'
		SELECT @result_code, @error_message
		RETURN
	END

	SELECT	@level_id = level_id,
			@company_id = company_id,
			@operator_id = operator_id,
			@merchant_group_id_usergroup = merchant_group_id
	FROM dbo.user_merchant_group WITH (NOLOCK)
	WHERE user_merchant_group_id = @user_merchant_group_id

	IF @level_id = 'M'
	BEGIN
		SET @merchant_group_id = @merchant_group_id_usergroup

		IF @merchant_group_id_usergroup = ''
		BEGIN
			SELECT @result_code = 39999, @error_message = 'Invalid Merchant Group'
			SELECT @result_code, @error_message
			RETURN
		END
	END

	SET @merchant_group_id = CASE WHEN @merchant_group_id = '' THEN '%' ELSE @merchant_group_id END
	----------------------------------------------------------------------------

	SELECT @result_code = 1, @error_message = ''
	SELECT @result_code, @error_message

	SELECT user_merchant_group_user_id, user_merchant_group_id, user_merchant_group_name, company_id, operator_id, merchant_group_id, user_login
	FROM dbo.user_merchant_group_user WITH (NOLOCK)
	WHERE user_merchant_group_id = @user_merchant_group_id
	AND merchant_group_id LIKE @merchant_group_id

	UNION ALL

	SELECT user_merchant_group_user_id = 0, user_merchant_group_id = '', user_merchant_group_name = '', u.company_id, u.operator_id, u.merchant_group_id, u.user_login
	FROM dbo.master_user u WITH (NOLOCK)
	LEFT JOIN dbo.user_merchant_group_user uu WITH (NOLOCK) ON uu.user_merchant_group_id = @user_merchant_group_id AND u.user_login = uu.user_login
	WHERE uu.user_login IS NULL
	AND u.status_manager = 'N'
	AND u.status_supervisor = 'N'
	AND u.status_active = 'Y'
	AND u.status_hidden = 'N'
	AND u.level_id = @level_id
	AND u.company_id = @company_id
	AND u.operator_id = @operator_id
	AND u.merchant_group_id LIKE @merchant_group_id
	ORDER BY user_merchant_group_id DESC, user_login

END
GO
USE [master]
GO
ALTER DATABASE [PacmanMainDB] SET  READ_WRITE 
GO
